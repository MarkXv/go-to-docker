// Code generated by protoc-gen-gogo.
// source: pb/counselor.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/counselor.proto

	It has these top-level messages:
		CheckActionReqResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckActionReqResp struct {
	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command         []string          `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
	Args            []string          `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Env             []string          `protobuf:"bytes,4,rep,name=env" json:"env,omitempty"`
	Conf            map[string]string `protobuf:"bytes,5,rep,name=conf" json:"conf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkDir         string            `protobuf:"bytes,6,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	Periodic        int32             `protobuf:"varint,7,opt,name=periodic,proto3" json:"periodic,omitempty"`
	StateCode       string            `protobuf:"bytes,8,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage    string            `protobuf:"bytes,9,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	Timestamp       string            `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DestinationPath string            `protobuf:"bytes,11,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
}

func (m *CheckActionReqResp) Reset()                    { *m = CheckActionReqResp{} }
func (m *CheckActionReqResp) String() string            { return proto.CompactTextString(m) }
func (*CheckActionReqResp) ProtoMessage()               {}
func (*CheckActionReqResp) Descriptor() ([]byte, []int) { return fileDescriptorCounselor, []int{0} }

func (m *CheckActionReqResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckActionReqResp) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CheckActionReqResp) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CheckActionReqResp) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *CheckActionReqResp) GetConf() map[string]string {
	if m != nil {
		return m.Conf
	}
	return nil
}

func (m *CheckActionReqResp) GetWorkDir() string {
	if m != nil {
		return m.WorkDir
	}
	return ""
}

func (m *CheckActionReqResp) GetPeriodic() int32 {
	if m != nil {
		return m.Periodic
	}
	return 0
}

func (m *CheckActionReqResp) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

func (m *CheckActionReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *CheckActionReqResp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *CheckActionReqResp) GetDestinationPath() string {
	if m != nil {
		return m.DestinationPath
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckActionReqResp)(nil), "pb.CheckActionReqResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CounselorService service

type CounselorServiceClient interface {
	CreateCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error)
	ReapCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error)
	UpdateCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error)
	DeleteCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error)
}

type counselorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCounselorServiceClient(cc *grpc.ClientConn) CounselorServiceClient {
	return &counselorServiceClient{cc}
}

func (c *counselorServiceClient) CreateCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error) {
	out := new(CheckActionReqResp)
	err := grpc.Invoke(ctx, "/pb.CounselorService/CreateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counselorServiceClient) ReapCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error) {
	out := new(CheckActionReqResp)
	err := grpc.Invoke(ctx, "/pb.CounselorService/ReapCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counselorServiceClient) UpdateCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error) {
	out := new(CheckActionReqResp)
	err := grpc.Invoke(ctx, "/pb.CounselorService/UpdateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counselorServiceClient) DeleteCheck(ctx context.Context, in *CheckActionReqResp, opts ...grpc.CallOption) (*CheckActionReqResp, error) {
	out := new(CheckActionReqResp)
	err := grpc.Invoke(ctx, "/pb.CounselorService/DeleteCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CounselorService service

type CounselorServiceServer interface {
	CreateCheck(context.Context, *CheckActionReqResp) (*CheckActionReqResp, error)
	ReapCheck(context.Context, *CheckActionReqResp) (*CheckActionReqResp, error)
	UpdateCheck(context.Context, *CheckActionReqResp) (*CheckActionReqResp, error)
	DeleteCheck(context.Context, *CheckActionReqResp) (*CheckActionReqResp, error)
}

func RegisterCounselorServiceServer(s *grpc.Server, srv CounselorServiceServer) {
	s.RegisterService(&_CounselorService_serviceDesc, srv)
}

func _CounselorService_CreateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounselorServiceServer).CreateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CounselorService/CreateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounselorServiceServer).CreateCheck(ctx, req.(*CheckActionReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounselorService_ReapCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounselorServiceServer).ReapCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CounselorService/ReapCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounselorServiceServer).ReapCheck(ctx, req.(*CheckActionReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounselorService_UpdateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounselorServiceServer).UpdateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CounselorService/UpdateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounselorServiceServer).UpdateCheck(ctx, req.(*CheckActionReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounselorService_DeleteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounselorServiceServer).DeleteCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CounselorService/DeleteCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounselorServiceServer).DeleteCheck(ctx, req.(*CheckActionReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CounselorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CounselorService",
	HandlerType: (*CounselorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCheck",
			Handler:    _CounselorService_CreateCheck_Handler,
		},
		{
			MethodName: "ReapCheck",
			Handler:    _CounselorService_ReapCheck_Handler,
		},
		{
			MethodName: "UpdateCheck",
			Handler:    _CounselorService_UpdateCheck_Handler,
		},
		{
			MethodName: "DeleteCheck",
			Handler:    _CounselorService_DeleteCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/counselor.proto",
}

func (m *CheckActionReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckActionReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Env) > 0 {
		for _, s := range m.Env {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Conf) > 0 {
		for k, _ := range m.Conf {
			dAtA[i] = 0x2a
			i++
			v := m.Conf[k]
			mapSize := 1 + len(k) + sovCounselor(uint64(len(k))) + 1 + len(v) + sovCounselor(uint64(len(v)))
			i = encodeVarintCounselor(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCounselor(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCounselor(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.WorkDir) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.WorkDir)))
		i += copy(dAtA[i:], m.WorkDir)
	}
	if m.Periodic != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(m.Periodic))
	}
	if len(m.StateCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.StateCode)))
		i += copy(dAtA[i:], m.StateCode)
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.Timestamp) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.Timestamp)))
		i += copy(dAtA[i:], m.Timestamp)
	}
	if len(m.DestinationPath) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCounselor(dAtA, i, uint64(len(m.DestinationPath)))
		i += copy(dAtA[i:], m.DestinationPath)
	}
	return i, nil
}

func encodeFixed64Counselor(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Counselor(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCounselor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckActionReqResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovCounselor(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovCounselor(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for _, s := range m.Env {
			l = len(s)
			n += 1 + l + sovCounselor(uint64(l))
		}
	}
	if len(m.Conf) > 0 {
		for k, v := range m.Conf {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCounselor(uint64(len(k))) + 1 + len(v) + sovCounselor(uint64(len(v)))
			n += mapEntrySize + 1 + sovCounselor(uint64(mapEntrySize))
		}
	}
	l = len(m.WorkDir)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	if m.Periodic != 0 {
		n += 1 + sovCounselor(uint64(m.Periodic))
	}
	l = len(m.StateCode)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	l = len(m.DestinationPath)
	if l > 0 {
		n += 1 + l + sovCounselor(uint64(l))
	}
	return n
}

func sovCounselor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCounselor(x uint64) (n int) {
	return sovCounselor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckActionReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounselor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckActionReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckActionReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthCounselor
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Conf == nil {
				m.Conf = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCounselor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCounselor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthCounselor
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Conf[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Conf[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Periodic", wireType)
			}
			m.Periodic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Periodic |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounselor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounselor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounselor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCounselor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCounselor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounselor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCounselor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCounselor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCounselor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCounselor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCounselor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/counselor.proto", fileDescriptorCounselor) }

var fileDescriptorCounselor = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x8e, 0x12, 0x41,
	0x10, 0xc6, 0x1d, 0x06, 0x16, 0xa6, 0xd0, 0x48, 0x2a, 0xfe, 0xe9, 0x45, 0x44, 0x82, 0x17, 0xdc,
	0x44, 0x26, 0xee, 0x9a, 0x68, 0xf6, 0xa6, 0xac, 0x47, 0x13, 0x33, 0xc6, 0xcb, 0x1e, 0x24, 0xcd,
	0x4c, 0x2d, 0x4c, 0x60, 0xba, 0xdb, 0xee, 0x5e, 0xcc, 0xc6, 0x78, 0xf1, 0x15, 0xbc, 0x98, 0x78,
	0xf4, 0x65, 0x3c, 0x9a, 0xf8, 0x02, 0x06, 0x7d, 0x10, 0xd3, 0x3d, 0x2e, 0x31, 0xae, 0x5c, 0xb8,
	0x55, 0xfd, 0xea, 0xa3, 0x3e, 0xea, 0x9b, 0x19, 0x40, 0x35, 0x89, 0x53, 0x79, 0x2a, 0x0c, 0x2d,
	0xa4, 0x1e, 0x2a, 0x2d, 0xad, 0xc4, 0x8a, 0x9a, 0xb4, 0x3b, 0x53, 0x29, 0xa7, 0x0b, 0x8a, 0xb9,
	0xca, 0x63, 0x2e, 0x84, 0xb4, 0xdc, 0xe6, 0x52, 0x98, 0x52, 0xd1, 0xff, 0x1c, 0x02, 0x8e, 0x66,
	0x94, 0xce, 0x9f, 0xa4, 0x0e, 0x27, 0xf4, 0x26, 0x21, 0xa3, 0x10, 0xa1, 0x2a, 0x78, 0x41, 0x2c,
	0xe8, 0x05, 0x83, 0x28, 0xf1, 0x35, 0x32, 0xa8, 0xa7, 0xb2, 0x28, 0xb8, 0xc8, 0x58, 0xa5, 0x17,
	0x0e, 0xa2, 0xe4, 0xbc, 0x75, 0x6a, 0xae, 0xa7, 0x86, 0x85, 0x1e, 0xfb, 0x1a, 0x5b, 0x10, 0x92,
	0x58, 0xb2, 0xaa, 0x47, 0xae, 0xc4, 0x87, 0x50, 0x4d, 0xa5, 0x38, 0x61, 0xb5, 0x5e, 0x38, 0x68,
	0xee, 0xf7, 0x86, 0x6a, 0x32, 0xbc, 0xe8, 0x3c, 0x1c, 0x49, 0x71, 0xf2, 0x4c, 0x58, 0x7d, 0x96,
	0x78, 0x35, 0xee, 0x42, 0xe3, 0xad, 0xd4, 0xf3, 0x71, 0x96, 0x6b, 0xb6, 0xe3, 0xff, 0x4d, 0xdd,
	0xf5, 0x47, 0xb9, 0xc6, 0x36, 0x34, 0x14, 0xe9, 0x5c, 0x66, 0x79, 0xca, 0xea, 0xbd, 0x60, 0x50,
	0x4b, 0xd6, 0x3d, 0xde, 0x06, 0x30, 0x96, 0x5b, 0x1a, 0xa7, 0x32, 0x23, 0xd6, 0xf0, 0x3f, 0x8c,
	0x3c, 0x19, 0xc9, 0x8c, 0xf0, 0x2e, 0x5c, 0x29, 0xc7, 0x05, 0x19, 0xc3, 0xa7, 0xc4, 0x22, 0xaf,
	0xb8, 0xec, 0xe1, 0xf3, 0x92, 0x61, 0x07, 0x22, 0x9b, 0x17, 0x64, 0x2c, 0x2f, 0x14, 0x83, 0x72,
	0xc5, 0x1a, 0xe0, 0x3d, 0x68, 0x65, 0x64, 0x6c, 0x2e, 0x7c, 0x9e, 0x63, 0xc5, 0xed, 0x8c, 0x35,
	0xbd, 0xe8, 0xea, 0x5f, 0xfc, 0x05, 0xb7, 0xb3, 0xf6, 0x23, 0x88, 0xd6, 0x67, 0xb9, 0x60, 0xe6,
	0x74, 0xf6, 0x27, 0x59, 0x57, 0xe2, 0x35, 0xa8, 0x2d, 0xf9, 0xe2, 0x94, 0x58, 0xc5, 0xb3, 0xb2,
	0x39, 0xac, 0x3c, 0x0e, 0xf6, 0xbf, 0x84, 0xd0, 0x1a, 0x9d, 0x3f, 0xd3, 0x97, 0xa4, 0x97, 0x79,
	0x4a, 0x78, 0x0c, 0xcd, 0x91, 0x26, 0x77, 0x89, 0x4b, 0x0f, 0x6f, 0xfc, 0x3f, 0xc8, 0xf6, 0x06,
	0xde, 0xbf, 0xf5, 0xe1, 0xfb, 0xaf, 0x8f, 0x95, 0xeb, 0xfd, 0x56, 0xbc, 0x7c, 0x10, 0xa7, 0x6e,
	0xce, 0xfd, 0xdc, 0x1c, 0x06, 0x7b, 0xa8, 0x20, 0x4a, 0x88, 0xab, 0xed, 0x36, 0x1f, 0xf8, 0xcd,
	0xf7, 0xf1, 0xe6, 0xbf, 0x9b, 0xe3, 0x77, 0xee, 0x05, 0x7a, 0x7f, 0x8c, 0x78, 0xc1, 0x14, 0x39,
	0x34, 0x5f, 0xa9, 0x6c, 0xeb, 0x6b, 0xfa, 0xde, 0xb3, 0xd3, 0xde, 0xe4, 0xe9, 0x8e, 0x7a, 0x0d,
	0xcd, 0x23, 0x5a, 0xd0, 0xb6, 0x16, 0x77, 0xbc, 0xc5, 0xee, 0xde, 0x26, 0x8b, 0xa7, 0xad, 0xaf,
	0xab, 0x6e, 0xf0, 0x6d, 0xd5, 0x0d, 0x7e, 0xac, 0xba, 0xc1, 0xa7, 0x9f, 0xdd, 0x4b, 0x93, 0x1d,
	0xff, 0x71, 0x1d, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xe4, 0xcf, 0x34, 0x94, 0x03, 0x00,
	0x00,
}
