// Code generated by protoc-gen-gogo.
// source: pb/span.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SpanRefType int32

const (
	SpanRefType_ChildOf     SpanRefType = 0
	SpanRefType_FollowsFrom SpanRefType = 1
)

var SpanRefType_name = map[int32]string{
	0: "ChildOf",
	1: "FollowsFrom",
}
var SpanRefType_value = map[string]int32{
	"ChildOf":     0,
	"FollowsFrom": 1,
}

func (x SpanRefType) String() string {
	return proto.EnumName(SpanRefType_name, int32(x))
}
func (SpanRefType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSpan, []int{0} }

type ValueType int32

const (
	ValueType_StringType  ValueType = 0
	ValueType_BoolType    ValueType = 1
	ValueType_Int64Type   ValueType = 2
	ValueType_Float64Type ValueType = 3
	ValueType_BinaryType  ValueType = 4
)

var ValueType_name = map[int32]string{
	0: "StringType",
	1: "BoolType",
	2: "Int64Type",
	3: "Float64Type",
	4: "BinaryType",
}
var ValueType_value = map[string]int32{
	"StringType":  0,
	"BoolType":    1,
	"Int64Type":   2,
	"Float64Type": 3,
	"BinaryType":  4,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSpan, []int{1} }

// Trace is a directed acyclic graph of Spans
type Trace struct {
	Spans    []*Span  `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{0} }

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *Trace) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

// Span represents a unit of work in an application, such as an RPC, a database call, etc.
type Span struct {
	TraceId      *TraceID   `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId       uint64     `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId uint64     `protobuf:"varint,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	References   []*SpanRef `protobuf:"bytes,4,rep,name=references" json:"references,omitempty"`
	Flags        uint32     `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	// google.protobuf.Timestamp start_time = 6;
	StartTime int64       `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration  int64       `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Tags      []*KeyValue `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Logs      []*Log      `protobuf:"bytes,9,rep,name=logs" json:"logs,omitempty"`
	Process   *Process    `protobuf:"bytes,10,opt,name=process" json:"process,omitempty"`
	Warnings  []string    `protobuf:"bytes,11,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{1} }

func (m *Span) GetTraceId() *TraceID {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *Span) GetParentSpanId() uint64 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *Span) GetReferences() []*SpanRef {
	if m != nil {
		return m.References
	}
	return nil
}

func (m *Span) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Span) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Span) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Span) GetTags() []*KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Span) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Span) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Span) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

// TraceID is a random 128bit identifier for a trace
type TraceID struct {
	Low  uint64 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	High uint64 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *TraceID) Reset()                    { *m = TraceID{} }
func (m *TraceID) String() string            { return proto.CompactTextString(m) }
func (*TraceID) ProtoMessage()               {}
func (*TraceID) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{2} }

func (m *TraceID) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *TraceID) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

// SpanRef describes a reference from one span to another
type SpanRef struct {
	RefType SpanRefType `protobuf:"varint,1,opt,name=ref_type,json=refType,proto3,enum=pb.SpanRefType" json:"ref_type,omitempty"`
	TraceId *TraceID    `protobuf:"bytes,2,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId  uint64      `protobuf:"varint,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (m *SpanRef) Reset()                    { *m = SpanRef{} }
func (m *SpanRef) String() string            { return proto.CompactTextString(m) }
func (*SpanRef) ProtoMessage()               {}
func (*SpanRef) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{3} }

func (m *SpanRef) GetRefType() SpanRefType {
	if m != nil {
		return m.RefType
	}
	return SpanRefType_ChildOf
}

func (m *SpanRef) GetTraceId() *TraceID {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *SpanRef) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

// KeyValue describes a tag or a log field that consists of a key and a typed value.
// Before accessing a value, the caller must check the type. Boolean and numeric
// values should be accessed via accessor methods Bool(), Int64(), and Float64().
//
// This struct is designed to minimize heap allocations.
type KeyValue struct {
	Key   string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	VType ValueType `protobuf:"varint,2,opt,name=v_type,json=vType,proto3,enum=pb.ValueType" json:"v_type,omitempty"`
	VStr  string    `protobuf:"bytes,3,opt,name=v_str,json=vStr,proto3" json:"v_str,omitempty"`
	VNum  int64     `protobuf:"varint,4,opt,name=v_num,json=vNum,proto3" json:"v_num,omitempty"`
	VBlob []byte    `protobuf:"bytes,5,opt,name=v_blob,json=vBlob,proto3" json:"v_blob,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{4} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetVType() ValueType {
	if m != nil {
		return m.VType
	}
	return ValueType_StringType
}

func (m *KeyValue) GetVStr() string {
	if m != nil {
		return m.VStr
	}
	return ""
}

func (m *KeyValue) GetVNum() int64 {
	if m != nil {
		return m.VNum
	}
	return 0
}

func (m *KeyValue) GetVBlob() []byte {
	if m != nil {
		return m.VBlob
	}
	return nil
}

// Log describes a micro-log entry that consists of a timestamp and one or more key-value fields
type Log struct {
	// google.protobuf.Timestamp timestamp = 1;
	Timestamp int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Fields    []*KeyValue `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{5} }

func (m *Log) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Log) GetFields() []*KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Process describes an instance of an application or service that emits tracing data.
type Process struct {
	ServiceName string      `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Tags        []*KeyValue `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{6} }

func (m *Process) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Process) GetTags() []*KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

// DependencyLink shows dependencies between services
type DependencyLink struct {
	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Child     string `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	CallCount uint64 `protobuf:"varint,3,opt,name=call_count,json=callCount,proto3" json:"call_count,omitempty"`
}

func (m *DependencyLink) Reset()                    { *m = DependencyLink{} }
func (m *DependencyLink) String() string            { return proto.CompactTextString(m) }
func (*DependencyLink) ProtoMessage()               {}
func (*DependencyLink) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{7} }

func (m *DependencyLink) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *DependencyLink) GetChild() string {
	if m != nil {
		return m.Child
	}
	return ""
}

func (m *DependencyLink) GetCallCount() uint64 {
	if m != nil {
		return m.CallCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Trace)(nil), "pb.Trace")
	proto.RegisterType((*Span)(nil), "pb.Span")
	proto.RegisterType((*TraceID)(nil), "pb.TraceID")
	proto.RegisterType((*SpanRef)(nil), "pb.SpanRef")
	proto.RegisterType((*KeyValue)(nil), "pb.KeyValue")
	proto.RegisterType((*Log)(nil), "pb.Log")
	proto.RegisterType((*Process)(nil), "pb.Process")
	proto.RegisterType((*DependencyLink)(nil), "pb.DependencyLink")
	proto.RegisterEnum("pb.SpanRefType", SpanRefType_name, SpanRefType_value)
	proto.RegisterEnum("pb.ValueType", ValueType_name, ValueType_value)
}
func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.TraceId.Size()))
		n1, err := m.TraceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.SpanId))
	}
	if m.ParentSpanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.ParentSpanId))
	}
	if len(m.References) > 0 {
		for _, msg := range m.References {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Flags))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.StartTime))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Duration))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Process != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Process.Size()))
		n2, err := m.Process.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TraceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Low != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Low))
	}
	if m.High != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.High))
	}
	return i, nil
}

func (m *SpanRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.RefType))
	}
	if m.TraceId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.TraceId.Size()))
		n3, err := m.TraceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.SpanId))
	}
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.VType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.VType))
	}
	if len(m.VStr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.VStr)))
		i += copy(dAtA[i:], m.VStr)
	}
	if m.VNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.VNum))
	}
	if len(m.VBlob) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.VBlob)))
		i += copy(dAtA[i:], m.VBlob)
	}
	return i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Process) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Process) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DependencyLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DependencyLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.Child) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Child)))
		i += copy(dAtA[i:], m.Child)
	}
	if m.CallCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.CallCount))
	}
	return i, nil
}

func encodeFixed64Span(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Span(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Trace) Size() (n int) {
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	return n
}

func (m *Span) Size() (n int) {
	var l int
	_ = l
	if m.TraceId != nil {
		l = m.TraceId.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.SpanId != 0 {
		n += 1 + sovSpan(uint64(m.SpanId))
	}
	if m.ParentSpanId != 0 {
		n += 1 + sovSpan(uint64(m.ParentSpanId))
	}
	if len(m.References) > 0 {
		for _, e := range m.References {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if m.Flags != 0 {
		n += 1 + sovSpan(uint64(m.Flags))
	}
	if m.StartTime != 0 {
		n += 1 + sovSpan(uint64(m.StartTime))
	}
	if m.Duration != 0 {
		n += 1 + sovSpan(uint64(m.Duration))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	return n
}

func (m *TraceID) Size() (n int) {
	var l int
	_ = l
	if m.Low != 0 {
		n += 1 + sovSpan(uint64(m.Low))
	}
	if m.High != 0 {
		n += 1 + sovSpan(uint64(m.High))
	}
	return n
}

func (m *SpanRef) Size() (n int) {
	var l int
	_ = l
	if m.RefType != 0 {
		n += 1 + sovSpan(uint64(m.RefType))
	}
	if m.TraceId != nil {
		l = m.TraceId.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.SpanId != 0 {
		n += 1 + sovSpan(uint64(m.SpanId))
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.VType != 0 {
		n += 1 + sovSpan(uint64(m.VType))
	}
	l = len(m.VStr)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.VNum != 0 {
		n += 1 + sovSpan(uint64(m.VNum))
	}
	l = len(m.VBlob)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func (m *Log) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSpan(uint64(m.Timestamp))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	return n
}

func (m *Process) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	return n
}

func (m *DependencyLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Child)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.CallCount != 0 {
		n += 1 + sovSpan(uint64(m.CallCount))
	}
	return n
}

func sovSpan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpan(x uint64) (n int) {
	return sovSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceId == nil {
				m.TraceId = &TraceID{}
			}
			if err := m.TraceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			m.ParentSpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, &SpanRef{})
			if err := m.References[len(m.References)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &KeyValue{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &Process{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefType", wireType)
			}
			m.RefType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefType |= (SpanRefType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceId == nil {
				m.TraceId = &TraceID{}
			}
			if err := m.TraceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VType", wireType)
			}
			m.VType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VType |= (ValueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VNum", wireType)
			}
			m.VNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VBlob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VBlob = append(m.VBlob[:0], dAtA[iNdEx:postIndex]...)
			if m.VBlob == nil {
				m.VBlob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &KeyValue{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Process) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Process: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Process: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &KeyValue{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DependencyLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DependencyLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DependencyLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallCount", wireType)
			}
			m.CallCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpan   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/span.proto", fileDescriptorSpan) }

var fileDescriptorSpan = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdb, 0x6a, 0xdb, 0x4a,
	0x14, 0x8d, 0x2e, 0xb6, 0xac, 0x2d, 0xdb, 0x31, 0x73, 0x6e, 0x22, 0xe7, 0x1c, 0x1f, 0x1f, 0x93,
	0x16, 0x93, 0x40, 0x0c, 0x69, 0xe9, 0x07, 0x38, 0x21, 0x60, 0x1a, 0xd2, 0x32, 0x0e, 0x85, 0x3e,
	0x14, 0x33, 0x92, 0xc7, 0x8a, 0xc8, 0x68, 0x46, 0x8c, 0xc6, 0x0a, 0x7e, 0xee, 0x4f, 0xf4, 0x93,
	0xfa, 0xd8, 0x4f, 0x28, 0xe9, 0x73, 0xff, 0xa1, 0xcc, 0x48, 0x76, 0x9c, 0x40, 0xa1, 0x6f, 0xb3,
	0xd6, 0xde, 0xb3, 0x67, 0x69, 0xad, 0x8d, 0xa0, 0x93, 0x47, 0xe3, 0x22, 0x27, 0xfc, 0x24, 0x97,
	0x42, 0x09, 0x64, 0xe7, 0xd1, 0xc1, 0x7f, 0x89, 0x10, 0x09, 0xa3, 0x63, 0xc3, 0x44, 0xab, 0xe5,
	0x58, 0xa5, 0x19, 0x2d, 0x14, 0xc9, 0xf2, 0xaa, 0x69, 0x78, 0x06, 0x8d, 0x6b, 0x49, 0x62, 0x8a,
	0xfa, 0xd0, 0xd0, 0x77, 0x8b, 0xd0, 0x1a, 0x38, 0xa3, 0xe0, 0xb4, 0x75, 0x92, 0x47, 0x27, 0xb3,
	0x9c, 0x70, 0x5c, 0xd1, 0xe8, 0x00, 0x5a, 0x77, 0x44, 0xf2, 0x94, 0x27, 0x45, 0x68, 0x0f, 0x9c,
	0x91, 0x8f, 0xb7, 0x78, 0xf8, 0xdd, 0x06, 0x57, 0xf7, 0xa2, 0xe7, 0xd0, 0x52, 0x7a, 0xda, 0x3c,
	0x5d, 0x84, 0xd6, 0xc0, 0x1a, 0x05, 0xa7, 0x81, 0x9e, 0x63, 0x5e, 0x98, 0x9e, 0x63, 0xcf, 0x14,
	0xa7, 0x0b, 0xf4, 0x17, 0x78, 0x7a, 0xaa, 0x6e, 0xb3, 0x07, 0xd6, 0xc8, 0xc5, 0x4d, 0x0d, 0xa7,
	0x0b, 0x74, 0x08, 0xdd, 0x9c, 0x48, 0xca, 0xd5, 0x7c, 0x53, 0x77, 0x4c, 0xbd, 0x5d, 0xb1, 0xb3,
	0xaa, 0xeb, 0x18, 0x40, 0xd2, 0x25, 0x95, 0x94, 0xc7, 0xb4, 0x08, 0x5d, 0x23, 0x38, 0xd8, 0x0a,
	0xa6, 0x4b, 0xbc, 0x53, 0x46, 0xbf, 0x43, 0x63, 0xc9, 0x48, 0x52, 0x84, 0x8d, 0x81, 0x35, 0xea,
	0xe0, 0x0a, 0xa0, 0x7f, 0x01, 0x0a, 0x45, 0xa4, 0x9a, 0x6b, 0x43, 0xc2, 0xe6, 0xc0, 0x1a, 0x39,
	0xd8, 0x37, 0xcc, 0x75, 0x9a, 0x51, 0xfd, 0xb5, 0x8b, 0x95, 0x24, 0x2a, 0x15, 0x3c, 0xf4, 0x4c,
	0x71, 0x8b, 0xd1, 0x00, 0x5c, 0xa5, 0xe7, 0xb5, 0xcc, 0xbb, 0x6d, 0xfd, 0xee, 0x6b, 0xba, 0x7e,
	0x47, 0xd8, 0x8a, 0x62, 0x53, 0x41, 0x7f, 0x83, 0xcb, 0x44, 0x52, 0x84, 0xbe, 0xe9, 0xf0, 0x74,
	0xc7, 0xa5, 0x48, 0xb0, 0x21, 0xd1, 0x33, 0xf0, 0x72, 0x29, 0x62, 0x5a, 0x14, 0x21, 0x3c, 0x58,
	0xf4, 0xb6, 0xa2, 0xf0, 0xa6, 0xf6, 0xc8, 0xef, 0xe0, 0x89, 0xdf, 0x63, 0xf0, 0x6a, 0x4b, 0x51,
	0x0f, 0x1c, 0x26, 0xee, 0x8c, 0xd9, 0x2e, 0xd6, 0x47, 0x84, 0xc0, 0xbd, 0x49, 0x93, 0x9b, 0xda,
	0x58, 0x73, 0x1e, 0x96, 0xe0, 0xd5, 0xd6, 0xa0, 0x23, 0x68, 0x49, 0xba, 0x9c, 0xab, 0x75, 0x4e,
	0xcd, 0xad, 0xee, 0xe9, 0xfe, 0x8e, 0x73, 0xd7, 0xeb, 0x9c, 0x62, 0x4f, 0x56, 0x87, 0x47, 0x71,
	0xda, 0xbf, 0x16, 0xa7, 0xb3, 0x1b, 0xe7, 0xf0, 0xa3, 0x05, 0xad, 0x8d, 0x37, 0x5a, 0xea, 0x2d,
	0x5d, 0x9b, 0x47, 0x7d, 0xac, 0x8f, 0xe8, 0x10, 0x9a, 0x65, 0xa5, 0xc4, 0x36, 0x4a, 0x3a, 0x7a,
	0xba, 0x69, 0x36, 0x3a, 0x1a, 0xa5, 0x51, 0xf1, 0x1b, 0x34, 0xca, 0x79, 0xa1, 0xa4, 0x99, 0xed,
	0x63, 0xb7, 0x9c, 0x29, 0x59, 0x91, 0x7c, 0x95, 0x85, 0xae, 0x49, 0xc7, 0x2d, 0xaf, 0x56, 0x19,
	0xfa, 0x43, 0xcf, 0x8b, 0x98, 0x88, 0x4c, 0xd6, 0x6d, 0xdc, 0x28, 0x27, 0x4c, 0x44, 0xc3, 0x29,
	0x38, 0x97, 0x22, 0x41, 0xff, 0x80, 0xbf, 0xdd, 0x7e, 0xa3, 0xc2, 0xc1, 0x0f, 0x84, 0xd6, 0xb2,
	0x4c, 0x29, 0x5b, 0x54, 0xdb, 0xfd, 0x34, 0xd7, 0xba, 0x36, 0xbc, 0x02, 0xaf, 0x4e, 0x0a, 0xfd,
	0x0f, 0xed, 0x82, 0xca, 0x32, 0x8d, 0xe9, 0x9c, 0x93, 0x8c, 0xd6, 0xdf, 0x15, 0xd4, 0xdc, 0x15,
	0xc9, 0xe8, 0x76, 0x53, 0xec, 0x9f, 0x6d, 0xca, 0xf0, 0x03, 0x74, 0xcf, 0x69, 0x4e, 0xf9, 0x82,
	0xf2, 0x78, 0x7d, 0x99, 0xf2, 0x5b, 0xf4, 0x27, 0x34, 0xab, 0x5d, 0xaf, 0x07, 0xd6, 0x48, 0xaf,
	0x71, 0x7c, 0x93, 0xb2, 0x2a, 0x08, 0x1f, 0x57, 0x40, 0xaf, 0x71, 0x4c, 0x18, 0x9b, 0xc7, 0x62,
	0xc5, 0x55, 0x6d, 0xbe, 0xaf, 0x99, 0x33, 0x4d, 0x1c, 0x1d, 0x43, 0xb0, 0x13, 0x2c, 0x0a, 0xc0,
	0x3b, 0xd3, 0xd7, 0xde, 0x2c, 0x7b, 0x7b, 0x68, 0x1f, 0x82, 0x0b, 0xc1, 0x98, 0xb8, 0x2b, 0x2e,
	0xa4, 0xc8, 0x7a, 0xd6, 0xd1, 0x7b, 0xf0, 0xb7, 0xde, 0xa3, 0x2e, 0xc0, 0x4c, 0xc9, 0x94, 0x27,
	0x1a, 0xf5, 0xf6, 0x50, 0x1b, 0x5a, 0x13, 0x21, 0x98, 0x41, 0x16, 0xea, 0x80, 0x3f, 0xe5, 0xea,
	0xd5, 0x4b, 0x03, 0x6d, 0x33, 0x8a, 0x09, 0xb2, 0x21, 0x1c, 0x7d, 0x7b, 0x92, 0x72, 0x22, 0xd7,
	0x06, 0xbb, 0x93, 0xde, 0xe7, 0xfb, 0xbe, 0xf5, 0xe5, 0xbe, 0x6f, 0x7d, 0xbd, 0xef, 0x5b, 0x9f,
	0xbe, 0xf5, 0xf7, 0xa2, 0xa6, 0xf9, 0xfd, 0xbc, 0xf8, 0x11, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x51,
	0x8d, 0x75, 0xb4, 0x04, 0x00, 0x00,
}
