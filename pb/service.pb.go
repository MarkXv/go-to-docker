// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/service.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/service.proto

	It has these top-level messages:
		DockerImagePullReqResp
		DockerNetworkCreateReqResp
		DockerContainerRunReqResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import moby "github.com/tangfeixiong/go-to-docker/pb/moby"
import container "github.com/tangfeixiong/go-to-docker/pb/moby/container"
import network "github.com/tangfeixiong/go-to-docker/pb/moby/network"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DockerImagePullReqResp struct {
	RefStr           string                 `protobuf:"bytes,1,opt,name=ref_str,json=refStr,proto3" json:"ref_str,omitempty"`
	ImagePullOptions *moby.ImagePullOptions `protobuf:"bytes,2,opt,name=image_pull_options,json=imagePullOptions" json:"image_pull_options,omitempty"`
	RespBody         []byte                 `protobuf:"bytes,3,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
	StateCode        int32                  `protobuf:"varint,4,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage     string                 `protobuf:"bytes,5,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerImagePullReqResp) Reset()                    { *m = DockerImagePullReqResp{} }
func (m *DockerImagePullReqResp) String() string            { return proto.CompactTextString(m) }
func (*DockerImagePullReqResp) ProtoMessage()               {}
func (*DockerImagePullReqResp) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *DockerImagePullReqResp) GetRefStr() string {
	if m != nil {
		return m.RefStr
	}
	return ""
}

func (m *DockerImagePullReqResp) GetImagePullOptions() *moby.ImagePullOptions {
	if m != nil {
		return m.ImagePullOptions
	}
	return nil
}

func (m *DockerImagePullReqResp) GetRespBody() []byte {
	if m != nil {
		return m.RespBody
	}
	return nil
}

func (m *DockerImagePullReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerImagePullReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DockerNetworkCreateReqResp struct {
	Name                  string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NetworkCreate         *moby.NetworkCreate         `protobuf:"bytes,2,opt,name=network_create,json=networkCreate" json:"network_create,omitempty"`
	NetworkCreateResponse *moby.NetworkCreateResponse `protobuf:"bytes,3,opt,name=network_create_response,json=networkCreateResponse" json:"network_create_response,omitempty"`
	StateCode             int32                       `protobuf:"varint,4,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage          string                      `protobuf:"bytes,5,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerNetworkCreateReqResp) Reset()         { *m = DockerNetworkCreateReqResp{} }
func (m *DockerNetworkCreateReqResp) String() string { return proto.CompactTextString(m) }
func (*DockerNetworkCreateReqResp) ProtoMessage()    {}
func (*DockerNetworkCreateReqResp) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{1}
}

func (m *DockerNetworkCreateReqResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerNetworkCreateReqResp) GetNetworkCreate() *moby.NetworkCreate {
	if m != nil {
		return m.NetworkCreate
	}
	return nil
}

func (m *DockerNetworkCreateReqResp) GetNetworkCreateResponse() *moby.NetworkCreateResponse {
	if m != nil {
		return m.NetworkCreateResponse
	}
	return nil
}

func (m *DockerNetworkCreateReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerNetworkCreateReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DockerContainerRunReqResp struct {
	Config                  *container.Config                     `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	HostConfig              *container.HostConfig                 `protobuf:"bytes,2,opt,name=host_config,json=hostConfig" json:"host_config,omitempty"`
	NetworkingConfig        *network.NetworkingConfig             `protobuf:"bytes,3,opt,name=networking_config,json=networkingConfig" json:"networking_config,omitempty"`
	Name                    string                                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ContainerCreateResponse *container.ContainerCreateCreatedBody `protobuf:"bytes,5,opt,name=container_create_response,json=containerCreateResponse" json:"container_create_response,omitempty"`
	StateCode               int32                                 `protobuf:"varint,6,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage            string                                `protobuf:"bytes,7,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerContainerRunReqResp) Reset()                    { *m = DockerContainerRunReqResp{} }
func (m *DockerContainerRunReqResp) String() string            { return proto.CompactTextString(m) }
func (*DockerContainerRunReqResp) ProtoMessage()               {}
func (*DockerContainerRunReqResp) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *DockerContainerRunReqResp) GetConfig() *container.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DockerContainerRunReqResp) GetHostConfig() *container.HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *DockerContainerRunReqResp) GetNetworkingConfig() *network.NetworkingConfig {
	if m != nil {
		return m.NetworkingConfig
	}
	return nil
}

func (m *DockerContainerRunReqResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerContainerRunReqResp) GetContainerCreateResponse() *container.ContainerCreateCreatedBody {
	if m != nil {
		return m.ContainerCreateResponse
	}
	return nil
}

func (m *DockerContainerRunReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerContainerRunReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*DockerImagePullReqResp)(nil), "pb.DockerImagePullReqResp")
	proto.RegisterType((*DockerNetworkCreateReqResp)(nil), "pb.DockerNetworkCreateReqResp")
	proto.RegisterType((*DockerContainerRunReqResp)(nil), "pb.DockerContainerRunReqResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimpleService service

type SimpleServiceClient interface {
	// Pull Docker image
	//
	// Like command of 'docker pull', Input/Output is a same Protobuf/JSON object. For input example:
	// { "image_ref": "docker.io/nginx" }
	// For output example:
	// { "image_ref": "docker.io/nginx", "state_code": 0, "state_message": "SUCCEEDED" }
	PullImage(ctx context.Context, in *DockerImagePullReqResp, opts ...grpc.CallOption) (*DockerImagePullReqResp, error)
	// Run Docker container
	//
	// For output, plus result fileds:
	// { ..., "state_code": 0, "state_message": "RUNNING" }
	RunContainer(ctx context.Context, in *DockerContainerRunReqResp, opts ...grpc.CallOption) (*DockerContainerRunReqResp, error)
	// Create Docker network
	//
	//
	CreateNetwork(ctx context.Context, in *DockerNetworkCreateReqResp, opts ...grpc.CallOption) (*DockerNetworkCreateReqResp, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) PullImage(ctx context.Context, in *DockerImagePullReqResp, opts ...grpc.CallOption) (*DockerImagePullReqResp, error) {
	out := new(DockerImagePullReqResp)
	err := grpc.Invoke(ctx, "/pb.SimpleService/PullImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RunContainer(ctx context.Context, in *DockerContainerRunReqResp, opts ...grpc.CallOption) (*DockerContainerRunReqResp, error) {
	out := new(DockerContainerRunReqResp)
	err := grpc.Invoke(ctx, "/pb.SimpleService/RunContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateNetwork(ctx context.Context, in *DockerNetworkCreateReqResp, opts ...grpc.CallOption) (*DockerNetworkCreateReqResp, error) {
	out := new(DockerNetworkCreateReqResp)
	err := grpc.Invoke(ctx, "/pb.SimpleService/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleService service

type SimpleServiceServer interface {
	// Pull Docker image
	//
	// Like command of 'docker pull', Input/Output is a same Protobuf/JSON object. For input example:
	// { "image_ref": "docker.io/nginx" }
	// For output example:
	// { "image_ref": "docker.io/nginx", "state_code": 0, "state_message": "SUCCEEDED" }
	PullImage(context.Context, *DockerImagePullReqResp) (*DockerImagePullReqResp, error)
	// Run Docker container
	//
	// For output, plus result fileds:
	// { ..., "state_code": 0, "state_message": "RUNNING" }
	RunContainer(context.Context, *DockerContainerRunReqResp) (*DockerContainerRunReqResp, error)
	// Create Docker network
	//
	//
	CreateNetwork(context.Context, *DockerNetworkCreateReqResp) (*DockerNetworkCreateReqResp, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerImagePullReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SimpleService/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).PullImage(ctx, req.(*DockerImagePullReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerContainerRunReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SimpleService/RunContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).RunContainer(ctx, req.(*DockerContainerRunReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerNetworkCreateReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SimpleService/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).CreateNetwork(ctx, req.(*DockerNetworkCreateReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullImage",
			Handler:    _SimpleService_PullImage_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _SimpleService_RunContainer_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _SimpleService_CreateNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func (m *DockerImagePullReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerImagePullReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RefStr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RefStr)))
		i += copy(dAtA[i:], m.RefStr)
	}
	if m.ImagePullOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ImagePullOptions.Size()))
		n1, err := m.ImagePullOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.RespBody) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RespBody)))
		i += copy(dAtA[i:], m.RespBody)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DockerNetworkCreateReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerNetworkCreateReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NetworkCreate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkCreate.Size()))
		n2, err := m.NetworkCreate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.NetworkCreateResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkCreateResponse.Size()))
		n3, err := m.NetworkCreateResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DockerContainerRunReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerContainerRunReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Config.Size()))
		n4, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.HostConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HostConfig.Size()))
		n5, err := m.HostConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.NetworkingConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkingConfig.Size()))
		n6, err := m.NetworkingConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ContainerCreateResponse != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ContainerCreateResponse.Size()))
		n7, err := m.ContainerCreateResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DockerImagePullReqResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RefStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ImagePullOptions != nil {
		l = m.ImagePullOptions.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RespBody)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerNetworkCreateReqResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkCreate != nil {
		l = m.NetworkCreate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkCreateResponse != nil {
		l = m.NetworkCreateResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerContainerRunReqResp) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostConfig != nil {
		l = m.HostConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkingConfig != nil {
		l = m.NetworkingConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ContainerCreateResponse != nil {
		l = m.ContainerCreateResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DockerImagePullReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerImagePullReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerImagePullReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImagePullOptions == nil {
				m.ImagePullOptions = &moby.ImagePullOptions{}
			}
			if err := m.ImagePullOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBody = append(m.RespBody[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBody == nil {
				m.RespBody = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerNetworkCreateReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerNetworkCreateReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerNetworkCreateReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkCreate == nil {
				m.NetworkCreate = &moby.NetworkCreate{}
			}
			if err := m.NetworkCreate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkCreateResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkCreateResponse == nil {
				m.NetworkCreateResponse = &moby.NetworkCreateResponse{}
			}
			if err := m.NetworkCreateResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerContainerRunReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerContainerRunReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerContainerRunReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &container.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostConfig == nil {
				m.HostConfig = &container.HostConfig{}
			}
			if err := m.HostConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkingConfig == nil {
				m.NetworkingConfig = &network.NetworkingConfig{}
			}
			if err := m.NetworkingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerCreateResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerCreateResponse == nil {
				m.ContainerCreateResponse = &container.ContainerCreateCreatedBody{}
			}
			if err := m.ContainerCreateResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x9c, 0x26, 0xe9, 0x97, 0x49, 0x52, 0xd2, 0x29, 0x6d, 0x12, 0x97, 0x58, 0xc1, 0x80,
	0x14, 0x2a, 0xd5, 0x16, 0x41, 0x62, 0x91, 0x65, 0x53, 0x21, 0x58, 0x50, 0x90, 0xf3, 0x00, 0x96,
	0x7f, 0x26, 0xae, 0x55, 0x67, 0xc6, 0x8c, 0xc7, 0x45, 0x59, 0x82, 0xc4, 0x13, 0xb0, 0xe1, 0x91,
	0x58, 0x56, 0x62, 0xc3, 0x12, 0x05, 0x1e, 0x04, 0x79, 0x66, 0xec, 0x24, 0x6d, 0x68, 0x37, 0x6c,
	0xdc, 0xe9, 0xb9, 0x67, 0xee, 0x9d, 0x73, 0xee, 0xbd, 0x01, 0xad, 0xd8, 0x35, 0x13, 0x44, 0x2f,
	0x43, 0x0f, 0x19, 0x31, 0x25, 0x8c, 0xc0, 0x52, 0xec, 0xaa, 0x0f, 0x02, 0x42, 0x82, 0x08, 0x99,
	0x4e, 0x1c, 0x9a, 0x0e, 0xc6, 0x84, 0x39, 0x2c, 0x24, 0x38, 0x11, 0x0c, 0x15, 0xc6, 0xae, 0x39,
	0x23, 0xee, 0x9c, 0x7f, 0x24, 0xf6, 0x30, 0xc7, 0x3c, 0x82, 0x99, 0x13, 0x62, 0x44, 0x97, 0x27,
	0x49, 0xe9, 0xe5, 0x14, 0x8c, 0xd8, 0x07, 0x42, 0x2f, 0xf2, 0xbf, 0x22, 0xac, 0xff, 0x50, 0xc0,
	0xc1, 0x29, 0xf1, 0x2e, 0x10, 0x7d, 0x3d, 0x73, 0x02, 0xf4, 0x2e, 0x8d, 0x22, 0x0b, 0xbd, 0xb7,
	0x50, 0x12, 0xc3, 0x36, 0xd8, 0xa6, 0x68, 0x6a, 0x27, 0x8c, 0x76, 0x94, 0xbe, 0x32, 0xa8, 0x59,
	0x55, 0x8a, 0xa6, 0x13, 0x46, 0xe1, 0x29, 0x80, 0x61, 0x46, 0xb6, 0xe3, 0x34, 0x8a, 0x6c, 0x12,
	0xf3, 0x57, 0x76, 0x4a, 0x7d, 0x65, 0x50, 0x1f, 0x1e, 0x18, 0xfc, 0x79, 0x45, 0xb2, 0xb7, 0x22,
	0x6a, 0xb5, 0xc2, 0x6b, 0x08, 0x3c, 0x04, 0x35, 0x8a, 0x92, 0xd8, 0x76, 0x89, 0x3f, 0xef, 0x6c,
	0xf5, 0x95, 0x41, 0xc3, 0xfa, 0x3f, 0x03, 0x4e, 0x88, 0x3f, 0x87, 0x3d, 0x00, 0x12, 0xe6, 0x30,
	0x64, 0x7b, 0xc4, 0x47, 0x9d, 0x72, 0x5f, 0x19, 0x54, 0xac, 0x1a, 0x47, 0xc6, 0xc4, 0x47, 0xf0,
	0x11, 0x68, 0x8a, 0xf0, 0x0c, 0x25, 0x89, 0x13, 0xa0, 0x4e, 0x85, 0x3f, 0xb0, 0xc1, 0xc1, 0x37,
	0x02, 0xd3, 0x3f, 0x97, 0x80, 0x2a, 0xa4, 0x9d, 0x09, 0xc9, 0x63, 0x8a, 0x1c, 0x86, 0x72, 0x79,
	0x10, 0x94, 0xb1, 0x33, 0x43, 0x52, 0x1b, 0x3f, 0xc3, 0x11, 0xd8, 0x91, 0xf6, 0xd8, 0x1e, 0x27,
	0x4b, 0x55, 0x7b, 0x42, 0xd5, 0x7a, 0x9e, 0x26, 0x5e, 0xfd, 0x17, 0x4e, 0x40, 0x7b, 0xfd, 0xae,
	0x9d, 0xa9, 0x21, 0x38, 0x41, 0x5c, 0x5d, 0x7d, 0x78, 0xb8, 0x29, 0x89, 0xa4, 0x58, 0xfb, 0x78,
	0x13, 0xfc, 0x4f, 0x7c, 0xf8, 0xb8, 0x05, 0xba, 0xc2, 0x87, 0x71, 0x3e, 0x1b, 0x56, 0x8a, 0x73,
	0x1b, 0x9e, 0x82, 0xaa, 0x47, 0xf0, 0x34, 0x0c, 0xb8, 0x11, 0xf5, 0xe1, 0xae, 0xb1, 0x9c, 0xa0,
	0x31, 0x0f, 0x58, 0x92, 0x00, 0x5f, 0x80, 0xfa, 0x39, 0x49, 0x98, 0x2d, 0xf9, 0xc2, 0x9a, 0xfd,
	0x15, 0xfe, 0x2b, 0x92, 0x30, 0x79, 0x07, 0x9c, 0x17, 0x67, 0xf8, 0x12, 0xec, 0x4a, 0x75, 0x21,
	0x0e, 0xf2, 0xdb, 0xc2, 0x93, 0xae, 0x91, 0x8f, 0xe3, 0x59, 0xc1, 0x90, 0x19, 0x5a, 0xf8, 0x1a,
	0x52, 0x74, 0xac, 0xbc, 0xd2, 0x31, 0x07, 0x74, 0x8b, 0xfa, 0x37, 0x7c, 0xaf, 0xf0, 0x1a, 0x4f,
	0xd6, 0x15, 0x89, 0x93, 0xf0, 0x59, 0x7c, 0xfd, 0x6c, 0xe4, 0xac, 0xb6, 0xb7, 0x1e, 0xfb, 0x4b,
	0x0f, 0xaa, 0x77, 0xf6, 0x60, 0xfb, 0x66, 0x0f, 0x86, 0x57, 0x25, 0xd0, 0x9c, 0x84, 0xb3, 0x38,
	0x42, 0x13, 0xb1, 0xf6, 0xd0, 0x06, 0xb5, 0x6c, 0x1b, 0xf8, 0xa2, 0x40, 0xd5, 0x88, 0x5d, 0x63,
	0xf3, 0x1a, 0xaa, 0xb7, 0xc4, 0x74, 0xf5, 0xd3, 0xf7, 0xdf, 0x5f, 0x4a, 0xf7, 0xf5, 0x7b, 0xe6,
	0xe5, 0x33, 0xd3, 0xe7, 0x9c, 0xe3, 0x6c, 0x29, 0x47, 0xca, 0x11, 0x0c, 0x40, 0xc3, 0x4a, 0x71,
	0x21, 0x18, 0xf6, 0x96, 0x79, 0x36, 0xcc, 0x81, 0x7a, 0x7b, 0x58, 0xef, 0xf2, 0x4a, 0x7b, 0xfa,
	0xce, 0x4a, 0x25, 0x9a, 0xe2, 0xac, 0x50, 0x0a, 0x9a, 0xc2, 0x31, 0xd9, 0x42, 0xa8, 0x2d, 0x53,
	0x6d, 0xda, 0x3c, 0xf5, 0x8e, 0xb8, 0xfe, 0x98, 0xd7, 0xd2, 0xf4, 0xee, 0x4a, 0x2d, 0x39, 0x0c,
	0xc7, 0xa2, 0xc5, 0x23, 0xe5, 0xe8, 0xa4, 0xf5, 0x6d, 0xa1, 0x29, 0x57, 0x0b, 0x4d, 0xf9, 0xb9,
	0xd0, 0x94, 0xaf, 0xbf, 0xb4, 0xff, 0xdc, 0x2a, 0xff, 0x49, 0x7b, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x79, 0x0e, 0xbf, 0x62, 0x5e, 0x05, 0x00, 0x00,
}
