// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/moby/moby.proto

/*
Package moby is a generated protocol buffer package.

It is generated from these files:
	pb/moby/moby.proto

It has these top-level messages:
	AuthConfig
	ContainerListOptions
	ContainerLogsOptions
	ContainerRemoveOptions
	ContainerStartOptions
	NetworkListOptions
	ImageBuildOptions
	ImageBuildResponse
	ImageCreateOptions
	ImageImportSource
	ImageImportOptions
	ImageListOptions
	ImageLoadResponse
	ImagePullOptions
	ImagePushOptions
	ImageRemoveOptions
	ImageSearchOptions
	GraphDriverData
	ImageDeleteResponseItem
	ImageSummary
	Port
	RootFS
	ImageInspect
	ImageMetadata
	Container
	HealthcheckResult
	Health
	ContainerState
	ContainerNode
	ContainerJSONBase
	ContainerJSON
	NetworkSettings
	SummaryNetworkSettings
	NetworkSettingsBase
	DefaultNetworkSettings
	MountPoint
	NetworkResource
	EndpointResource
	NetworkCreate
	NetworkCreateRequest
	NetworkCreateResponse
	NetworkConnect
	NetworkDisconnect
	NetworkInspectOptions
	ContainersPruneReport
	ImagesPruneReport
	NetworksPruneReport
	Image
*/
package moby

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import container "github.com/tangfeixiong/go-to-docker/pb/moby/container"
import network "github.com/tangfeixiong/go-to-docker/pb/moby/network"
import units "github.com/tangfeixiong/go-to-docker/pb/moby/units"
import filters "github.com/tangfeixiong/go-to-docker/pb/moby/filters"
import nat "github.com/tangfeixiong/go-to-docker/pb/moby/nat"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// https://github.com/moby/moby/blob/master/api/types/auth.go
//
// AuthConfig contains authorization information for connecting to a Registry
// type AuthConfig struct
type AuthConfig struct {
	// Username string 0x60json:"username,omitempty"0x60
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password string 0x60json:"password,omitempty"0x60
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Auth string  0x60json:"auth,omitempty"0x60
	Auth string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// Email string 0x60json:"email,omitempty"0x60 // Email is an Operational value associated with the username. This field is deprecated and will be removed in a later version of docker.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// ServerAddress string 0x60json:"serveraddress,omitempty"0x60
	ServerAddress string `protobuf:"bytes,5,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// IdentityToken string 0x60json:"identitytoken,omitempty"0x60 // IdentityToken is used to authenticate the user and get an access token for the registry.
	IdentityToken string `protobuf:"bytes,6,opt,name=identity_token,json=identityToken,proto3" json:"identity_token,omitempty"`
	// RegistryToken string 0x60json:"registrytoken,omitempty"0x60 // RegistryToken is a bearer token to be sent to a registry
	RegistryToken string `protobuf:"bytes,7,opt,name=registry_token,json=registryToken,proto3" json:"registry_token,omitempty"`
}

func (m *AuthConfig) Reset()                    { *m = AuthConfig{} }
func (m *AuthConfig) String() string            { return proto.CompactTextString(m) }
func (*AuthConfig) ProtoMessage()               {}
func (*AuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{0} }

func (m *AuthConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthConfig) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *AuthConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthConfig) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *AuthConfig) GetIdentityToken() string {
	if m != nil {
		return m.IdentityToken
	}
	return ""
}

func (m *AuthConfig) GetRegistryToken() string {
	if m != nil {
		return m.RegistryToken
	}
	return ""
}

//
// https://github.com/moby/moby/blob/master/api/types/client.go
//
// ContainerListOptions holds parameters to list containers with.
// type ContainerListOptions struct
type ContainerListOptions struct {
	// Quiet bool
	Quiet bool `protobuf:"varint,1,opt,name=quiet,proto3" json:"quiet,omitempty"`
	// Size bool
	Size_ bool `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// All bool
	All bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
	// Latest bool
	Latest bool `protobuf:"varint,4,opt,name=latest,proto3" json:"latest,omitempty"`
	// Since string
	Since string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	// Before string
	Before string `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	// Limit int
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filters filters.Args
	Filters *filters.Args `protobuf:"bytes,8,opt,name=filters" json:"filters,omitempty"`
}

func (m *ContainerListOptions) Reset()                    { *m = ContainerListOptions{} }
func (m *ContainerListOptions) String() string            { return proto.CompactTextString(m) }
func (*ContainerListOptions) ProtoMessage()               {}
func (*ContainerListOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{1} }

func (m *ContainerListOptions) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *ContainerListOptions) GetSize_() bool {
	if m != nil {
		return m.Size_
	}
	return false
}

func (m *ContainerListOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ContainerListOptions) GetLatest() bool {
	if m != nil {
		return m.Latest
	}
	return false
}

func (m *ContainerListOptions) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *ContainerListOptions) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

func (m *ContainerListOptions) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ContainerListOptions) GetFilters() *filters.Args {
	if m != nil {
		return m.Filters
	}
	return nil
}

// ContainerLogsOptions holds parameters to filter logs with
// type ContainerLogsOptions struct
type ContainerLogsOptions struct {
	// ShowStdout bool
	ShowStdout bool `protobuf:"varint,1,opt,name=show_stdout,json=showStdout,proto3" json:"show_stdout,omitempty"`
	// ShowStderr bool
	ShowStderr bool `protobuf:"varint,2,opt,name=show_stderr,json=showStderr,proto3" json:"show_stderr,omitempty"`
	// Since string
	Since string `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
	// Until string
	Until string `protobuf:"bytes,4,opt,name=until,proto3" json:"until,omitempty"`
	// Timestamps bool
	Timestamps bool `protobuf:"varint,5,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Follow bool
	Follow bool `protobuf:"varint,6,opt,name=follow,proto3" json:"follow,omitempty"`
	// Tail string
	Tail string `protobuf:"bytes,7,opt,name=tail,proto3" json:"tail,omitempty"`
	// Details bool
	Details bool `protobuf:"varint,8,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *ContainerLogsOptions) Reset()                    { *m = ContainerLogsOptions{} }
func (m *ContainerLogsOptions) String() string            { return proto.CompactTextString(m) }
func (*ContainerLogsOptions) ProtoMessage()               {}
func (*ContainerLogsOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{2} }

func (m *ContainerLogsOptions) GetShowStdout() bool {
	if m != nil {
		return m.ShowStdout
	}
	return false
}

func (m *ContainerLogsOptions) GetShowStderr() bool {
	if m != nil {
		return m.ShowStderr
	}
	return false
}

func (m *ContainerLogsOptions) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *ContainerLogsOptions) GetUntil() string {
	if m != nil {
		return m.Until
	}
	return ""
}

func (m *ContainerLogsOptions) GetTimestamps() bool {
	if m != nil {
		return m.Timestamps
	}
	return false
}

func (m *ContainerLogsOptions) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *ContainerLogsOptions) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *ContainerLogsOptions) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

// ContainerRemoveOptions holds parameters to remove containers
// type ContainerRemoveOptions struct
type ContainerRemoveOptions struct {
	// RemoveVolumes bool
	RemoveVolumes bool `protobuf:"varint,1,opt,name=remove_volumes,json=removeVolumes,proto3" json:"remove_volumes,omitempty"`
	// RemoveLinks bool
	RemoveLinks bool `protobuf:"varint,2,opt,name=remove_links,json=removeLinks,proto3" json:"remove_links,omitempty"`
	// Force bool
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *ContainerRemoveOptions) Reset()                    { *m = ContainerRemoveOptions{} }
func (m *ContainerRemoveOptions) String() string            { return proto.CompactTextString(m) }
func (*ContainerRemoveOptions) ProtoMessage()               {}
func (*ContainerRemoveOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{3} }

func (m *ContainerRemoveOptions) GetRemoveVolumes() bool {
	if m != nil {
		return m.RemoveVolumes
	}
	return false
}

func (m *ContainerRemoveOptions) GetRemoveLinks() bool {
	if m != nil {
		return m.RemoveLinks
	}
	return false
}

func (m *ContainerRemoveOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// ContainerStartOptions holds parameters to start containers
// type ContainerStartOptions struct
type ContainerStartOptions struct {
	// CheckpointID string
	CheckpointId string `protobuf:"bytes,1,opt,name=checkpoint_id,json=checkpointId,proto3" json:"checkpoint_id,omitempty"`
	// CheckpointDir string
	CheckpointDir string `protobuf:"bytes,2,opt,name=checkpoint_dir,json=checkpointDir,proto3" json:"checkpoint_dir,omitempty"`
}

func (m *ContainerStartOptions) Reset()                    { *m = ContainerStartOptions{} }
func (m *ContainerStartOptions) String() string            { return proto.CompactTextString(m) }
func (*ContainerStartOptions) ProtoMessage()               {}
func (*ContainerStartOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{4} }

func (m *ContainerStartOptions) GetCheckpointId() string {
	if m != nil {
		return m.CheckpointId
	}
	return ""
}

func (m *ContainerStartOptions) GetCheckpointDir() string {
	if m != nil {
		return m.CheckpointDir
	}
	return ""
}

// NetworkListOptions holds parameters to filter the list of networks with.
// type NetworkListOptions struct
type NetworkListOptions struct {
	// Filters filters.Args
	Filters *filters.Args `protobuf:"bytes,1,opt,name=filters" json:"filters,omitempty"`
}

func (m *NetworkListOptions) Reset()                    { *m = NetworkListOptions{} }
func (m *NetworkListOptions) String() string            { return proto.CompactTextString(m) }
func (*NetworkListOptions) ProtoMessage()               {}
func (*NetworkListOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{5} }

func (m *NetworkListOptions) GetFilters() *filters.Args {
	if m != nil {
		return m.Filters
	}
	return nil
}

// ImageBuildOptions holds the information necessary to build images.
// type ImageBuildOptions struct
type ImageBuildOptions struct {
	// Tags []string
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	// SuppressOutput bool
	SuppressOutput bool `protobuf:"varint,2,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
	// RemoteContext string
	RemoteContext string `protobuf:"bytes,3,opt,name=remote_context,json=remoteContext,proto3" json:"remote_context,omitempty"`
	// NoCache bool
	NoCache bool `protobuf:"varint,4,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
	// Remove bool
	Remove bool `protobuf:"varint,5,opt,name=remove,proto3" json:"remove,omitempty"`
	// ForceRemove bool
	ForceRemove bool `protobuf:"varint,6,opt,name=force_remove,json=forceRemove,proto3" json:"force_remove,omitempty"`
	// PullParent bool
	PullParent bool `protobuf:"varint,7,opt,name=pull_parent,json=pullParent,proto3" json:"pull_parent,omitempty"`
	// Isolation container.Isolation // Isolation represents the isolation technology of a container. The supported value are platform specific. // type Isolation string
	Isolation string `protobuf:"bytes,8,opt,name=isolation,proto3" json:"isolation,omitempty"`
	// CPUSetCPUs string
	CpuSetCpus string `protobuf:"bytes,9,opt,name=cpu_set_cpus,json=cpuSetCpus,proto3" json:"cpu_set_cpus,omitempty"`
	// CPUSetMems string
	CpuSetMems string `protobuf:"bytes,10,opt,name=cpu_set_mems,json=cpuSetMems,proto3" json:"cpu_set_mems,omitempty"`
	// CPUShares int64
	CpuShares int64 `protobuf:"varint,11,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	// CPUQuota int64
	CpuQuota int64 `protobuf:"varint,12,opt,name=cpu_quota,json=cpuQuota,proto3" json:"cpu_quota,omitempty"`
	// CPUPeriod int64
	CpuPeriod int64 `protobuf:"varint,13,opt,name=cpu_period,json=cpuPeriod,proto3" json:"cpu_period,omitempty"`
	// Memory int64
	Memory int64 `protobuf:"varint,14,opt,name=memory,proto3" json:"memory,omitempty"`
	// MemorySwap int64
	MemorySwap int64 `protobuf:"varint,15,opt,name=memory_swap,json=memorySwap,proto3" json:"memory_swap,omitempty"`
	// CgroupParent string
	CgroupParent string `protobuf:"bytes,16,opt,name=cgroup_parent,json=cgroupParent,proto3" json:"cgroup_parent,omitempty"`
	// NetworkMode string
	NetworkMode string `protobuf:"bytes,17,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty"`
	// ShmSize int64
	ShmSize int64 `protobuf:"varint,18,opt,name=shm_size,json=shmSize,proto3" json:"shm_size,omitempty"`
	// Dockerfile string
	Dockerfile string `protobuf:"bytes,19,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	// Ulimits []*units.Ulimit
	Ulimits []*units.Ulimit `protobuf:"bytes,20,rep,name=ulimits" json:"ulimits,omitempty"`
	// BuildArgs map[string]*string // BuildArgs needs to be a *string instead of just a string so that we can tell the difference between "" (empty string) and no value at all (nil). See the parsing of buildArgs in api/server/router/build/build_routers.go for even more info.
	BuildArgs map[string]*ImageBuildOptions_StringStruct `protobuf:"bytes,21,rep,name=build_args,json=buildArgs" json:"build_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// AuthConfigs map[string]AuthConfig
	AuthConfigs map[string]*AuthConfig `protobuf:"bytes,22,rep,name=auth_configs,json=authConfigs" json:"auth_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Context io.Reader
	Context []byte `protobuf:"bytes,23,opt,name=context,proto3" json:"context,omitempty"`
	// Labels map[string]string
	Labels map[string]string `protobuf:"bytes,24,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Squash bool // squash the resulting image's layers to the parent preserve the original image and creates a new one from the parent with all the changes applied to a single layer
	Squash bool `protobuf:"varint,25,opt,name=squash,proto3" json:"squash,omitempty"`
	// CacheFrom []string // CacheFrom specifies images that are used for matching cache. Images specified here do not need to have a valid parent chain to match cache.
	CacheFrom []string `protobuf:"bytes,26,rep,name=cache_from,json=cacheFrom" json:"cache_from,omitempty"`
	// SecurityOpt []string
	SecurityOpt []string `protobuf:"bytes,27,rep,name=security_opt,json=securityOpt" json:"security_opt,omitempty"`
	// ExtraHosts []string // List of extra hosts
	ExtraHosts []string `protobuf:"bytes,28,rep,name=extra_hosts,json=extraHosts" json:"extra_hosts,omitempty"`
	// Target string
	Target string `protobuf:"bytes,29,opt,name=target,proto3" json:"target,omitempty"`
	// SessionID string
	SessionId string `protobuf:"bytes,30,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Platform string
	Platform string `protobuf:"bytes,31,opt,name=platform,proto3" json:"platform,omitempty"`
	// Version BuildVersion // Version specifies the version of the underlying builder to use // type BuilderVersion string // BuilderV1 is the first generation builder in docker daemon. BuilderV1 BuilderVersion = "1" // BuilderBuildKit is builder based on moby/buildkit project. BuilderBuildKit = "2"
	Version string `protobuf:"bytes,32,opt,name=version,proto3" json:"version,omitempty"`
	// BuildID string // BuildID is an Operational identifier that can be passed together with the build request. Tha same identifier can be used to gracefully cancel the build with the cancel request.
	BuildId string `protobuf:"bytes,33,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *ImageBuildOptions) Reset()                    { *m = ImageBuildOptions{} }
func (m *ImageBuildOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageBuildOptions) ProtoMessage()               {}
func (*ImageBuildOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{6} }

func (m *ImageBuildOptions) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ImageBuildOptions) GetSuppressOutput() bool {
	if m != nil {
		return m.SuppressOutput
	}
	return false
}

func (m *ImageBuildOptions) GetRemoteContext() string {
	if m != nil {
		return m.RemoteContext
	}
	return ""
}

func (m *ImageBuildOptions) GetNoCache() bool {
	if m != nil {
		return m.NoCache
	}
	return false
}

func (m *ImageBuildOptions) GetRemove() bool {
	if m != nil {
		return m.Remove
	}
	return false
}

func (m *ImageBuildOptions) GetForceRemove() bool {
	if m != nil {
		return m.ForceRemove
	}
	return false
}

func (m *ImageBuildOptions) GetPullParent() bool {
	if m != nil {
		return m.PullParent
	}
	return false
}

func (m *ImageBuildOptions) GetIsolation() string {
	if m != nil {
		return m.Isolation
	}
	return ""
}

func (m *ImageBuildOptions) GetCpuSetCpus() string {
	if m != nil {
		return m.CpuSetCpus
	}
	return ""
}

func (m *ImageBuildOptions) GetCpuSetMems() string {
	if m != nil {
		return m.CpuSetMems
	}
	return ""
}

func (m *ImageBuildOptions) GetCpuShares() int64 {
	if m != nil {
		return m.CpuShares
	}
	return 0
}

func (m *ImageBuildOptions) GetCpuQuota() int64 {
	if m != nil {
		return m.CpuQuota
	}
	return 0
}

func (m *ImageBuildOptions) GetCpuPeriod() int64 {
	if m != nil {
		return m.CpuPeriod
	}
	return 0
}

func (m *ImageBuildOptions) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ImageBuildOptions) GetMemorySwap() int64 {
	if m != nil {
		return m.MemorySwap
	}
	return 0
}

func (m *ImageBuildOptions) GetCgroupParent() string {
	if m != nil {
		return m.CgroupParent
	}
	return ""
}

func (m *ImageBuildOptions) GetNetworkMode() string {
	if m != nil {
		return m.NetworkMode
	}
	return ""
}

func (m *ImageBuildOptions) GetShmSize() int64 {
	if m != nil {
		return m.ShmSize
	}
	return 0
}

func (m *ImageBuildOptions) GetDockerfile() string {
	if m != nil {
		return m.Dockerfile
	}
	return ""
}

func (m *ImageBuildOptions) GetUlimits() []*units.Ulimit {
	if m != nil {
		return m.Ulimits
	}
	return nil
}

func (m *ImageBuildOptions) GetBuildArgs() map[string]*ImageBuildOptions_StringStruct {
	if m != nil {
		return m.BuildArgs
	}
	return nil
}

func (m *ImageBuildOptions) GetAuthConfigs() map[string]*AuthConfig {
	if m != nil {
		return m.AuthConfigs
	}
	return nil
}

func (m *ImageBuildOptions) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ImageBuildOptions) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ImageBuildOptions) GetSquash() bool {
	if m != nil {
		return m.Squash
	}
	return false
}

func (m *ImageBuildOptions) GetCacheFrom() []string {
	if m != nil {
		return m.CacheFrom
	}
	return nil
}

func (m *ImageBuildOptions) GetSecurityOpt() []string {
	if m != nil {
		return m.SecurityOpt
	}
	return nil
}

func (m *ImageBuildOptions) GetExtraHosts() []string {
	if m != nil {
		return m.ExtraHosts
	}
	return nil
}

func (m *ImageBuildOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ImageBuildOptions) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ImageBuildOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ImageBuildOptions) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ImageBuildOptions) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type ImageBuildOptions_StringStruct struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ImageBuildOptions_StringStruct) Reset()         { *m = ImageBuildOptions_StringStruct{} }
func (m *ImageBuildOptions_StringStruct) String() string { return proto.CompactTextString(m) }
func (*ImageBuildOptions_StringStruct) ProtoMessage()    {}
func (*ImageBuildOptions_StringStruct) Descriptor() ([]byte, []int) {
	return fileDescriptorMoby, []int{6, 3}
}

func (m *ImageBuildOptions_StringStruct) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// ImageBuildResponse holds information returned by a server after building an image
// type ImageBuildResponse struct
type ImageBuildResponse struct {
	// Body io.ReadCloser
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// OSType string
	OsType string `protobuf:"bytes,2,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
}

func (m *ImageBuildResponse) Reset()                    { *m = ImageBuildResponse{} }
func (m *ImageBuildResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageBuildResponse) ProtoMessage()               {}
func (*ImageBuildResponse) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{7} }

func (m *ImageBuildResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ImageBuildResponse) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

// ImageCreateOptions holds information to create images.
// type ImageCreateOptions struct
type ImageCreateOptions struct {
	// RegistryAuth string // RegistryAuth is the base64 encoded credentials for the registry.
	RegistryAuth string `protobuf:"bytes,1,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	// Platform string // Platform is the target platform of the image if it needs to be pulled from the registry.
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *ImageCreateOptions) Reset()                    { *m = ImageCreateOptions{} }
func (m *ImageCreateOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageCreateOptions) ProtoMessage()               {}
func (*ImageCreateOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{8} }

func (m *ImageCreateOptions) GetRegistryAuth() string {
	if m != nil {
		return m.RegistryAuth
	}
	return ""
}

func (m *ImageCreateOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// ImageImportSource holds source information for ImageImport
// type ImageImportSource struct
type ImageImportSource struct {
	// Source io.Reader // Source is the data to send to the server to create this image from. You must set SourceName to "-" to leverage this.
	Source []byte `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// SourceName string // SourceName is the name of the image to pull. Set to "-" to leverage the Source attribute
	SourceName string `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
}

func (m *ImageImportSource) Reset()                    { *m = ImageImportSource{} }
func (m *ImageImportSource) String() string            { return proto.CompactTextString(m) }
func (*ImageImportSource) ProtoMessage()               {}
func (*ImageImportSource) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{9} }

func (m *ImageImportSource) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImageImportSource) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

// ImageImportOptions holds information to import images from the client host.
// type ImageImportOptions struct
type ImageImportOptions struct {
	// Tag string // Tag is the name to tag this image with. This attribute is deprecated.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Message string // Message is the message to tag the image with
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Changes []string // Changes are the raw changes to apply to this image
	Changes []string `protobuf:"bytes,3,rep,name=changes" json:"changes,omitempty"`
	// Platform string // Platform is the target platform of the image
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *ImageImportOptions) Reset()                    { *m = ImageImportOptions{} }
func (m *ImageImportOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageImportOptions) ProtoMessage()               {}
func (*ImageImportOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{10} }

func (m *ImageImportOptions) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ImageImportOptions) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImageImportOptions) GetChanges() []string {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *ImageImportOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// ImageListOptions holds parameters to filter the list of images with.
// type ImageListOptions struct
type ImageListOptions struct {
	// All bool
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	// Filters filters.Args
	Filters *filters.Args `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
}

func (m *ImageListOptions) Reset()                    { *m = ImageListOptions{} }
func (m *ImageListOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageListOptions) ProtoMessage()               {}
func (*ImageListOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{11} }

func (m *ImageListOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ImageListOptions) GetFilters() *filters.Args {
	if m != nil {
		return m.Filters
	}
	return nil
}

// ImageLoadResponse returns information to the client about a load process
// type ImageLoadResponse struct
type ImageLoadResponse struct {
	// Body must be closed to avoid a response leak
	// Body io.ReadCloser
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// JSON bool
	Json bool `protobuf:"varint,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *ImageLoadResponse) Reset()                    { *m = ImageLoadResponse{} }
func (m *ImageLoadResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageLoadResponse) ProtoMessage()               {}
func (*ImageLoadResponse) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{12} }

func (m *ImageLoadResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ImageLoadResponse) GetJson() bool {
	if m != nil {
		return m.Json
	}
	return false
}

// ImagePullOptions holds information to pull images.
// type ImagePullOptions struct
type ImagePullOptions struct {
	// All bool
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	// RegistryAuth string // RegistryAuth is the base64 encoded credentials for the registry
	RegistryAuth string `protobuf:"bytes,2,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	// PrivilegeFunc RequestPrivilegeFunc
	PrivilegeFunc string `protobuf:"bytes,3,opt,name=privilege_func,json=privilegeFunc,proto3" json:"privilege_func,omitempty"`
	// Platform string
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *ImagePullOptions) Reset()                    { *m = ImagePullOptions{} }
func (m *ImagePullOptions) String() string            { return proto.CompactTextString(m) }
func (*ImagePullOptions) ProtoMessage()               {}
func (*ImagePullOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{13} }

func (m *ImagePullOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ImagePullOptions) GetRegistryAuth() string {
	if m != nil {
		return m.RegistryAuth
	}
	return ""
}

func (m *ImagePullOptions) GetPrivilegeFunc() string {
	if m != nil {
		return m.PrivilegeFunc
	}
	return ""
}

func (m *ImagePullOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// ImagePushOptions holds information to push images.
// type ImagePushOptions ImagePullOptions
type ImagePushOptions struct {
	// All bool
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	// RegistryAuth string // RegistryAuth is the base64 encoded credentials for the registry
	RegistryAuth string `protobuf:"bytes,2,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	// PrivilegeFunc RequestPrivilegeFunc
	PrivilegeFunc string `protobuf:"bytes,3,opt,name=privilege_func,json=privilegeFunc,proto3" json:"privilege_func,omitempty"`
	// Platform string
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *ImagePushOptions) Reset()                    { *m = ImagePushOptions{} }
func (m *ImagePushOptions) String() string            { return proto.CompactTextString(m) }
func (*ImagePushOptions) ProtoMessage()               {}
func (*ImagePushOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{14} }

func (m *ImagePushOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ImagePushOptions) GetRegistryAuth() string {
	if m != nil {
		return m.RegistryAuth
	}
	return ""
}

func (m *ImagePushOptions) GetPrivilegeFunc() string {
	if m != nil {
		return m.PrivilegeFunc
	}
	return ""
}

func (m *ImagePushOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// ImageRemoveOptions holds parameters to remove images.
// type ImageRemoveOptions struct
type ImageRemoveOptions struct {
	// Force bool
	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	// PruneChildren bool
	PruneChildren bool `protobuf:"varint,2,opt,name=prune_children,json=pruneChildren,proto3" json:"prune_children,omitempty"`
}

func (m *ImageRemoveOptions) Reset()                    { *m = ImageRemoveOptions{} }
func (m *ImageRemoveOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageRemoveOptions) ProtoMessage()               {}
func (*ImageRemoveOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{15} }

func (m *ImageRemoveOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ImageRemoveOptions) GetPruneChildren() bool {
	if m != nil {
		return m.PruneChildren
	}
	return false
}

// ImageSearchOptions holds parameters to search images with.
// type ImageSearchOptions struct
type ImageSearchOptions struct {
	// RegistryAuth string
	RegistryAuth string `protobuf:"bytes,1,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	// PrivilegeFunc RequestPrivilegeFunc
	PrivilegeFunc string `protobuf:"bytes,2,opt,name=privilege_func,json=privilegeFunc,proto3" json:"privilege_func,omitempty"`
	// Filters filters.Args
	Filters *filters.Args `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
	// Limit int
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ImageSearchOptions) Reset()                    { *m = ImageSearchOptions{} }
func (m *ImageSearchOptions) String() string            { return proto.CompactTextString(m) }
func (*ImageSearchOptions) ProtoMessage()               {}
func (*ImageSearchOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{16} }

func (m *ImageSearchOptions) GetRegistryAuth() string {
	if m != nil {
		return m.RegistryAuth
	}
	return ""
}

func (m *ImageSearchOptions) GetPrivilegeFunc() string {
	if m != nil {
		return m.PrivilegeFunc
	}
	return ""
}

func (m *ImageSearchOptions) GetFilters() *filters.Args {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ImageSearchOptions) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

//
// https://github.com/moby/moby/blob/master/api/types/graph_driver_data.go
//
// GraphDriverData Information about a container's graph driver.
// swagger:model GraphDriverData
// type GraphDriverData struct
type GraphDriverData struct {
	// data
	// Required: true
	// Data map[string]string `json:"Data"`
	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// name
	// Required: true
	// Name string `json:"Name"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GraphDriverData) Reset()                    { *m = GraphDriverData{} }
func (m *GraphDriverData) String() string            { return proto.CompactTextString(m) }
func (*GraphDriverData) ProtoMessage()               {}
func (*GraphDriverData) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{17} }

func (m *GraphDriverData) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GraphDriverData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//
// https://github.com/moby/moby/blob/master/api/types/image_delete_response_item.go
//
// ImageDeleteResponseItem image delete response item
// swagger:model ImageDeleteResponseItem
// type ImageDeleteResponseItem struct
type ImageDeleteResponseItem struct {
	// The image ID of an image that was deleted
	// Deleted string `json:"Deleted,omitempty"`
	Deleted string `protobuf:"bytes,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// The image ID of an image that was untagged
	// Untagged string `json:"Untagged,omitempty"`
	Untagged string `protobuf:"bytes,2,opt,name=untagged,proto3" json:"untagged,omitempty"`
}

func (m *ImageDeleteResponseItem) Reset()                    { *m = ImageDeleteResponseItem{} }
func (m *ImageDeleteResponseItem) String() string            { return proto.CompactTextString(m) }
func (*ImageDeleteResponseItem) ProtoMessage()               {}
func (*ImageDeleteResponseItem) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{18} }

func (m *ImageDeleteResponseItem) GetDeleted() string {
	if m != nil {
		return m.Deleted
	}
	return ""
}

func (m *ImageDeleteResponseItem) GetUntagged() string {
	if m != nil {
		return m.Untagged
	}
	return ""
}

//
// https://github.com/moby/moby/blob/master/api/types/image_summary.go
//
// ImageSummary image summary
// swagger:model ImageSummary
// type ImageSummary struct
type ImageSummary struct {
	// containers int64 `json:"Containers"`
	// Required: true
	Containers int64 `protobuf:"varint,1,opt,name=containers,proto3" json:"containers,omitempty"`
	// created int64 `json:"Created"`
	// Required: true
	Created int64 `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	// Id string `json:"Id"`
	// Required: true
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// labels map[string]string `json:"Labels"`
	// Required: true
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// parent Id
	// Required: true
	// ParentID string `json:"ParentId"`
	ParentId string `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// repo digests
	// Required: true
	// RepoDigests []string `json:"RepoDigests"`
	RepoDigests []string `protobuf:"bytes,6,rep,name=repo_digests,json=repoDigests" json:"repo_digests,omitempty"`
	// repo tags
	// Required: true
	// RepoTags []string `json:"RepoTags"`
	RepoTags []string `protobuf:"bytes,7,rep,name=repo_tags,json=repoTags" json:"repo_tags,omitempty"`
	// shared size
	// Required: true
	// SharedSize int64 `json:"SharedSize"`
	SharedSize int64 `protobuf:"varint,8,opt,name=shared_size,json=sharedSize,proto3" json:"shared_size,omitempty"`
	// size int64 `json:"Size"`
	// Required: true
	Size_ int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// virtual size
	// Required: true
	// VirtualSize int64 `json:"VirtualSize"`
	VirtualSize int64 `protobuf:"varint,10,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
}

func (m *ImageSummary) Reset()                    { *m = ImageSummary{} }
func (m *ImageSummary) String() string            { return proto.CompactTextString(m) }
func (*ImageSummary) ProtoMessage()               {}
func (*ImageSummary) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{19} }

func (m *ImageSummary) GetContainers() int64 {
	if m != nil {
		return m.Containers
	}
	return 0
}

func (m *ImageSummary) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ImageSummary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageSummary) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ImageSummary) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *ImageSummary) GetRepoDigests() []string {
	if m != nil {
		return m.RepoDigests
	}
	return nil
}

func (m *ImageSummary) GetRepoTags() []string {
	if m != nil {
		return m.RepoTags
	}
	return nil
}

func (m *ImageSummary) GetSharedSize() int64 {
	if m != nil {
		return m.SharedSize
	}
	return 0
}

func (m *ImageSummary) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ImageSummary) GetVirtualSize() int64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

//
// https://github.com/moby/moby/blob/master/api/types/port.go
//
// Port stores open ports info of container
// e.g. {"PrivatePort": 8080, "PublicPort": 80, "Type": "tcp"}
// type Port struct
type Port struct {
	// Host IP address that the container's port is mapped to
	// IP string `json:"IP,omitempty"`
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port on the container
	// Required: true
	// PrivatePort uint16 `json:"PrivatePort"`
	PrivatePort int32 `protobuf:"varint,2,opt,name=private_port,json=privatePort,proto3" json:"private_port,omitempty"`
	// Port exposed on the host
	// PublicPort uint16 `json:"PublicPort,omitempty"`
	PublicPort int32 `protobuf:"varint,3,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	// type
	// Required: true
	// Type string `json:"Type"`
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{20} }

func (m *Port) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Port) GetPrivatePort() int32 {
	if m != nil {
		return m.PrivatePort
	}
	return 0
}

func (m *Port) GetPublicPort() int32 {
	if m != nil {
		return m.PublicPort
	}
	return 0
}

func (m *Port) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

//
// https://github.com/moby/moby/blob/master/api/types/types.go
//
// RootFS returns Image's RootFS description including the layer IDs.
// type RootFS struct
type RootFS struct {
	// Type string
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Layers []string `json:",omitempty"`
	Layers []string `protobuf:"bytes,2,rep,name=layers" json:"layers,omitempty"`
	// BaseLayer string `json:",omitempty"`
	BaseLayer string `protobuf:"bytes,3,opt,name=base_layer,json=baseLayer,proto3" json:"base_layer,omitempty"`
}

func (m *RootFS) Reset()                    { *m = RootFS{} }
func (m *RootFS) String() string            { return proto.CompactTextString(m) }
func (*RootFS) ProtoMessage()               {}
func (*RootFS) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{21} }

func (m *RootFS) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RootFS) GetLayers() []string {
	if m != nil {
		return m.Layers
	}
	return nil
}

func (m *RootFS) GetBaseLayer() string {
	if m != nil {
		return m.BaseLayer
	}
	return ""
}

// ImageInspect contains response of Engine API:
// GET "/images/{name:.*}/json"
// type ImageInspect struct
type ImageInspect struct {
	// ID string `json:"Id"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// RepoTags []string
	RepoTags []string `protobuf:"bytes,2,rep,name=repo_tags,json=repoTags" json:"repo_tags,omitempty"`
	// RepoDigests []string
	RepoDigests []string `protobuf:"bytes,3,rep,name=repo_digests,json=repoDigests" json:"repo_digests,omitempty"`
	// Parent string
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// Comment string
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// Created string
	Created string `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// Container string
	Container string `protobuf:"bytes,7,opt,name=container,proto3" json:"container,omitempty"`
	// ContainerConfig *container.Config
	ContainerConfig *container.Config `protobuf:"bytes,8,opt,name=container_config,json=containerConfig" json:"container_config,omitempty"`
	// DockerVersion string
	DockerVersion string `protobuf:"bytes,9,opt,name=docker_version,json=dockerVersion,proto3" json:"docker_version,omitempty"`
	// Author string
	Author string `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	// Config *container.Config
	Config *container.Config `protobuf:"bytes,11,opt,name=config" json:"config,omitempty"`
	// Architecture string
	Architecture string `protobuf:"bytes,12,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// Os string
	Os string `protobuf:"bytes,13,opt,name=os,proto3" json:"os,omitempty"`
	// OsVersion string `json:",omitempty"`
	OsVersion string `protobuf:"bytes,14,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Size int64
	Size_ int64 `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	// VirtualSize int64
	VirtualSize int64 `protobuf:"varint,16,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	// GraphDriver GraphDriverData
	GraphDriver *GraphDriverData `protobuf:"bytes,17,opt,name=graph_driver,json=graphDriver" json:"graph_driver,omitempty"`
	// RootFS RootFS
	RootFs *RootFS `protobuf:"bytes,18,opt,name=root_fs,json=rootFs" json:"root_fs,omitempty"`
	// Metadata ImageMetadata
	Metadata *ImageMetadata `protobuf:"bytes,19,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ImageInspect) Reset()                    { *m = ImageInspect{} }
func (m *ImageInspect) String() string            { return proto.CompactTextString(m) }
func (*ImageInspect) ProtoMessage()               {}
func (*ImageInspect) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{22} }

func (m *ImageInspect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageInspect) GetRepoTags() []string {
	if m != nil {
		return m.RepoTags
	}
	return nil
}

func (m *ImageInspect) GetRepoDigests() []string {
	if m != nil {
		return m.RepoDigests
	}
	return nil
}

func (m *ImageInspect) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ImageInspect) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ImageInspect) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ImageInspect) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ImageInspect) GetContainerConfig() *container.Config {
	if m != nil {
		return m.ContainerConfig
	}
	return nil
}

func (m *ImageInspect) GetDockerVersion() string {
	if m != nil {
		return m.DockerVersion
	}
	return ""
}

func (m *ImageInspect) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ImageInspect) GetConfig() *container.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ImageInspect) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *ImageInspect) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *ImageInspect) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *ImageInspect) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ImageInspect) GetVirtualSize() int64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

func (m *ImageInspect) GetGraphDriver() *GraphDriverData {
	if m != nil {
		return m.GraphDriver
	}
	return nil
}

func (m *ImageInspect) GetRootFs() *RootFS {
	if m != nil {
		return m.RootFs
	}
	return nil
}

func (m *ImageInspect) GetMetadata() *ImageMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// ImageMetadata contains engine-local data about the image
// type ImageMetadata struct
type ImageMetadata struct {
	// LastTagTime time.Time `json:",omitempty"`
	LastTagTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=last_tag_time,json=lastTagTime" json:"last_tag_time,omitempty"`
}

func (m *ImageMetadata) Reset()                    { *m = ImageMetadata{} }
func (m *ImageMetadata) String() string            { return proto.CompactTextString(m) }
func (*ImageMetadata) ProtoMessage()               {}
func (*ImageMetadata) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{23} }

func (m *ImageMetadata) GetLastTagTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastTagTime
	}
	return nil
}

// Container contains response of Remote API:
// GET  "/containers/json"
// type Container struct
type Container struct {
	// ID string `json:"Id"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Names []string
	Names []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	// Image string
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// ImageID string
	ImageId string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// Command string
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	// Created int64
	Created int64 `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	// Ports []Port
	Ports []*Port `protobuf:"bytes,7,rep,name=Ports" json:"Ports,omitempty"`
	// SizeRw int64 `json:",omitempty"`
	SizeRw int64 `protobuf:"varint,8,opt,name=size_rw,json=sizeRw,proto3" json:"size_rw,omitempty"`
	// SizeRootFs int64 `json:",omitempty"`
	SizeRootFs int64 `protobuf:"varint,9,opt,name=size_root_fs,json=sizeRootFs,proto3" json:"size_root_fs,omitempty"`
	// Labels map[string]string
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// State string
	State string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// Status string
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// HostConfig struct
	HostConfig *Container_HostConfig `protobuf:"bytes,13,opt,name=host_config,json=hostConfig" json:"host_config,omitempty"`
	// NetworkSettings *SummaryNetworkSettings
	NetworkSettings *SummaryNetworkSettings `protobuf:"bytes,14,opt,name=network_settings,json=networkSettings" json:"network_settings,omitempty"`
	// Mounts []MountPoint
	Mounts []*MountPoint `protobuf:"bytes,15,rep,name=mounts" json:"mounts,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{24} }

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Container) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Container) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Container) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Container) GetSizeRw() int64 {
	if m != nil {
		return m.SizeRw
	}
	return 0
}

func (m *Container) GetSizeRootFs() int64 {
	if m != nil {
		return m.SizeRootFs
	}
	return 0
}

func (m *Container) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Container) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Container) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Container) GetHostConfig() *Container_HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *Container) GetNetworkSettings() *SummaryNetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *Container) GetMounts() []*MountPoint {
	if m != nil {
		return m.Mounts
	}
	return nil
}

type Container_HostConfig struct {
	// NetworkMode string `json:",omitempty"
	NetworkMode string `protobuf:"bytes,1,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty"`
}

func (m *Container_HostConfig) Reset()                    { *m = Container_HostConfig{} }
func (m *Container_HostConfig) String() string            { return proto.CompactTextString(m) }
func (*Container_HostConfig) ProtoMessage()               {}
func (*Container_HostConfig) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{24, 0} }

func (m *Container_HostConfig) GetNetworkMode() string {
	if m != nil {
		return m.NetworkMode
	}
	return ""
}

// HealthcheckResult stores information about a single run of a healthcheck probe
// type HealthcheckResult struct
type HealthcheckResult struct {
	// Start time.Time // Start is the time this check started
	Start *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// End time.Time // End is the time this check ended
	End *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	// ExitCode int // ExitCode meanings: 0=healthy, 1=unhealthy, 2=reserved (considered unhealthy), else=error running probe
	ExitCode int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Output string // Output from last check
	Output string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *HealthcheckResult) Reset()                    { *m = HealthcheckResult{} }
func (m *HealthcheckResult) String() string            { return proto.CompactTextString(m) }
func (*HealthcheckResult) ProtoMessage()               {}
func (*HealthcheckResult) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{25} }

func (m *HealthcheckResult) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *HealthcheckResult) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *HealthcheckResult) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *HealthcheckResult) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// Health stores information about the Container's healthcheck results
// type Health struct
type Health struct {
	// Status string // Status is one of Starting, Healthy or Unhealthy
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// FailingStreak int // FailingStreak is the number of consecutive failures
	FailingStreak int32 `protobuf:"varint,2,opt,name=failing_streak,json=failingStreak,proto3" json:"failing_streak,omitempty"`
	// Log []*HealthcheckResult // Log contains the last few results (oldest first)
	Log []*HealthcheckResult `protobuf:"bytes,3,rep,name=log" json:"log,omitempty"`
}

func (m *Health) Reset()                    { *m = Health{} }
func (m *Health) String() string            { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()               {}
func (*Health) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{26} }

func (m *Health) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Health) GetFailingStreak() int32 {
	if m != nil {
		return m.FailingStreak
	}
	return 0
}

func (m *Health) GetLog() []*HealthcheckResult {
	if m != nil {
		return m.Log
	}
	return nil
}

// ContainerState stores container's running state
// it's part of ContainerJSONBase and will return by "inspect" command
// type ContainerState struct
type ContainerState struct {
	// Status string // string representation of the container state. Can be one of "created", "running", "paused", "restarting", "removing", "exited", of "dead"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Running bool
	Running bool `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	// Paused bool
	Paused bool `protobuf:"varint,3,opt,name=paused,proto3" json:"paused,omitempty"`
	// Restarting bool
	Restarting bool `protobuf:"varint,4,opt,name=restarting,proto3" json:"restarting,omitempty"`
	// OOMKilled bool
	OomKilled bool `protobuf:"varint,5,opt,name=oom_killed,json=oomKilled,proto3" json:"oom_killed,omitempty"`
	// Dead bool
	Dead bool `protobuf:"varint,6,opt,name=dead,proto3" json:"dead,omitempty"`
	// Pid int
	Pid int32 `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`
	// ExitCode int
	ExitCode int32 `protobuf:"varint,8,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Error string
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	// StartedAt string
	StartedAt string `protobuf:"bytes,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// FinishedAt string
	FinishedAt string `protobuf:"bytes,11,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Health *Health `json:",omitempty"`
	Health *Health `protobuf:"bytes,12,opt,name=health" json:"health,omitempty"`
}

func (m *ContainerState) Reset()                    { *m = ContainerState{} }
func (m *ContainerState) String() string            { return proto.CompactTextString(m) }
func (*ContainerState) ProtoMessage()               {}
func (*ContainerState) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{27} }

func (m *ContainerState) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ContainerState) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *ContainerState) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *ContainerState) GetRestarting() bool {
	if m != nil {
		return m.Restarting
	}
	return false
}

func (m *ContainerState) GetOomKilled() bool {
	if m != nil {
		return m.OomKilled
	}
	return false
}

func (m *ContainerState) GetDead() bool {
	if m != nil {
		return m.Dead
	}
	return false
}

func (m *ContainerState) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ContainerState) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ContainerState) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ContainerState) GetStartedAt() string {
	if m != nil {
		return m.StartedAt
	}
	return ""
}

func (m *ContainerState) GetFinishedAt() string {
	if m != nil {
		return m.FinishedAt
	}
	return ""
}

func (m *ContainerState) GetHealth() *Health {
	if m != nil {
		return m.Health
	}
	return nil
}

// ContainerNode stores information about the node that a container is running on. It's only available in Docker Swarm
// type ContainerNode struct
type ContainerNode struct {
	// ID string
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IPAddress string
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Addr string
	Addr string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// Name string
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Cpus int
	Cpus int32 `protobuf:"varint,5,opt,name=cpus,proto3" json:"cpus,omitempty"`
	// Memory int64
	Memory int64 `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	// Labels map[string]string
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ContainerNode) Reset()                    { *m = ContainerNode{} }
func (m *ContainerNode) String() string            { return proto.CompactTextString(m) }
func (*ContainerNode) ProtoMessage()               {}
func (*ContainerNode) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{28} }

func (m *ContainerNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerNode) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ContainerNode) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ContainerNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerNode) GetCpus() int32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *ContainerNode) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ContainerNode) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// ContainerJSONBase contains response of Remote API:
// GET "/containers/{name:.*}/json"
// type ContainerJSONBase struct
type ContainerJSONBase struct {
	// ID string `json:"Id"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Created string
	Created string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// Path string
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Args []string
	Args []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	// State *ContainerState
	State *ContainerState `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// Image string
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// ResolvConfPath string
	ResolvConfPath string `protobuf:"bytes,7,opt,name=resolv_conf_path,json=resolvConfPath,proto3" json:"resolv_conf_path,omitempty"`
	// HostnamePath string
	HostnamePath string `protobuf:"bytes,8,opt,name=hostname_path,json=hostnamePath,proto3" json:"hostname_path,omitempty"`
	// HostsPath string
	HostsPath string `protobuf:"bytes,9,opt,name=hosts_path,json=hostsPath,proto3" json:"hosts_path,omitempty"`
	// LogPath string
	LogPath string `protobuf:"bytes,10,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	// Node *ContainerNode `json:",omitempty"`
	Node *ContainerNode `protobuf:"bytes,11,opt,name=node" json:"node,omitempty"`
	// Name string
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// RestartCount int
	RestartCount int32 `protobuf:"varint,13,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	// Driver string
	Driver string `protobuf:"bytes,14,opt,name=driver,proto3" json:"driver,omitempty"`
	// Platform string
	Platform string `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform,omitempty"`
	// MountLabel string
	MountLabel string `protobuf:"bytes,16,opt,name=mount_label,json=mountLabel,proto3" json:"mount_label,omitempty"`
	// ProcessLabel string
	ProcessLabel string `protobuf:"bytes,17,opt,name=process_label,json=processLabel,proto3" json:"process_label,omitempty"`
	// AppArmorProfile string
	AppArmorProfile string `protobuf:"bytes,18,opt,name=app_armor_profile,json=appArmorProfile,proto3" json:"app_armor_profile,omitempty"`
	// ExecIDs []string
	ExecIds []string `protobuf:"bytes,19,rep,name=exec_ids,json=execIds" json:"exec_ids,omitempty"`
	// HostConfig *container.HostConfig
	HostConfig *container.HostConfig `protobuf:"bytes,20,opt,name=host_config,json=hostConfig" json:"host_config,omitempty"`
	// GraphDriver GraphDriverData
	GraphDriver *GraphDriverData `protobuf:"bytes,21,opt,name=graph_driver,json=graphDriver" json:"graph_driver,omitempty"`
	// SizeRw *int64 `json:",omitempty"`
	SizeRw *ContainerJSONBase_Int64Struct `protobuf:"bytes,22,opt,name=size_rw,json=sizeRw" json:"size_rw,omitempty"`
	// SizeRootFs *int64 `json:",omitempty"`
	SizeRootFs *ContainerJSONBase_Int64Struct `protobuf:"bytes,23,opt,name=size_root_fs,json=sizeRootFs" json:"size_root_fs,omitempty"`
}

func (m *ContainerJSONBase) Reset()                    { *m = ContainerJSONBase{} }
func (m *ContainerJSONBase) String() string            { return proto.CompactTextString(m) }
func (*ContainerJSONBase) ProtoMessage()               {}
func (*ContainerJSONBase) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{29} }

func (m *ContainerJSONBase) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerJSONBase) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ContainerJSONBase) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ContainerJSONBase) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ContainerJSONBase) GetState() *ContainerState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ContainerJSONBase) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ContainerJSONBase) GetResolvConfPath() string {
	if m != nil {
		return m.ResolvConfPath
	}
	return ""
}

func (m *ContainerJSONBase) GetHostnamePath() string {
	if m != nil {
		return m.HostnamePath
	}
	return ""
}

func (m *ContainerJSONBase) GetHostsPath() string {
	if m != nil {
		return m.HostsPath
	}
	return ""
}

func (m *ContainerJSONBase) GetLogPath() string {
	if m != nil {
		return m.LogPath
	}
	return ""
}

func (m *ContainerJSONBase) GetNode() *ContainerNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ContainerJSONBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerJSONBase) GetRestartCount() int32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *ContainerJSONBase) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *ContainerJSONBase) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ContainerJSONBase) GetMountLabel() string {
	if m != nil {
		return m.MountLabel
	}
	return ""
}

func (m *ContainerJSONBase) GetProcessLabel() string {
	if m != nil {
		return m.ProcessLabel
	}
	return ""
}

func (m *ContainerJSONBase) GetAppArmorProfile() string {
	if m != nil {
		return m.AppArmorProfile
	}
	return ""
}

func (m *ContainerJSONBase) GetExecIds() []string {
	if m != nil {
		return m.ExecIds
	}
	return nil
}

func (m *ContainerJSONBase) GetHostConfig() *container.HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *ContainerJSONBase) GetGraphDriver() *GraphDriverData {
	if m != nil {
		return m.GraphDriver
	}
	return nil
}

func (m *ContainerJSONBase) GetSizeRw() *ContainerJSONBase_Int64Struct {
	if m != nil {
		return m.SizeRw
	}
	return nil
}

func (m *ContainerJSONBase) GetSizeRootFs() *ContainerJSONBase_Int64Struct {
	if m != nil {
		return m.SizeRootFs
	}
	return nil
}

type ContainerJSONBase_Int64Struct struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ContainerJSONBase_Int64Struct) Reset()         { *m = ContainerJSONBase_Int64Struct{} }
func (m *ContainerJSONBase_Int64Struct) String() string { return proto.CompactTextString(m) }
func (*ContainerJSONBase_Int64Struct) ProtoMessage()    {}
func (*ContainerJSONBase_Int64Struct) Descriptor() ([]byte, []int) {
	return fileDescriptorMoby, []int{29, 0}
}

func (m *ContainerJSONBase_Int64Struct) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// ContainerJSON is newly used struct along with MountPoint
// type ContainerJSON struct
type ContainerJSON struct {
	// ContainerJSONBase
	ContainerJsonBase *ContainerJSONBase `protobuf:"bytes,1,opt,name=container_json_base,json=containerJsonBase" json:"container_json_base,omitempty"`
	// Mounts []MountPoint
	Mounts []*MountPoint `protobuf:"bytes,2,rep,name=mounts" json:"mounts,omitempty"`
	// Config *container.Config
	Config *container.Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	// NetworkSettings *NetworkSettings
	NetworkSettings *NetworkSettings `protobuf:"bytes,4,opt,name=network_settings,json=networkSettings" json:"network_settings,omitempty"`
}

func (m *ContainerJSON) Reset()                    { *m = ContainerJSON{} }
func (m *ContainerJSON) String() string            { return proto.CompactTextString(m) }
func (*ContainerJSON) ProtoMessage()               {}
func (*ContainerJSON) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{30} }

func (m *ContainerJSON) GetContainerJsonBase() *ContainerJSONBase {
	if m != nil {
		return m.ContainerJsonBase
	}
	return nil
}

func (m *ContainerJSON) GetMounts() []*MountPoint {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *ContainerJSON) GetConfig() *container.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ContainerJSON) GetNetworkSettings() *NetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

// NetworkSettings exposes the network settings in the api
// type NetworkSettings struct
type NetworkSettings struct {
	// NetworkSettingsBase
	NetworkSettingsBase *NetworkSettingsBase `protobuf:"bytes,1,opt,name=network_settings_base,json=networkSettingsBase" json:"network_settings_base,omitempty"`
	// DefaultNetworkSettings
	DefaultNetworkSettings *DefaultNetworkSettings `protobuf:"bytes,2,opt,name=default_network_settings,json=defaultNetworkSettings" json:"default_network_settings,omitempty"`
	// Networks map[string]*network.EndpointSettings
	Networks map[string]*network.EndpointSettings `protobuf:"bytes,3,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkSettings) Reset()                    { *m = NetworkSettings{} }
func (m *NetworkSettings) String() string            { return proto.CompactTextString(m) }
func (*NetworkSettings) ProtoMessage()               {}
func (*NetworkSettings) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{31} }

func (m *NetworkSettings) GetNetworkSettingsBase() *NetworkSettingsBase {
	if m != nil {
		return m.NetworkSettingsBase
	}
	return nil
}

func (m *NetworkSettings) GetDefaultNetworkSettings() *DefaultNetworkSettings {
	if m != nil {
		return m.DefaultNetworkSettings
	}
	return nil
}

func (m *NetworkSettings) GetNetworks() map[string]*network.EndpointSettings {
	if m != nil {
		return m.Networks
	}
	return nil
}

// SummaryNetworkSettings provides a summary of container's networks
// in /containers/json
// type SummaryNetworkSettings struct
type SummaryNetworkSettings struct {
	// Networks map[string]*network.EndpointSettings
	Networks map[string]*network.EndpointSettings `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SummaryNetworkSettings) Reset()                    { *m = SummaryNetworkSettings{} }
func (m *SummaryNetworkSettings) String() string            { return proto.CompactTextString(m) }
func (*SummaryNetworkSettings) ProtoMessage()               {}
func (*SummaryNetworkSettings) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{32} }

func (m *SummaryNetworkSettings) GetNetworks() map[string]*network.EndpointSettings {
	if m != nil {
		return m.Networks
	}
	return nil
}

// NetworkSettingsBase holds basic information about networks
// type NetworkSettingsBase
type NetworkSettingsBase struct {
	// Bridge string // Bridge is the Bridge name the network uses(e.g. 'docker0')
	Bridge string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	// SandboxID string // SandboxID uniquely represents a container's network stack
	SandboxId string `protobuf:"bytes,2,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	// HairpinMode bool // HairpinMode specifies if hairpin NAT should be enabled on the virtual interface
	HairpinMode bool `protobuf:"varint,3,opt,name=hairpin_mode,json=hairpinMode,proto3" json:"hairpin_mode,omitempty"`
	// LinkLocalIPv6Address string // LinkLocalIPv6Address is an IPv6 unicast address using the link-local prefix
	LinkLocalIpv6Address string `protobuf:"bytes,4,opt,name=link_local_ipv6_address,json=linkLocalIpv6Address,proto3" json:"link_local_ipv6_address,omitempty"`
	// LinkLocalIPv6PrefixLen int // LinkLocalIPv6PrefixLen is the prefix length of an IPv6 unicast address
	LinkLocalIpv6PrefixLen int32 `protobuf:"varint,5,opt,name=link_local_ipv6_prefix_len,json=linkLocalIpv6PrefixLen,proto3" json:"link_local_ipv6_prefix_len,omitempty"`
	// Ports nat.PortMap // Ports is a collection of PortBinding indexed by Port
	Ports *nat.PortMap `protobuf:"bytes,6,opt,name=ports" json:"ports,omitempty"`
	// SandboxKey string //SandboxKey identifies the sandbox
	SandboxKey string `protobuf:"bytes,7,opt,name=sandbox_key,json=sandboxKey,proto3" json:"sandbox_key,omitempty"`
	// SecondaryIPAddresses []network.Address
	SecondaryIpAddresses []*network.Address `protobuf:"bytes,8,rep,name=secondary_ip_addresses,json=secondaryIpAddresses" json:"secondary_ip_addresses,omitempty"`
	// SecondaryIPv6Addresses []network.Address
	SecondaryIpv6Addresses []*network.Address `protobuf:"bytes,9,rep,name=secondary_ipv6_addresses,json=secondaryIpv6Addresses" json:"secondary_ipv6_addresses,omitempty"`
}

func (m *NetworkSettingsBase) Reset()                    { *m = NetworkSettingsBase{} }
func (m *NetworkSettingsBase) String() string            { return proto.CompactTextString(m) }
func (*NetworkSettingsBase) ProtoMessage()               {}
func (*NetworkSettingsBase) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{33} }

func (m *NetworkSettingsBase) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *NetworkSettingsBase) GetSandboxId() string {
	if m != nil {
		return m.SandboxId
	}
	return ""
}

func (m *NetworkSettingsBase) GetHairpinMode() bool {
	if m != nil {
		return m.HairpinMode
	}
	return false
}

func (m *NetworkSettingsBase) GetLinkLocalIpv6Address() string {
	if m != nil {
		return m.LinkLocalIpv6Address
	}
	return ""
}

func (m *NetworkSettingsBase) GetLinkLocalIpv6PrefixLen() int32 {
	if m != nil {
		return m.LinkLocalIpv6PrefixLen
	}
	return 0
}

func (m *NetworkSettingsBase) GetPorts() *nat.PortMap {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *NetworkSettingsBase) GetSandboxKey() string {
	if m != nil {
		return m.SandboxKey
	}
	return ""
}

func (m *NetworkSettingsBase) GetSecondaryIpAddresses() []*network.Address {
	if m != nil {
		return m.SecondaryIpAddresses
	}
	return nil
}

func (m *NetworkSettingsBase) GetSecondaryIpv6Addresses() []*network.Address {
	if m != nil {
		return m.SecondaryIpv6Addresses
	}
	return nil
}

// DefaultNetworkSettings holds network information during the 2 release deprecation period.
// It will be removed in Docker 1.11.
// type DefaultNetworkSettings struct
type DefaultNetworkSettings struct {
	// EndpointID string // EndpointID uniquely represents a service endpoint in a sandbox
	EndpointId string `protobuf:"bytes,1,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	// Gateway string // Gateway holds the gateway address for the network
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// GlobalIPv6Address string // GlobalIPv6Address holds network's global IPv6 address
	GlobalIpv6Address string `protobuf:"bytes,3,opt,name=global_ipv6_address,json=globalIpv6Address,proto3" json:"global_ipv6_address,omitempty"`
	// GlobalIPv6PrefixLen int // GlobalIPv6PrefixLen represents mask length of network's global IPv6 address
	GlobalIpv6PrefixLen int32 `protobuf:"varint,4,opt,name=global_ipv6_prefix_len,json=globalIpv6PrefixLen,proto3" json:"global_ipv6_prefix_len,omitempty"`
	// IPAddress string // IPAddress holds the IPv4 address for the network
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// IPPrefixLen int // IPPrefixLen represents mask length of network's IPv4 address
	IpPrefixLen int32 `protobuf:"varint,6,opt,name=ip_prefix_len,json=ipPrefixLen,proto3" json:"ip_prefix_len,omitempty"`
	// IPv6Gateway string // IPv6Gateway holds gateway address specific for IPv6
	Ipv6Gateway string `protobuf:"bytes,7,opt,name=ipv6_gateway,json=ipv6Gateway,proto3" json:"ipv6_gateway,omitempty"`
	// MacAddress string // MacAddress holds the MAC address for the network
	MacAddress string `protobuf:"bytes,8,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (m *DefaultNetworkSettings) Reset()                    { *m = DefaultNetworkSettings{} }
func (m *DefaultNetworkSettings) String() string            { return proto.CompactTextString(m) }
func (*DefaultNetworkSettings) ProtoMessage()               {}
func (*DefaultNetworkSettings) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{34} }

func (m *DefaultNetworkSettings) GetEndpointId() string {
	if m != nil {
		return m.EndpointId
	}
	return ""
}

func (m *DefaultNetworkSettings) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DefaultNetworkSettings) GetGlobalIpv6Address() string {
	if m != nil {
		return m.GlobalIpv6Address
	}
	return ""
}

func (m *DefaultNetworkSettings) GetGlobalIpv6PrefixLen() int32 {
	if m != nil {
		return m.GlobalIpv6PrefixLen
	}
	return 0
}

func (m *DefaultNetworkSettings) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *DefaultNetworkSettings) GetIpPrefixLen() int32 {
	if m != nil {
		return m.IpPrefixLen
	}
	return 0
}

func (m *DefaultNetworkSettings) GetIpv6Gateway() string {
	if m != nil {
		return m.Ipv6Gateway
	}
	return ""
}

func (m *DefaultNetworkSettings) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

// MountPoint represents a mount point configuration inside the container.
// This is used for reporting the mountpoints in used by a container.
// type MountPoint struct
type MountPoint struct {
	// Type mount.Type `json:",omitempty"`
	// Type represents the type of mount. // type Type string
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name string `json:",omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Source string
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Destination string
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// Driver string `json:",omitempty"`
	Driver string `protobuf:"bytes,5,opt,name=driver,proto3" json:"driver,omitempty"`
	// Mode string
	Mode string `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	// RW bool
	Rw bool `protobuf:"varint,7,opt,name=rw,proto3" json:"rw,omitempty"`
	// Propagation mount.Propagation
	// Propagation represents the propagation of a mount. // type Propagation string
	Propagation string `protobuf:"bytes,8,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (m *MountPoint) Reset()                    { *m = MountPoint{} }
func (m *MountPoint) String() string            { return proto.CompactTextString(m) }
func (*MountPoint) ProtoMessage()               {}
func (*MountPoint) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{35} }

func (m *MountPoint) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MountPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MountPoint) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MountPoint) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MountPoint) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *MountPoint) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *MountPoint) GetRw() bool {
	if m != nil {
		return m.Rw
	}
	return false
}

func (m *MountPoint) GetPropagation() string {
	if m != nil {
		return m.Propagation
	}
	return ""
}

// NetworkResource is the body of the "get network" http response message
// type NetworkResource struct
type NetworkResource struct {
	// Name string // Name is the requested name of the network
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID string `json:"Id"` // ID uniquely identifies a network on a single machine
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Created time.Time // Created is the time the network created
	Created *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// Scope string // Scope describes the level at which the network exists (e.g. 'swarm' for cluster-wide or 'local' for machine level)
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// Driver string // Driver is the Driver name used to create the network (e.g. 'bridge', 'overlay')
	Driver string `protobuf:"bytes,5,opt,name=driver,proto3" json:"driver,omitempty"`
	// EnableIPv6 bool //EnableIPv6 represents whether to enable IPv6
	EnableIpv6 bool `protobuf:"varint,6,opt,name=enable_ipv6,json=enableIpv6,proto3" json:"enable_ipv6,omitempty"`
	// IPAM network.IPAM // IPAM is the network's IP Address Management
	Ipam *network.IPAM `protobuf:"bytes,7,opt,name=ipam" json:"ipam,omitempty"`
	// Internal bool // Internal represents if the network is used internal only
	Internal bool `protobuf:"varint,8,opt,name=internal,proto3" json:"internal,omitempty"`
	// Attachable bool // Attachable represents if the global scope is manually attachable by regular containers from workers in swarm mode.
	Attachable bool `protobuf:"varint,9,opt,name=attachable,proto3" json:"attachable,omitempty"`
	// Ingress bool // Ingress indicates the network is providing the routing-mesh for the swarm custer.
	Ingress bool `protobuf:"varint,10,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// ConfigFrom network.ConfigReference // ConfigFrom speifies the source which will provide the cconfiguration for this network.
	ConfigFrom *network.ConfigReference `protobuf:"bytes,11,opt,name=config_from,json=configFrom" json:"config_from,omitempty"`
	// ConfigOnly bool // ConfigOnly networks are place-holder networks for network configurations to be used by other network. ConfigOnly networks cannot be used directly to run containers or services.
	ConfigOnly bool `protobuf:"varint,12,opt,name=config_only,json=configOnly,proto3" json:"config_only,omitempty"`
	// Containers map[string]EndpointResource // Containers contains endpoints belonging to the network
	Containers map[string]*EndpointResource `protobuf:"bytes,13,rep,name=containers" json:"containers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Options map[string]string // Options holds the network specific options to use for when creating the network
	Options map[string]string `protobuf:"bytes,14,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels map[string]string // Labels holds metadata specific to the network being created
	Labels map[string]string `protobuf:"bytes,15,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Peers []network.PeefInfo `json:",omitempty"` // List of peer nodes for an overlay network
	Peers []*network.PeerInfo `protobuf:"bytes,16,rep,name=peers" json:"peers,omitempty"`
	// Services map[string]network.ServiceInfo `json:",omitempty"`
	Services map[string]*network.ServiceInfo `protobuf:"bytes,17,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkResource) Reset()                    { *m = NetworkResource{} }
func (m *NetworkResource) String() string            { return proto.CompactTextString(m) }
func (*NetworkResource) ProtoMessage()               {}
func (*NetworkResource) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{36} }

func (m *NetworkResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkResource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkResource) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *NetworkResource) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *NetworkResource) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *NetworkResource) GetEnableIpv6() bool {
	if m != nil {
		return m.EnableIpv6
	}
	return false
}

func (m *NetworkResource) GetIpam() *network.IPAM {
	if m != nil {
		return m.Ipam
	}
	return nil
}

func (m *NetworkResource) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *NetworkResource) GetAttachable() bool {
	if m != nil {
		return m.Attachable
	}
	return false
}

func (m *NetworkResource) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *NetworkResource) GetConfigFrom() *network.ConfigReference {
	if m != nil {
		return m.ConfigFrom
	}
	return nil
}

func (m *NetworkResource) GetConfigOnly() bool {
	if m != nil {
		return m.ConfigOnly
	}
	return false
}

func (m *NetworkResource) GetContainers() map[string]*EndpointResource {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *NetworkResource) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkResource) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkResource) GetPeers() []*network.PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *NetworkResource) GetServices() map[string]*network.ServiceInfo {
	if m != nil {
		return m.Services
	}
	return nil
}

// EndpointResource contains network resources allocated and used for a container in a network
// type EndpointResource struct
type EndpointResource struct {
	// Name string
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EndpointID string
	EndpointId string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	// MacAddress string
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// IPv4Address string
	Ipv4Address string `protobuf:"bytes,4,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPv6Address string
	Ipv6Address string `protobuf:"bytes,5,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (m *EndpointResource) Reset()                    { *m = EndpointResource{} }
func (m *EndpointResource) String() string            { return proto.CompactTextString(m) }
func (*EndpointResource) ProtoMessage()               {}
func (*EndpointResource) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{37} }

func (m *EndpointResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndpointResource) GetEndpointId() string {
	if m != nil {
		return m.EndpointId
	}
	return ""
}

func (m *EndpointResource) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EndpointResource) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *EndpointResource) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

// NetworkCreate is the expected body of the "create network" http request message
// type NetworkCreate struct
type NetworkCreate struct {
	// CheckDuplicate bool // Check for networks with duplicate names. Network is primarily keyed based on a random ID and not on the name. Network name is strictly a user-friendly alias to the network which is uniquely identified using IO. And there is no gauranteed way to check for duplicates. Option CheckDuplicate is there to provide a best effort checking of any networks which had the same name but it is not guaranteed to catch all name collisions.
	CheckDuplicate bool `protobuf:"varint,1,opt,name=check_duplicate,json=checkDuplicate,proto3" json:"check_duplicate,omitempty"`
	// Driver string
	Driver string `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	// Scope string
	Scope string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// EnableIPv6 bool
	EnableIpv6 bool `protobuf:"varint,4,opt,name=enable_ipv6,json=enableIpv6,proto3" json:"enable_ipv6,omitempty"`
	// IPAM *network.IPAM
	Ipam *network.IPAM `protobuf:"bytes,5,opt,name=ipam" json:"ipam,omitempty"`
	// Internal bool
	Internal bool `protobuf:"varint,6,opt,name=internal,proto3" json:"internal,omitempty"`
	// Attachable bool
	Attachable bool `protobuf:"varint,7,opt,name=attachable,proto3" json:"attachable,omitempty"`
	// Ingress bool
	Ingress bool `protobuf:"varint,8,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// ConfigOnly bool
	ConfigOnly bool `protobuf:"varint,9,opt,name=config_only,json=configOnly,proto3" json:"config_only,omitempty"`
	// ConfigFrom *network.ConfigReference
	ConfigFrom *network.ConfigReference `protobuf:"bytes,10,opt,name=config_from,json=configFrom" json:"config_from,omitempty"`
	// Options map[string]string
	Options map[string]string `protobuf:"bytes,11,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels map[string]string
	Labels map[string]string `protobuf:"bytes,12,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NetworkCreate) Reset()                    { *m = NetworkCreate{} }
func (m *NetworkCreate) String() string            { return proto.CompactTextString(m) }
func (*NetworkCreate) ProtoMessage()               {}
func (*NetworkCreate) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{38} }

func (m *NetworkCreate) GetCheckDuplicate() bool {
	if m != nil {
		return m.CheckDuplicate
	}
	return false
}

func (m *NetworkCreate) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *NetworkCreate) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *NetworkCreate) GetEnableIpv6() bool {
	if m != nil {
		return m.EnableIpv6
	}
	return false
}

func (m *NetworkCreate) GetIpam() *network.IPAM {
	if m != nil {
		return m.Ipam
	}
	return nil
}

func (m *NetworkCreate) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *NetworkCreate) GetAttachable() bool {
	if m != nil {
		return m.Attachable
	}
	return false
}

func (m *NetworkCreate) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *NetworkCreate) GetConfigOnly() bool {
	if m != nil {
		return m.ConfigOnly
	}
	return false
}

func (m *NetworkCreate) GetConfigFrom() *network.ConfigReference {
	if m != nil {
		return m.ConfigFrom
	}
	return nil
}

func (m *NetworkCreate) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkCreate) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// NetworkCreateRequest is the request message sent to the server for network create call.
// type NetworkCreateRequest struct
type NetworkCreateRequest struct {
	// NetworkCreate
	NetworkCreate *NetworkCreate `protobuf:"bytes,1,opt,name=network_create,json=networkCreate" json:"network_create,omitempty"`
	// Name string
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *NetworkCreateRequest) Reset()                    { *m = NetworkCreateRequest{} }
func (m *NetworkCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkCreateRequest) ProtoMessage()               {}
func (*NetworkCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{39} }

func (m *NetworkCreateRequest) GetNetworkCreate() *NetworkCreate {
	if m != nil {
		return m.NetworkCreate
	}
	return nil
}

func (m *NetworkCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// NetworkCreateResponse is the response message sent by the server for network create call
// type NetworkCreateResponse struct
type NetworkCreateResponse struct {
	// ID string `json:"Id"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Warning string
	Warning string `protobuf:"bytes,2,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (m *NetworkCreateResponse) Reset()                    { *m = NetworkCreateResponse{} }
func (m *NetworkCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkCreateResponse) ProtoMessage()               {}
func (*NetworkCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{40} }

func (m *NetworkCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkCreateResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

// NetworkConnect represents the data to be used to connect a container to the network
// type NetworkConnect struct
type NetworkConnect struct {
	// Container string
	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// EndpointConfig *network.EndpointSettings `json:",omitempty"`
	EndpointConfig *network.EndpointSettings `protobuf:"bytes,2,opt,name=endpoint_config,json=endpointConfig" json:"endpoint_config,omitempty"`
}

func (m *NetworkConnect) Reset()                    { *m = NetworkConnect{} }
func (m *NetworkConnect) String() string            { return proto.CompactTextString(m) }
func (*NetworkConnect) ProtoMessage()               {}
func (*NetworkConnect) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{41} }

func (m *NetworkConnect) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *NetworkConnect) GetEndpointConfig() *network.EndpointSettings {
	if m != nil {
		return m.EndpointConfig
	}
	return nil
}

// NetworkDisconnect represents the data to be used to disconnect a container from the network
// type NetworkDisconnect struct
type NetworkDisconnect struct {
	// Container string
	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// Force bool
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *NetworkDisconnect) Reset()                    { *m = NetworkDisconnect{} }
func (m *NetworkDisconnect) String() string            { return proto.CompactTextString(m) }
func (*NetworkDisconnect) ProtoMessage()               {}
func (*NetworkDisconnect) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{42} }

func (m *NetworkDisconnect) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *NetworkDisconnect) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// NetworkInspectOptions holds parameters to inspect network
// type NetworkInspectOptions struct
type NetworkInspectOptions struct {
	// Scope string
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// Verbose bool
	Verbose bool `protobuf:"varint,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (m *NetworkInspectOptions) Reset()                    { *m = NetworkInspectOptions{} }
func (m *NetworkInspectOptions) String() string            { return proto.CompactTextString(m) }
func (*NetworkInspectOptions) ProtoMessage()               {}
func (*NetworkInspectOptions) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{43} }

func (m *NetworkInspectOptions) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *NetworkInspectOptions) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

// ContainersPruneReport contains the response for Engine API:
// POST "/conainers/prune"
// type ContainersPruneReport struct
type ContainersPruneReport struct {
	// ContainersDeleted []string
	ContainersDeleted []string `protobuf:"bytes,1,rep,name=containers_deleted,json=containersDeleted" json:"containers_deleted,omitempty"`
	// SpaceReclaimed uint64
	SpaceReclaimed uint64 `protobuf:"varint,2,opt,name=space_reclaimed,json=spaceReclaimed,proto3" json:"space_reclaimed,omitempty"`
}

func (m *ContainersPruneReport) Reset()                    { *m = ContainersPruneReport{} }
func (m *ContainersPruneReport) String() string            { return proto.CompactTextString(m) }
func (*ContainersPruneReport) ProtoMessage()               {}
func (*ContainersPruneReport) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{44} }

func (m *ContainersPruneReport) GetContainersDeleted() []string {
	if m != nil {
		return m.ContainersDeleted
	}
	return nil
}

func (m *ContainersPruneReport) GetSpaceReclaimed() uint64 {
	if m != nil {
		return m.SpaceReclaimed
	}
	return 0
}

// ImagesPruneReport contains the response for Engine API:
// POST "/images/prune"
// type ImagesPruneReport struct
type ImagesPruneReport struct {
	// ImagesDeleted []ImageDeleteResponseItem
	ImagesDeleted []*ImageDeleteResponseItem `protobuf:"bytes,1,rep,name=images_deleted,json=imagesDeleted" json:"images_deleted,omitempty"`
	// SpaceReclaimed uint64
	SpaceReclaimed uint64 `protobuf:"varint,2,opt,name=space_reclaimed,json=spaceReclaimed,proto3" json:"space_reclaimed,omitempty"`
}

func (m *ImagesPruneReport) Reset()                    { *m = ImagesPruneReport{} }
func (m *ImagesPruneReport) String() string            { return proto.CompactTextString(m) }
func (*ImagesPruneReport) ProtoMessage()               {}
func (*ImagesPruneReport) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{45} }

func (m *ImagesPruneReport) GetImagesDeleted() []*ImageDeleteResponseItem {
	if m != nil {
		return m.ImagesDeleted
	}
	return nil
}

func (m *ImagesPruneReport) GetSpaceReclaimed() uint64 {
	if m != nil {
		return m.SpaceReclaimed
	}
	return 0
}

// NetworksPruneReport contains the response for Engine API:
// POST "/networks/prune"
// type NetworksPruneReport struct
type NetworksPruneReport struct {
	// NetworksDeleted []string
	NetworksDeleted []string `protobuf:"bytes,1,rep,name=networks_deleted,json=networksDeleted" json:"networks_deleted,omitempty"`
}

func (m *NetworksPruneReport) Reset()                    { *m = NetworksPruneReport{} }
func (m *NetworksPruneReport) String() string            { return proto.CompactTextString(m) }
func (*NetworksPruneReport) ProtoMessage()               {}
func (*NetworksPruneReport) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{46} }

func (m *NetworksPruneReport) GetNetworksDeleted() []string {
	if m != nil {
		return m.NetworksDeleted
	}
	return nil
}

// Image contains response of Remote API:
// GET "/images/json"
type Image struct {
	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId    string            `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RepoTags    []string          `protobuf:"bytes,3,rep,name=repo_tags,json=repoTags" json:"repo_tags,omitempty"`
	RepoDigests []string          `protobuf:"bytes,4,rep,name=repo_digests,json=repoDigests" json:"repo_digests,omitempty"`
	Created     int64             `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	Size_       int64             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	VirtualSize int64             `protobuf:"varint,7,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	Labels      map[string]string `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptorMoby, []int{47} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Image) GetRepoTags() []string {
	if m != nil {
		return m.RepoTags
	}
	return nil
}

func (m *Image) GetRepoDigests() []string {
	if m != nil {
		return m.RepoDigests
	}
	return nil
}

func (m *Image) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Image) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Image) GetVirtualSize() int64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

func (m *Image) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthConfig)(nil), "moby.AuthConfig")
	proto.RegisterType((*ContainerListOptions)(nil), "moby.ContainerListOptions")
	proto.RegisterType((*ContainerLogsOptions)(nil), "moby.ContainerLogsOptions")
	proto.RegisterType((*ContainerRemoveOptions)(nil), "moby.ContainerRemoveOptions")
	proto.RegisterType((*ContainerStartOptions)(nil), "moby.ContainerStartOptions")
	proto.RegisterType((*NetworkListOptions)(nil), "moby.NetworkListOptions")
	proto.RegisterType((*ImageBuildOptions)(nil), "moby.ImageBuildOptions")
	proto.RegisterType((*ImageBuildOptions_StringStruct)(nil), "moby.ImageBuildOptions.StringStruct")
	proto.RegisterType((*ImageBuildResponse)(nil), "moby.ImageBuildResponse")
	proto.RegisterType((*ImageCreateOptions)(nil), "moby.ImageCreateOptions")
	proto.RegisterType((*ImageImportSource)(nil), "moby.ImageImportSource")
	proto.RegisterType((*ImageImportOptions)(nil), "moby.ImageImportOptions")
	proto.RegisterType((*ImageListOptions)(nil), "moby.ImageListOptions")
	proto.RegisterType((*ImageLoadResponse)(nil), "moby.ImageLoadResponse")
	proto.RegisterType((*ImagePullOptions)(nil), "moby.ImagePullOptions")
	proto.RegisterType((*ImagePushOptions)(nil), "moby.ImagePushOptions")
	proto.RegisterType((*ImageRemoveOptions)(nil), "moby.ImageRemoveOptions")
	proto.RegisterType((*ImageSearchOptions)(nil), "moby.ImageSearchOptions")
	proto.RegisterType((*GraphDriverData)(nil), "moby.GraphDriverData")
	proto.RegisterType((*ImageDeleteResponseItem)(nil), "moby.ImageDeleteResponseItem")
	proto.RegisterType((*ImageSummary)(nil), "moby.ImageSummary")
	proto.RegisterType((*Port)(nil), "moby.Port")
	proto.RegisterType((*RootFS)(nil), "moby.RootFS")
	proto.RegisterType((*ImageInspect)(nil), "moby.ImageInspect")
	proto.RegisterType((*ImageMetadata)(nil), "moby.ImageMetadata")
	proto.RegisterType((*Container)(nil), "moby.Container")
	proto.RegisterType((*Container_HostConfig)(nil), "moby.Container.HostConfig")
	proto.RegisterType((*HealthcheckResult)(nil), "moby.HealthcheckResult")
	proto.RegisterType((*Health)(nil), "moby.Health")
	proto.RegisterType((*ContainerState)(nil), "moby.ContainerState")
	proto.RegisterType((*ContainerNode)(nil), "moby.ContainerNode")
	proto.RegisterType((*ContainerJSONBase)(nil), "moby.ContainerJSONBase")
	proto.RegisterType((*ContainerJSONBase_Int64Struct)(nil), "moby.ContainerJSONBase.Int64Struct")
	proto.RegisterType((*ContainerJSON)(nil), "moby.ContainerJSON")
	proto.RegisterType((*NetworkSettings)(nil), "moby.NetworkSettings")
	proto.RegisterType((*SummaryNetworkSettings)(nil), "moby.SummaryNetworkSettings")
	proto.RegisterType((*NetworkSettingsBase)(nil), "moby.NetworkSettingsBase")
	proto.RegisterType((*DefaultNetworkSettings)(nil), "moby.DefaultNetworkSettings")
	proto.RegisterType((*MountPoint)(nil), "moby.MountPoint")
	proto.RegisterType((*NetworkResource)(nil), "moby.NetworkResource")
	proto.RegisterType((*EndpointResource)(nil), "moby.EndpointResource")
	proto.RegisterType((*NetworkCreate)(nil), "moby.NetworkCreate")
	proto.RegisterType((*NetworkCreateRequest)(nil), "moby.NetworkCreateRequest")
	proto.RegisterType((*NetworkCreateResponse)(nil), "moby.NetworkCreateResponse")
	proto.RegisterType((*NetworkConnect)(nil), "moby.NetworkConnect")
	proto.RegisterType((*NetworkDisconnect)(nil), "moby.NetworkDisconnect")
	proto.RegisterType((*NetworkInspectOptions)(nil), "moby.NetworkInspectOptions")
	proto.RegisterType((*ContainersPruneReport)(nil), "moby.ContainersPruneReport")
	proto.RegisterType((*ImagesPruneReport)(nil), "moby.ImagesPruneReport")
	proto.RegisterType((*NetworksPruneReport)(nil), "moby.NetworksPruneReport")
	proto.RegisterType((*Image)(nil), "moby.Image")
}

func init() { proto.RegisterFile("pb/moby/moby.proto", fileDescriptorMoby) }

var fileDescriptorMoby = []byte{
	// 4204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xbd, 0x73, 0x1c, 0x47,
	0x76, 0xaf, 0xfd, 0xc4, 0xee, 0xdb, 0x5d, 0x7c, 0x0c, 0x40, 0x70, 0x08, 0x89, 0x22, 0xb8, 0x14,
	0x4f, 0x94, 0xea, 0x0c, 0xba, 0x20, 0x99, 0x77, 0xa2, 0x64, 0xfb, 0x28, 0x42, 0xe4, 0x41, 0xe2,
	0x07, 0x34, 0xa0, 0x94, 0x4e, 0x35, 0x76, 0x7a, 0x77, 0xe7, 0x38, 0x3b, 0x3d, 0xea, 0xee, 0x01,
	0x08, 0x47, 0x2e, 0x07, 0x8e, 0x2e, 0x73, 0x39, 0x76, 0xea, 0xc8, 0x55, 0xce, 0x5c, 0xe5, 0xc0,
	0xa9, 0x03, 0x27, 0x8e, 0xec, 0x72, 0xea, 0xcc, 0xc9, 0x55, 0xf9, 0x2f, 0x70, 0xbd, 0xd7, 0xdd,
	0xb3, 0x33, 0x8b, 0x25, 0x48, 0x96, 0x5c, 0x77, 0x01, 0xc1, 0x79, 0xbf, 0x7e, 0xfd, 0xf1, 0xba,
	0x5f, 0xbf, 0xaf, 0x5e, 0xf0, 0xb2, 0x93, 0xbb, 0x33, 0x71, 0x72, 0x4e, 0x7f, 0xf6, 0x32, 0x29,
	0xb4, 0xf0, 0x9a, 0xf8, 0xbd, 0x73, 0x63, 0x22, 0xc4, 0x24, 0xe1, 0x77, 0x09, 0x3b, 0xc9, 0xc7,
	0x77, 0x75, 0x3c, 0xe3, 0x4a, 0xb3, 0x59, 0x66, 0xd8, 0x76, 0x6e, 0xba, 0xae, 0x23, 0x91, 0x6a,
	0x16, 0xa7, 0x5c, 0xce, 0xbf, 0x2c, 0xcb, 0x75, 0xc7, 0x92, 0x72, 0x7d, 0x26, 0xe4, 0x4b, 0xf7,
	0xbf, 0x6d, 0xbe, 0xe6, 0x9a, 0xf3, 0x34, 0xd6, 0xca, 0xfc, 0x5d, 0xec, 0x39, 0x8e, 0x13, 0xcd,
	0xa5, 0x72, 0xff, 0xdb, 0xe6, 0x2b, 0xc5, 0xc0, 0x4c, 0xe3, 0x3f, 0x03, 0x0f, 0xff, 0xbb, 0x06,
	0xf0, 0x20, 0xd7, 0xd3, 0x87, 0x22, 0x1d, 0xc7, 0x13, 0x6f, 0x07, 0x3a, 0xb9, 0xe2, 0x32, 0x65,
	0x33, 0xee, 0xd7, 0x76, 0x6b, 0x77, 0xba, 0x41, 0x41, 0x63, 0x5b, 0xc6, 0x94, 0x3a, 0x13, 0x32,
	0xf2, 0xeb, 0xa6, 0xcd, 0xd1, 0x9e, 0x07, 0x4d, 0x96, 0xeb, 0xa9, 0xdf, 0x20, 0x9c, 0xbe, 0xbd,
	0x2d, 0x68, 0xf1, 0x19, 0x8b, 0x13, 0xbf, 0x49, 0xa0, 0x21, 0xbc, 0xdb, 0xb0, 0xaa, 0xb8, 0x3c,
	0xe5, 0x32, 0x64, 0x51, 0x24, 0xb9, 0x52, 0x7e, 0x8b, 0x9a, 0x07, 0x06, 0x7d, 0x60, 0x40, 0x64,
	0x8b, 0x23, 0x9e, 0xea, 0x58, 0x9f, 0x87, 0x5a, 0xbc, 0xe4, 0xa9, 0xdf, 0x36, 0x6c, 0x0e, 0x7d,
	0x81, 0x20, 0xb2, 0x49, 0x3e, 0x89, 0x95, 0x96, 0x8e, 0x6d, 0xc5, 0xb0, 0x39, 0x94, 0xd8, 0x86,
	0xff, 0x51, 0x83, 0xad, 0x87, 0x6e, 0xa7, 0x9f, 0xc4, 0x4a, 0x3f, 0xcf, 0x74, 0x2c, 0x52, 0x85,
	0x6b, 0xfc, 0x31, 0x8f, 0xb9, 0x26, 0x61, 0x3b, 0x81, 0x21, 0x50, 0x1a, 0x15, 0xff, 0x05, 0x27,
	0x29, 0x3b, 0x01, 0x7d, 0x7b, 0xeb, 0xd0, 0x60, 0x49, 0x42, 0x02, 0x76, 0x02, 0xfc, 0xf4, 0xb6,
	0xa1, 0x9d, 0x30, 0xcd, 0x95, 0x26, 0x01, 0x3b, 0x81, 0xa5, 0x70, 0x4c, 0x15, 0xa7, 0x23, 0x6e,
	0x05, 0x33, 0x04, 0x72, 0x9f, 0xf0, 0xb1, 0x90, 0xdc, 0x0a, 0x62, 0x29, 0xe4, 0x4e, 0xe2, 0x59,
	0xac, 0x69, 0xe1, 0xad, 0xc0, 0x10, 0xde, 0x47, 0xb0, 0x62, 0x8f, 0xcf, 0xef, 0xec, 0xd6, 0xee,
	0xf4, 0xf6, 0x07, 0x7b, 0xee, 0x38, 0x1f, 0xc8, 0x89, 0x0a, 0x5c, 0xeb, 0xf0, 0x7f, 0x2a, 0x92,
	0x89, 0x89, 0x72, 0x92, 0xdd, 0x80, 0x9e, 0x9a, 0x8a, 0xb3, 0x50, 0xe9, 0x48, 0xe4, 0x4e, 0x3e,
	0x40, 0xe8, 0x98, 0x90, 0x32, 0x03, 0x97, 0xd2, 0xca, 0xea, 0x18, 0xb8, 0x94, 0x73, 0x39, 0x1a,
	0x65, 0x39, 0xb6, 0xa0, 0x95, 0xa7, 0x7a, 0x7e, 0xaa, 0x44, 0x78, 0x1f, 0x00, 0x14, 0xca, 0x6e,
	0x4e, 0xb4, 0x13, 0x94, 0x10, 0x94, 0x7e, 0x2c, 0x92, 0x44, 0x9c, 0x91, 0xf4, 0x9d, 0xc0, 0x52,
	0xb8, 0xd3, 0x1a, 0x55, 0xc4, 0x9c, 0x1a, 0x7d, 0x7b, 0x3e, 0xac, 0x44, 0x1c, 0xbf, 0x8c, 0xec,
	0x9d, 0xc0, 0x91, 0xc3, 0x57, 0xb0, 0x5d, 0xc8, 0x1a, 0xf0, 0x99, 0x38, 0xe5, 0x4e, 0x5a, 0xd2,
	0x03, 0x04, 0xc2, 0x53, 0x91, 0xe4, 0x33, 0xae, 0xac, 0xc0, 0x03, 0x83, 0xfe, 0x60, 0x40, 0xef,
	0x26, 0xf4, 0x2d, 0x5b, 0x12, 0xa7, 0x2f, 0x95, 0x15, 0xba, 0x67, 0xb0, 0x27, 0x08, 0xa1, 0x7c,
	0x63, 0x21, 0xad, 0xd4, 0x9d, 0xc0, 0x10, 0xc3, 0x11, 0x5c, 0x29, 0x66, 0x3e, 0xd6, 0x4c, 0x16,
	0x0a, 0x74, 0x0b, 0x06, 0xa3, 0x29, 0x1f, 0xbd, 0xcc, 0x44, 0x9c, 0xea, 0x30, 0x8e, 0xec, 0xad,
	0xe9, 0xcf, 0xc1, 0xc3, 0x08, 0x57, 0x57, 0x62, 0x8a, 0x62, 0x69, 0xef, 0x4f, 0xa9, 0xeb, 0x41,
	0x2c, 0x87, 0x7f, 0x0a, 0xde, 0x33, 0x73, 0xdb, 0xcb, 0x2a, 0x5a, 0x52, 0x85, 0xda, 0xa5, 0xaa,
	0xf0, 0xb7, 0x3d, 0xd8, 0x38, 0x9c, 0xb1, 0x09, 0xff, 0x2a, 0x8f, 0x93, 0xc8, 0x75, 0xa7, 0x1d,
	0x9e, 0x60, 0xdf, 0x86, 0xd9, 0xe1, 0x09, 0x0e, 0xb9, 0xa6, 0xf2, 0x2c, 0xc3, 0x8b, 0x16, 0x8a,
	0x5c, 0x67, 0xb9, 0xb6, 0x3b, 0xb1, 0xea, 0xe0, 0xe7, 0x84, 0xba, 0x6d, 0xd5, 0x3c, 0x44, 0x3b,
	0xc5, 0x5f, 0x69, 0xab, 0x0b, 0x03, 0x83, 0x3e, 0x34, 0xa0, 0x77, 0x0d, 0x3a, 0xa9, 0x08, 0x47,
	0x6c, 0x34, 0xe5, 0xf6, 0x2e, 0xac, 0xa4, 0xe2, 0x21, 0x92, 0x78, 0xf0, 0x66, 0x77, 0xad, 0x52,
	0x58, 0x0a, 0x4f, 0x82, 0x76, 0x36, 0xb4, 0xad, 0x46, 0x2d, 0x7a, 0x84, 0x99, 0xa3, 0x45, 0x05,
	0xcd, 0xf2, 0x24, 0x09, 0x33, 0x26, 0x79, 0x6a, 0xee, 0x47, 0x27, 0x00, 0x84, 0x8e, 0x08, 0xf1,
	0xde, 0x87, 0x6e, 0xac, 0x44, 0xc2, 0x50, 0x50, 0x52, 0x95, 0x6e, 0x30, 0x07, 0xbc, 0x5d, 0xe8,
	0x8f, 0xb2, 0x3c, 0x54, 0x5c, 0x87, 0xa3, 0x2c, 0x57, 0x7e, 0x97, 0x18, 0x60, 0x94, 0xe5, 0xc7,
	0x5c, 0x3f, 0xcc, 0x72, 0x55, 0xe6, 0x98, 0xf1, 0x99, 0xf2, 0xa1, 0xcc, 0xf1, 0x94, 0xcf, 0x94,
	0x77, 0x1d, 0x80, 0x38, 0xa6, 0x4c, 0x72, 0xe5, 0xf7, 0x76, 0x6b, 0x77, 0x1a, 0x41, 0x17, 0xdb,
	0x09, 0xf0, 0xde, 0x03, 0x24, 0xc2, 0x1f, 0x73, 0xa1, 0x99, 0xdf, 0xa7, 0xd6, 0xce, 0x28, 0xcb,
	0xbf, 0x43, 0xda, 0xf5, 0xcd, 0xb8, 0x8c, 0x45, 0xe4, 0x0f, 0x8a, 0xbe, 0x47, 0x04, 0xe0, 0xc6,
	0xcc, 0xf8, 0x4c, 0xc8, 0x73, 0x7f, 0x95, 0x9a, 0x2c, 0x85, 0x52, 0x9b, 0xaf, 0x50, 0x9d, 0xb1,
	0xcc, 0x5f, 0xa3, 0x46, 0x30, 0xd0, 0xf1, 0x19, 0xcb, 0x48, 0xe3, 0x26, 0x52, 0xe4, 0x99, 0xdb,
	0x98, 0x75, 0xab, 0x71, 0x04, 0xda, 0xad, 0xb9, 0x09, 0x7d, 0xeb, 0x38, 0xc2, 0x99, 0x88, 0xb8,
	0xbf, 0x41, 0x3c, 0x3d, 0x8b, 0x3d, 0x15, 0x11, 0xc7, 0x43, 0x53, 0xd3, 0x59, 0x48, 0x86, 0xce,
	0xa3, 0x59, 0x56, 0xd4, 0x74, 0x76, 0x8c, 0xb6, 0xee, 0x03, 0x80, 0x48, 0x8c, 0x5e, 0x72, 0x39,
	0x8e, 0x13, 0xee, 0x6f, 0x9a, 0x6d, 0x99, 0x23, 0xa8, 0x92, 0x39, 0xd9, 0x29, 0xe5, 0x6f, 0xed,
	0x36, 0x48, 0x25, 0x8d, 0x27, 0xfa, 0x9e, 0xd0, 0xc0, 0xb5, 0x7a, 0x5f, 0x03, 0x9c, 0xa0, 0x32,
	0x86, 0x4c, 0x4e, 0x94, 0x7f, 0x85, 0x78, 0x7f, 0xb6, 0x47, 0x8e, 0xf3, 0x82, 0xa6, 0xee, 0x11,
	0x81, 0x2a, 0xfd, 0x75, 0xaa, 0xe5, 0x79, 0xd0, 0x3d, 0x71, 0xb4, 0xf7, 0x2d, 0xf4, 0xd1, 0xa3,
	0xa0, 0x12, 0x8e, 0xe3, 0x89, 0xf2, 0xb7, 0x69, 0xa0, 0x3b, 0xaf, 0x1b, 0x68, 0xee, 0xcf, 0xec,
	0x50, 0x3d, 0x36, 0x47, 0xd0, 0xbc, 0x38, 0x65, 0xbe, 0xba, 0x5b, 0xbb, 0xd3, 0x0f, 0x1c, 0xe9,
	0x7d, 0x81, 0x06, 0xfd, 0x84, 0x27, 0xca, 0xf7, 0x69, 0x82, 0x5b, 0xaf, 0x9b, 0xe0, 0x09, 0x71,
	0x99, 0xb1, 0x6d, 0x17, 0x3c, 0x4f, 0xf5, 0x63, 0xce, 0xd4, 0xd4, 0xbf, 0x66, 0x14, 0xdd, 0x50,
	0xa4, 0x06, 0x78, 0x13, 0xc2, 0xb1, 0x14, 0x33, 0x7f, 0x87, 0x6e, 0x61, 0x97, 0x90, 0x47, 0x52,
	0xcc, 0xf0, 0xa0, 0x14, 0x1f, 0xe5, 0x12, 0xfd, 0x9c, 0xc8, 0xb4, 0xff, 0x1e, 0x31, 0xf4, 0x1c,
	0xf6, 0x3c, 0x23, 0x43, 0xcd, 0x5f, 0x69, 0xc9, 0xc2, 0xa9, 0x50, 0x5a, 0xf9, 0xef, 0x13, 0x07,
	0x10, 0xf4, 0x6b, 0x44, 0x70, 0x6a, 0xcd, 0xe4, 0x84, 0x6b, 0xff, 0xba, 0x71, 0x2d, 0x86, 0xc2,
	0xa9, 0x15, 0x57, 0x2a, 0x16, 0x29, 0x1a, 0xa6, 0x0f, 0xcc, 0x05, 0xb1, 0xc8, 0x61, 0x44, 0xfe,
	0x3c, 0x61, 0x7a, 0x2c, 0xe4, 0xcc, 0xbf, 0x61, 0xfd, 0xb9, 0xa5, 0x71, 0x93, 0x4e, 0xb9, 0x44,
	0x46, 0x7f, 0x97, 0x9a, 0x1c, 0x89, 0x6a, 0x63, 0x8e, 0x34, 0x8e, 0xfc, 0x9b, 0xa6, 0x89, 0xe8,
	0xc3, 0x68, 0xe7, 0x04, 0x56, 0xab, 0x67, 0x88, 0x4e, 0xf3, 0x25, 0x3f, 0xb7, 0x36, 0x11, 0x3f,
	0xbd, 0xfb, 0xd0, 0x3a, 0x65, 0x49, 0x6e, 0x7c, 0x6b, 0x6f, 0xff, 0xc3, 0xd7, 0x6d, 0xf1, 0xb1,
	0x96, 0x71, 0x3a, 0x39, 0xd6, 0x32, 0x1f, 0xe9, 0xc0, 0x74, 0xb9, 0x5f, 0xff, 0x65, 0x6d, 0xe7,
	0x08, 0xd6, 0x17, 0x8f, 0x77, 0xc9, 0x2c, 0x3f, 0xab, 0xce, 0xb2, 0x6e, 0x66, 0x99, 0x77, 0x2c,
	0x8f, 0xf8, 0x39, 0xf4, 0x4a, 0xe7, 0xb9, 0x64, 0xb0, 0xad, 0xf2, 0x60, 0xdd, 0x72, 0xd7, 0x0f,
	0xa1, 0x5f, 0x5e, 0xe7, 0x9c, 0xb3, 0x56, 0xe2, 0x1c, 0x3e, 0x00, 0x6f, 0x2e, 0x5f, 0xc0, 0x55,
	0x26, 0x52, 0xc5, 0xd1, 0x2e, 0x9f, 0x88, 0xc8, 0x4c, 0xd4, 0x0f, 0xe8, 0xdb, 0xbb, 0x0a, 0x2b,
	0x42, 0x85, 0xfa, 0x3c, 0x73, 0x73, 0xb5, 0x85, 0x7a, 0x71, 0x9e, 0xf1, 0xe1, 0xf7, 0x76, 0x88,
	0x87, 0x92, 0x33, 0xcd, 0x4b, 0xbe, 0xa7, 0x08, 0x7e, 0x28, 0xfa, 0xb2, 0xbe, 0xc7, 0x81, 0x28,
	0x6f, 0xe5, 0x94, 0xeb, 0xd5, 0x53, 0x1e, 0x3e, 0xb1, 0x0e, 0xe3, 0x70, 0x96, 0x09, 0xa9, 0x8f,
	0x45, 0x2e, 0x4d, 0xa0, 0xa2, 0xe8, 0xcb, 0x2e, 0xcd, 0x52, 0x14, 0x2f, 0xd0, 0x57, 0x48, 0xd1,
	0xa1, 0x19, 0x0b, 0x0c, 0xf4, 0x8c, 0xcd, 0xf8, 0xf0, 0xd4, 0x2e, 0xd2, 0x8c, 0xe6, 0x16, 0xb9,
	0x0e, 0x0d, 0xcd, 0x26, 0x6e, 0x3f, 0x35, 0x9b, 0xa0, 0x6e, 0xcd, 0xb8, 0x52, 0x6c, 0xe2, 0x06,
	0x71, 0x24, 0x5d, 0xcd, 0x29, 0x4b, 0x27, 0x5c, 0xf9, 0x0d, 0xd2, 0x72, 0x47, 0x56, 0xa4, 0x68,
	0x2e, 0x48, 0xf1, 0x14, 0xd6, 0x69, 0xde, 0xb2, 0xd3, 0xb4, 0xd1, 0x5a, 0x6d, 0x1e, 0xad, 0x95,
	0xdc, 0x68, 0xfd, 0x52, 0x37, 0xfa, 0x85, 0xdd, 0x94, 0x27, 0x82, 0x5d, 0x7e, 0x5a, 0x1e, 0x34,
	0x7f, 0xa3, 0x44, 0xea, 0xa2, 0x44, 0xfc, 0x1e, 0xfe, 0xb6, 0x66, 0x17, 0x73, 0x94, 0x27, 0xc9,
	0xeb, 0x17, 0x73, 0xe1, 0xe4, 0xea, 0x4b, 0x4e, 0xee, 0x36, 0xac, 0x66, 0x32, 0x3e, 0x8d, 0x13,
	0x3e, 0xe1, 0xe1, 0x38, 0x4f, 0x47, 0xce, 0xf9, 0x16, 0xe8, 0xa3, 0x3c, 0x1d, 0x5d, 0xba, 0x35,
	0xa5, 0xe5, 0xa8, 0xe9, 0x1f, 0x7e, 0x39, 0xdf, 0x59, 0x0d, 0xa9, 0xc6, 0x6e, 0x45, 0xc4, 0x55,
	0x2b, 0x45, 0x5c, 0x66, 0xba, 0x3c, 0xe5, 0xe1, 0x68, 0x1a, 0x27, 0x91, 0xe4, 0x6e, 0x9f, 0x07,
	0x84, 0x3e, 0xb4, 0xe0, 0xf0, 0xef, 0x6a, 0x76, 0xcc, 0x63, 0xce, 0xe4, 0x68, 0xfa, 0x4e, 0x57,
	0xe3, 0xa2, 0x44, 0xf5, 0x65, 0x12, 0x95, 0x34, 0xa7, 0x71, 0x99, 0xe6, 0xcc, 0x43, 0xf9, 0x66,
	0x29, 0x94, 0x1f, 0xfe, 0x4d, 0x0d, 0xd6, 0x1e, 0x4b, 0x96, 0x4d, 0x0f, 0x64, 0x7c, 0xca, 0xe5,
	0x01, 0xd3, 0xcc, 0xfb, 0x14, 0x9a, 0x11, 0xd3, 0x8c, 0x82, 0xb2, 0xde, 0xfe, 0x0d, 0x63, 0x9e,
	0x16, 0x98, 0xf6, 0xf0, 0x8f, 0xf1, 0x31, 0xc4, 0x8c, 0xfa, 0x56, 0xba, 0x79, 0xf4, 0xbd, 0xf3,
	0x0b, 0xe8, 0x16, 0x6c, 0xef, 0x62, 0xba, 0x86, 0xcf, 0xe1, 0x2a, 0x6d, 0xdb, 0x01, 0x4f, 0xb8,
	0xe6, 0x4e, 0xcf, 0x0f, 0x35, 0x9f, 0x99, 0xf8, 0x1b, 0x51, 0x17, 0xcc, 0x3a, 0x92, 0xb2, 0xc3,
	0x54, 0xb3, 0xc9, 0x84, 0x17, 0x19, 0xa0, 0xa3, 0x87, 0x7f, 0xd9, 0x80, 0xbe, 0x39, 0x88, 0x7c,
	0x36, 0x63, 0xf2, 0x1c, 0x83, 0x88, 0x22, 0xb9, 0x35, 0xa1, 0x6b, 0x23, 0x28, 0x21, 0x74, 0xd9,
	0xc9, 0x9c, 0x99, 0xb1, 0x1a, 0x81, 0x23, 0xbd, 0x55, 0xa8, 0xc7, 0x91, 0xd5, 0xae, 0x7a, 0x1c,
	0x79, 0xf7, 0x0a, 0xbf, 0xdc, 0xa4, 0xfd, 0xfa, 0xa0, 0xe4, 0x34, 0xec, 0x6c, 0x4b, 0x5d, 0xf2,
	0x7b, 0xd0, 0x35, 0x21, 0x12, 0xfa, 0xaa, 0x96, 0xcb, 0x58, 0x11, 0x38, 0x8c, 0x4c, 0x2a, 0x90,
	0x89, 0x30, 0x8a, 0x27, 0x1c, 0xdd, 0x6a, 0xdb, 0x38, 0x5e, 0xc4, 0x0e, 0x0c, 0x84, 0xfd, 0x89,
	0x85, 0xe2, 0xe7, 0x15, 0x6a, 0xef, 0x20, 0xf0, 0x02, 0x63, 0x68, 0x4a, 0x9f, 0x98, 0xe4, 0x91,
	0x89, 0xa0, 0x3a, 0x46, 0x3e, 0x03, 0x51, 0x10, 0xe5, 0x92, 0xc8, 0x2e, 0xb5, 0x98, 0x24, 0xf2,
	0x26, 0xf4, 0x4f, 0x63, 0xa9, 0x73, 0x96, 0x98, 0x5e, 0x40, 0x6d, 0x3d, 0x8b, 0x61, 0xb7, 0x9f,
	0xe0, 0x8e, 0x86, 0x29, 0x34, 0x8f, 0x84, 0xd4, 0xb4, 0x7f, 0x99, 0xed, 0x52, 0x8f, 0x33, 0x9c,
	0x15, 0x35, 0x9a, 0x69, 0x1e, 0xa2, 0x65, 0xa6, 0x8e, 0xad, 0xa0, 0x67, 0x31, 0xea, 0x42, 0xb1,
	0xf6, 0x49, 0x12, 0x8f, 0x0c, 0x47, 0x83, 0x38, 0xc0, 0x40, 0xc4, 0x80, 0x69, 0x04, 0xfa, 0xa5,
	0xa6, 0x4d, 0xd4, 0xd0, 0x2b, 0x1d, 0x43, 0x3b, 0x10, 0x42, 0x3f, 0x3a, 0x2e, 0x5a, 0x6b, 0xf3,
	0x56, 0x93, 0x1e, 0x9f, 0x1b, 0x7b, 0x8b, 0x5b, 0x67, 0x29, 0x8c, 0x4a, 0x4e, 0x98, 0xe2, 0x21,
	0x91, 0xf6, 0x94, 0xbb, 0x88, 0x3c, 0x41, 0x60, 0xf8, 0xdb, 0x96, 0xd5, 0xa3, 0xc3, 0x54, 0x65,
	0x7c, 0xa4, 0xad, 0x36, 0xd4, 0x0a, 0x6d, 0xa8, 0x9c, 0x4a, 0x7d, 0xe1, 0x54, 0x16, 0x4f, 0xb5,
	0x71, 0xf1, 0x54, 0xb7, 0xa1, 0x6d, 0x03, 0x67, 0x23, 0x8b, 0xa5, 0x4c, 0x5c, 0x38, 0x9b, 0x61,
	0x83, 0xd1, 0x15, 0x47, 0x96, 0x35, 0xb5, 0x6d, 0x5b, 0xac, 0xa6, 0xbe, 0x0f, 0xdd, 0x42, 0xa3,
	0x6d, 0x0e, 0x3b, 0x07, 0xbc, 0x2f, 0x61, 0xbd, 0x20, 0x6c, 0xec, 0x6a, 0xb3, 0xf9, 0x8d, 0xbd,
	0x79, 0xdd, 0xc7, 0x46, 0x24, 0x6b, 0x05, 0x62, 0x4b, 0x31, 0xb7, 0x61, 0xd5, 0x84, 0xdc, 0xa1,
	0x8b, 0xc4, 0x4c, 0x06, 0x33, 0x30, 0xe8, 0x0f, 0x36, 0x1e, 0xdb, 0x86, 0x36, 0x1a, 0x38, 0x21,
	0x6d, 0xfa, 0x62, 0x29, 0xef, 0x63, 0x68, 0xdb, 0x29, 0x7b, 0xaf, 0x9b, 0xd2, 0x32, 0x78, 0x43,
	0xe8, 0xa3, 0xed, 0x8c, 0x35, 0x1f, 0xe9, 0x5c, 0x72, 0xca, 0x64, 0xba, 0x41, 0x05, 0xc3, 0x53,
	0x10, 0x8a, 0xb2, 0x98, 0x6e, 0x50, 0x17, 0x74, 0x8a, 0x42, 0x15, 0x2b, 0x5b, 0x35, 0xa2, 0x0b,
	0xe5, 0x56, 0xe5, 0x94, 0x7f, 0xed, 0x12, 0xe5, 0x5f, 0xbf, 0xa0, 0xfc, 0xde, 0x2f, 0xa1, 0x3f,
	0x41, 0x2b, 0x18, 0x46, 0x64, 0x06, 0x29, 0x6d, 0xe9, 0xed, 0x5f, 0x59, 0x6a, 0x1f, 0x83, 0xde,
	0x64, 0x0e, 0x78, 0xb7, 0x61, 0x45, 0x0a, 0xa1, 0xc3, 0xb1, 0xa2, 0x64, 0xa6, 0xb7, 0xdf, 0x37,
	0x9d, 0x8c, 0x82, 0x06, 0x6d, 0x6c, 0x7c, 0xa4, 0xbc, 0xbb, 0xd0, 0x99, 0x71, 0xcd, 0xc8, 0xf8,
	0x6e, 0x12, 0xdf, 0x66, 0xc9, 0x98, 0x3c, 0xb5, 0x4d, 0x41, 0xc1, 0x34, 0x7c, 0x0e, 0x83, 0x4a,
	0x93, 0xf7, 0x67, 0x30, 0x48, 0x98, 0xd2, 0xa8, 0x7e, 0xa1, 0x8e, 0x6d, 0x99, 0xac, 0xb7, 0xbf,
	0xb3, 0x67, 0x8a, 0x7f, 0x7b, 0xae, 0xf8, 0xb7, 0xf7, 0xc2, 0x55, 0x3f, 0x82, 0x1e, 0x76, 0x78,
	0xc1, 0x26, 0x88, 0x0c, 0xff, 0xb7, 0x09, 0xdd, 0xa2, 0x94, 0x70, 0x41, 0xb9, 0xb7, 0xa0, 0x85,
	0x76, 0xdd, 0x29, 0xb6, 0x21, 0x10, 0x8d, 0x71, 0x11, 0xae, 0x12, 0x43, 0x04, 0x46, 0xe2, 0xf4,
	0x81, 0xd6, 0xcd, 0xa8, 0xf2, 0x0a, 0xd1, 0x87, 0x91, 0xd3, 0x65, 0x96, 0x46, 0x65, 0x5d, 0x66,
	0x69, 0xb4, 0xa8, 0xcb, 0x25, 0xab, 0xbb, 0x0b, 0x2d, 0xbc, 0xe9, 0xc6, 0xd2, 0xf5, 0xf6, 0xc1,
	0xec, 0x0b, 0x42, 0x81, 0x69, 0xc0, 0xf0, 0x14, 0x0f, 0x2e, 0x94, 0x67, 0xd6, 0xdc, 0xb5, 0x91,
	0x0c, 0xce, 0x30, 0x91, 0x36, 0x0d, 0xf6, 0x04, 0xba, 0xd6, 0x18, 0x62, 0xab, 0xd9, 0xf7, 0x4f,
	0x0b, 0x13, 0x0e, 0x34, 0xfa, 0x7b, 0x66, 0xf4, 0x62, 0x23, 0x96, 0xda, 0xef, 0x2d, 0x68, 0x29,
	0xcd, 0x34, 0x27, 0x0d, 0xee, 0x06, 0x86, 0xa0, 0xf8, 0x54, 0x33, 0x9d, 0x2b, 0xab, 0xa7, 0x96,
	0xf2, 0xbe, 0x80, 0x1e, 0x26, 0x48, 0xee, 0xa2, 0x0d, 0xec, 0xb1, 0x2c, 0xcc, 0x83, 0x19, 0x93,
	0x55, 0x7f, 0x98, 0x16, 0xdf, 0xde, 0x63, 0x58, 0x77, 0xf9, 0xb2, 0xe2, 0x5a, 0xc7, 0xe9, 0x44,
	0x91, 0x52, 0xf7, 0xf6, 0xdf, 0x37, 0x23, 0x58, 0x3f, 0x63, 0xeb, 0x33, 0xc7, 0x96, 0x27, 0x58,
	0x4b, 0xab, 0x80, 0x77, 0x07, 0xda, 0x33, 0x91, 0xa7, 0x5a, 0xf9, 0x6b, 0x24, 0xa8, 0x4d, 0x3d,
	0x9e, 0x22, 0x76, 0x24, 0xe2, 0x54, 0x07, 0xb6, 0x7d, 0xe7, 0x2e, 0xc0, 0x7c, 0x31, 0x17, 0x12,
	0xf6, 0xda, 0x85, 0x84, 0xfd, 0xa7, 0x78, 0x86, 0xbf, 0xaf, 0xc1, 0xc6, 0xaf, 0x39, 0x4b, 0xf4,
	0x94, 0x2a, 0x4e, 0x01, 0x57, 0x79, 0xa2, 0xbd, 0x3f, 0xa6, 0xfd, 0x95, 0xfa, 0x2d, 0x54, 0xd8,
	0x30, 0x7a, 0x3f, 0x87, 0x06, 0x4f, 0x23, 0x1b, 0x40, 0x5f, 0xc6, 0x8f, 0x6c, 0x68, 0xa9, 0xf9,
	0xab, 0x18, 0x4f, 0x24, 0xe2, 0xd6, 0xa5, 0x74, 0x10, 0x78, 0x28, 0x22, 0x3a, 0x46, 0x5b, 0x7a,
	0xb2, 0x66, 0xd8, 0x50, 0x43, 0x09, 0x6d, 0xb3, 0xd2, 0xd2, 0x41, 0xd7, 0x2a, 0x07, 0x7d, 0x1b,
	0x56, 0xc7, 0x2c, 0x4e, 0xe2, 0x74, 0x12, 0x2a, 0x2d, 0x39, 0x7b, 0x69, 0x1d, 0xda, 0xc0, 0xa2,
	0xc7, 0x04, 0x7a, 0x1f, 0x43, 0x23, 0x11, 0x13, 0xf2, 0x00, 0xbd, 0xfd, 0xab, 0xe6, 0x18, 0x2e,
	0xec, 0x41, 0x80, 0x3c, 0xc3, 0xff, 0xac, 0xc3, 0x6a, 0xb9, 0xbc, 0x57, 0xd1, 0xb2, 0xea, 0xe4,
	0x3e, 0xac, 0xc8, 0x3c, 0x4d, 0xe3, 0x74, 0x62, 0xe3, 0x51, 0x47, 0x1a, 0xbf, 0x92, 0x2b, 0x1e,
	0xd9, 0xca, 0xa1, 0xa5, 0x30, 0x0e, 0x92, 0x9c, 0xb6, 0x0f, 0x3b, 0x99, 0xf2, 0x58, 0x09, 0x21,
	0x4b, 0x2a, 0x66, 0xe1, 0xcb, 0x38, 0x49, 0x78, 0x64, 0xab, 0x64, 0x5d, 0x21, 0x66, 0xdf, 0x12,
	0x80, 0x96, 0x34, 0xe2, 0x2c, 0xb2, 0x05, 0x32, 0xfa, 0xc6, 0xa3, 0xcf, 0xe2, 0xc8, 0x56, 0x8c,
	0xf1, 0xb3, 0xba, 0xd5, 0x9d, 0x85, 0xad, 0xde, 0x82, 0x16, 0x97, 0x52, 0x48, 0xeb, 0x40, 0x0c,
	0x41, 0xd5, 0x01, 0x5c, 0x03, 0x8f, 0x42, 0xa6, 0xad, 0xf3, 0xe8, 0x5a, 0xe4, 0x01, 0x45, 0x04,
	0xe3, 0x38, 0x8d, 0xd5, 0xd4, 0xb4, 0x9b, 0x2b, 0x08, 0x0e, 0x7a, 0xa0, 0xbd, 0x0f, 0xa1, 0x3d,
	0xa5, 0xed, 0xa4, 0x7b, 0x58, 0x18, 0x5c, 0xb3, 0xc5, 0x81, 0x6d, 0x1b, 0xfe, 0x75, 0x1d, 0x06,
	0xc5, 0xd6, 0x3e, 0xc3, 0xd5, 0x2c, 0x9a, 0xbc, 0xeb, 0x00, 0x71, 0x56, 0x3c, 0x06, 0xd4, 0x6d,
	0x19, 0x2f, 0x73, 0x0f, 0x01, 0x1e, 0x34, 0xb1, 0xad, 0x78, 0x59, 0x88, 0x22, 0x59, 0x44, 0xc2,
	0xcd, 0x79, 0x24, 0x8c, 0x18, 0x95, 0xf9, 0x5a, 0x24, 0x3c, 0x7d, 0x97, 0x6a, 0x6c, 0xed, 0x4a,
	0x8d, 0xed, 0x17, 0x85, 0x35, 0x5a, 0x29, 0x07, 0xe0, 0x95, 0x75, 0x2e, 0xb3, 0x48, 0x3f, 0xe5,
	0x0a, 0xfe, 0xae, 0x0d, 0x1b, 0xc5, 0x04, 0xdf, 0x1c, 0x3f, 0x7f, 0xf6, 0x15, 0x53, 0x17, 0x37,
	0x63, 0x21, 0x28, 0x2e, 0x85, 0x1a, 0x1e, 0x34, 0x33, 0x36, 0x7f, 0x61, 0xc1, 0x6f, 0xda, 0x1b,
	0x39, 0x31, 0x61, 0x31, 0xee, 0x8d, 0x9c, 0x28, 0xef, 0x13, 0x67, 0x34, 0x5b, 0x74, 0x2a, 0x5b,
	0x0b, 0xa2, 0x91, 0x76, 0x3b, 0x53, 0x5a, 0xf8, 0x95, 0x76, 0xd9, 0xaf, 0xdc, 0x81, 0x75, 0xc9,
	0x95, 0x48, 0x4e, 0xc9, 0x94, 0x86, 0x34, 0xab, 0x89, 0x6d, 0x56, 0x0d, 0x8e, 0x26, 0xeb, 0x08,
	0xe7, 0xbf, 0x05, 0x03, 0xb4, 0xa1, 0xb8, 0xff, 0x86, 0xcd, 0x14, 0x61, 0xfb, 0x0e, 0x24, 0xa6,
	0xeb, 0x40, 0x86, 0x56, 0x19, 0x0e, 0xa3, 0x82, 0x5d, 0x42, 0xa8, 0xf9, 0x1a, 0x74, 0x12, 0x31,
	0x31, 0x8d, 0x46, 0x09, 0x57, 0x12, 0x31, 0xa1, 0xa6, 0x8f, 0xa0, 0x99, 0xa2, 0x3e, 0xf7, 0xca,
	0x8e, 0xba, 0x72, 0x48, 0x01, 0x31, 0x14, 0xfa, 0xd0, 0x2f, 0xe9, 0x03, 0x65, 0x80, 0xa4, 0xce,
	0xe1, 0x08, 0x0d, 0x2e, 0x39, 0x84, 0x16, 0x66, 0x80, 0x04, 0x3e, 0x44, 0x0c, 0x15, 0xc4, 0x46,
	0x1a, 0x26, 0x82, 0xb1, 0x54, 0x25, 0x89, 0x5d, 0x5b, 0x28, 0x8d, 0xdd, 0x80, 0x1e, 0x59, 0xf0,
	0x90, 0x74, 0xc2, 0x56, 0x5f, 0x81, 0x20, 0xd2, 0x0d, 0x9c, 0x39, 0x93, 0x62, 0xc4, 0x95, 0xb2,
	0x2c, 0xa6, 0xf8, 0xda, 0xb7, 0xa0, 0x61, 0xfa, 0x04, 0x36, 0x58, 0x96, 0x85, 0x4c, 0xce, 0x84,
	0x0c, 0x33, 0x29, 0xa8, 0xd2, 0xea, 0x11, 0xe3, 0x1a, 0xcb, 0xb2, 0x07, 0x88, 0x1f, 0x19, 0x18,
	0xb7, 0x88, 0xbf, 0xe2, 0xa3, 0x30, 0x8e, 0x94, 0xbf, 0x69, 0xea, 0x22, 0x48, 0x1f, 0x46, 0xca,
	0xbb, 0x57, 0x75, 0x7a, 0x5b, 0x36, 0x5e, 0x1a, 0xbd, 0xc9, 0xdf, 0x2d, 0x06, 0x5a, 0x57, 0xde,
	0x3a, 0xd0, 0xfa, 0x72, 0x1e, 0x04, 0x6c, 0x53, 0xa7, 0x5b, 0x0b, 0xe7, 0xe2, 0x74, 0x7b, 0xef,
	0x30, 0xd5, 0xf7, 0x3e, 0xb3, 0x15, 0x3c, 0x17, 0x29, 0x7c, 0xbd, 0x10, 0x29, 0x5c, 0x7d, 0xfb,
	0x21, 0x4a, 0xe1, 0xc4, 0xce, 0x2d, 0xe8, 0x95, 0x9a, 0xaa, 0x75, 0xb7, 0x86, 0xab, 0xbb, 0xfd,
	0xae, 0x56, 0x32, 0x3d, 0x38, 0xa4, 0xf7, 0x18, 0x36, 0xe7, 0x01, 0xf9, 0x6f, 0x94, 0x48, 0x43,
	0xcc, 0x3b, 0xac, 0xfb, 0xbb, 0xfa, 0x9a, 0x45, 0x04, 0x1b, 0x45, 0x9f, 0x6f, 0x94, 0x48, 0xe9,
	0xda, 0xce, 0xbd, 0x7c, 0xfd, 0x72, 0x2f, 0x5f, 0x0a, 0xc3, 0x1b, 0x6f, 0x0a, 0xc3, 0x7f, 0xb5,
	0x24, 0x06, 0x69, 0x96, 0xcf, 0xe5, 0x4d, 0xc1, 0xc7, 0xf0, 0xdf, 0xeb, 0xb0, 0xb6, 0xc0, 0xe4,
	0x3d, 0x85, 0x2b, 0x8b, 0xa3, 0x96, 0xa5, 0xbe, 0xb6, 0x74, 0x68, 0x92, 0x7b, 0x33, 0xbd, 0x08,
	0x7a, 0x3f, 0x80, 0x1f, 0xf1, 0x31, 0xcb, 0x13, 0x1d, 0x5e, 0x58, 0x6c, 0xbd, 0x1c, 0x30, 0x1d,
	0x18, 0xae, 0xc5, 0x35, 0x6f, 0x47, 0x4b, 0x71, 0xef, 0xcf, 0xa1, 0x63, 0xc7, 0x53, 0xd6, 0x65,
	0xdf, 0x5a, 0xba, 0x32, 0x47, 0x5b, 0xc3, 0x5c, 0x74, 0xda, 0xf9, 0x01, 0x06, 0x95, 0xa6, 0x25,
	0xc6, 0xf9, 0x6e, 0xb5, 0x2a, 0x7c, 0x6d, 0xcf, 0xbd, 0xad, 0x7f, 0x9d, 0x46, 0xf4, 0x08, 0x57,
	0xac, 0xb2, 0x64, 0xb7, 0xff, 0xa9, 0x06, 0xdb, 0xcb, 0x83, 0x3f, 0xef, 0x51, 0x69, 0xcd, 0xa6,
	0x92, 0xf3, 0xc9, 0x65, 0xc1, 0xe2, 0xef, 0x7d, 0xe9, 0xff, 0xdc, 0x80, 0xcd, 0x25, 0x07, 0x4b,
	0x4f, 0xd1, 0x32, 0x8e, 0x26, 0x2e, 0xca, 0xb4, 0x14, 0x45, 0x04, 0x2c, 0x8d, 0x4e, 0xc4, 0x2b,
	0x4c, 0x29, 0xac, 0x27, 0xb6, 0x88, 0xa9, 0x98, 0x4c, 0x59, 0x2c, 0xb3, 0x38, 0x35, 0x21, 0xaa,
	0x09, 0x73, 0x7a, 0x16, 0xa3, 0x37, 0xa5, 0x3f, 0x81, 0xab, 0x49, 0x9c, 0xbe, 0x0c, 0x13, 0x31,
	0x62, 0x49, 0x18, 0x67, 0xa7, 0xf7, 0x0a, 0xc7, 0x6e, 0x7c, 0xf5, 0x16, 0x36, 0x3f, 0xc1, 0xd6,
	0xc3, 0xec, 0xf4, 0x9e, 0xf3, 0xf1, 0xf7, 0x61, 0x67, 0xb1, 0x5b, 0x26, 0xf9, 0x38, 0x7e, 0x15,
	0x26, 0x3c, 0xb5, 0x1e, 0x7d, 0xbb, 0xd2, 0xf3, 0x88, 0x9a, 0x9f, 0xf0, 0xd4, 0x1b, 0x42, 0x2b,
	0xa3, 0xb4, 0xa5, 0x6d, 0xa3, 0x90, 0x94, 0x69, 0xca, 0x5a, 0x9e, 0xb2, 0x2c, 0x30, 0x4d, 0x54,
	0xab, 0xb1, 0x82, 0xe1, 0xbe, 0xae, 0xd8, 0xd2, 0xb5, 0x81, 0xbe, 0xe5, 0xe7, 0xde, 0x23, 0xd8,
	0x56, 0x7c, 0x24, 0xd2, 0x88, 0xc9, 0xf3, 0x70, 0x1e, 0x8d, 0x70, 0xe5, 0x77, 0xec, 0xfd, 0x76,
	0xfb, 0x6d, 0x97, 0x1c, 0x6c, 0x15, 0xfc, 0x87, 0x2e, 0x54, 0xe1, 0xca, 0xfb, 0x06, 0xfc, 0xf2,
	0x38, 0x73, 0xf1, 0x39, 0x26, 0x45, 0xcb, 0x47, 0xda, 0x2e, 0x8d, 0x54, 0x6c, 0x09, 0x57, 0xc3,
	0x7f, 0xa9, 0xc3, 0xf6, 0xf2, 0x4b, 0x44, 0x2f, 0x42, 0xf6, 0xdc, 0xe7, 0x4f, 0xce, 0xe0, 0x20,
	0x93, 0xff, 0x4d, 0x98, 0xe6, 0x67, 0xec, 0xdc, 0x85, 0x11, 0x96, 0xf4, 0xf6, 0x60, 0x73, 0x92,
	0x88, 0x93, 0xc5, 0xd3, 0x31, 0x51, 0xc5, 0x86, 0x69, 0x2a, 0x1f, 0xcd, 0xa7, 0xb0, 0x5d, 0xe6,
	0x2f, 0x1d, 0x8b, 0x29, 0x72, 0x6e, 0xce, 0xbb, 0xcc, 0xcf, 0xa4, 0x1a, 0xd2, 0xb5, 0x16, 0x43,
	0xba, 0x21, 0x0c, 0xe2, 0xac, 0x3c, 0x54, 0xdb, 0x14, 0xa4, 0xe2, 0x6c, 0x3e, 0xc4, 0x4d, 0xe8,
	0xd3, 0x84, 0x4e, 0x0c, 0x73, 0x66, 0x3d, 0xc4, 0x1e, 0x5b, 0x51, 0xd0, 0x11, 0xb3, 0x51, 0x31,
	0x4d, 0xc7, 0x3a, 0x62, 0x36, 0xb2, 0xf3, 0x0c, 0xff, 0xad, 0x06, 0x30, 0x37, 0xc9, 0x4b, 0x8b,
	0x54, 0x4b, 0x6a, 0xaa, 0xa5, 0x07, 0x90, 0x86, 0x0d, 0xfd, 0xcd, 0x03, 0xc8, 0x2e, 0xf4, 0x22,
	0xae, 0x74, 0x9c, 0x9a, 0x07, 0x67, 0xa3, 0xd0, 0x65, 0xa8, 0x14, 0x4e, 0xb4, 0x2a, 0xe1, 0x84,
	0x07, 0x4d, 0xba, 0x31, 0x26, 0xcc, 0xa2, 0x6f, 0x8c, 0xfc, 0xe4, 0x99, 0x7d, 0xd4, 0xae, 0x4b,
	0xcc, 0xa1, 0x7b, 0x99, 0x14, 0x19, 0x9b, 0x94, 0x9f, 0xb3, 0xcb, 0xd0, 0xf0, 0xbf, 0x56, 0x0a,
	0xeb, 0x1e, 0x70, 0xbb, 0x26, 0xb7, 0xfe, 0x5a, 0x69, 0xfd, 0x26, 0xa6, 0xac, 0x17, 0x31, 0xe5,
	0x67, 0xf3, 0x98, 0xb2, 0xf1, 0xc6, 0xc4, 0xad, 0x88, 0x37, 0x31, 0xf9, 0x1e, 0x89, 0xa2, 0xe2,
	0x67, 0x88, 0xd7, 0x4a, 0x48, 0x1a, 0xc9, 0x4e, 0x12, 0x4e, 0x6a, 0x62, 0x93, 0x15, 0x30, 0x10,
	0xea, 0x86, 0x77, 0x13, 0x9a, 0x71, 0xc6, 0x66, 0x24, 0x70, 0x6f, 0x7f, 0x50, 0xdc, 0x82, 0xc3,
	0xa3, 0x07, 0x4f, 0x03, 0x6a, 0xc2, 0xa0, 0x2b, 0x4e, 0x35, 0x97, 0x29, 0x4b, 0xec, 0x0f, 0x3f,
	0x0a, 0x1a, 0x93, 0x28, 0xa6, 0x35, 0x1b, 0x4d, 0x71, 0x40, 0x0a, 0x22, 0x3b, 0x41, 0x09, 0x41,
	0x85, 0x8f, 0xd3, 0x09, 0xe9, 0x01, 0x98, 0xb4, 0xcc, 0x92, 0xde, 0xe7, 0xd0, 0x33, 0xfe, 0xd5,
	0x3c, 0xc0, 0x9a, 0x58, 0xd2, 0x2f, 0xe6, 0xb7, 0x3e, 0x98, 0x8f, 0xb9, 0xe4, 0xe9, 0x88, 0x53,
	0x85, 0x7a, 0x1c, 0x4f, 0xe8, 0x6d, 0xf6, 0x46, 0xd1, 0x55, 0xa4, 0xc9, 0x39, 0x45, 0x97, 0x1d,
	0xc7, 0xf0, 0x3c, 0x4d, 0xce, 0xbd, 0xaf, 0x2b, 0x25, 0xee, 0x01, 0x5d, 0xf0, 0xdb, 0x15, 0xb7,
	0xe5, 0x0e, 0x6a, 0x1e, 0x56, 0x58, 0xeb, 0x5f, 0xae, 0x84, 0x7f, 0x09, 0x2b, 0xc2, 0xbc, 0x5b,
	0xf8, 0xab, 0x34, 0xc6, 0x70, 0xf9, 0x18, 0xf6, 0x71, 0xc3, 0x0c, 0xe0, 0xba, 0x78, 0x9f, 0x17,
	0xc9, 0x8c, 0xa9, 0x38, 0xdc, 0x5c, 0xde, 0x79, 0x59, 0x81, 0xe5, 0x23, 0x68, 0x65, 0x1c, 0x97,
	0xbe, 0x4e, 0x3d, 0x37, 0x8a, 0x5d, 0x39, 0xe2, 0x5c, 0x1e, 0xa6, 0x63, 0x11, 0x98, 0x76, 0xf4,
	0xce, 0x8a, 0xcb, 0xd3, 0x78, 0xc4, 0x95, 0xbf, 0xb1, 0xc4, 0x3b, 0x17, 0xb3, 0x1c, 0x5b, 0x2e,
	0xeb, 0xe2, 0x5c, 0xa7, 0x9d, 0xef, 0x61, 0x6d, 0x61, 0x07, 0x96, 0x38, 0xb9, 0x9f, 0x57, 0x9d,
	0xdc, 0xb6, 0x99, 0xc2, 0x79, 0x38, 0x37, 0x47, 0xf9, 0x01, 0xf6, 0x3e, 0xf4, 0xcb, 0x9b, 0xf2,
	0x4e, 0x8f, 0xb7, 0x3f, 0xe1, 0xdd, 0xf7, 0x3b, 0x18, 0x54, 0x04, 0x5d, 0xd2, 0xf9, 0x93, 0xaa,
	0x2c, 0x5b, 0xc5, 0xd6, 0xda, 0x8e, 0x66, 0x77, 0xe7, 0xbe, 0xfa, 0x1f, 0x6a, 0xb0, 0xbe, 0x28,
	0xe9, 0xd2, 0xdb, 0xbd, 0x60, 0xfb, 0xeb, 0x17, 0x6c, 0xff, 0x82, 0x59, 0x6c, 0x2c, 0x9a, 0x45,
	0x6b, 0x5a, 0x3f, 0x5b, 0xf0, 0xcc, 0x68, 0x5a, 0x3f, 0xab, 0xb2, 0xdc, 0x5b, 0x30, 0xe1, 0x64,
	0x7d, 0x9d, 0x71, 0xfd, 0xd7, 0x66, 0x11, 0xb5, 0x98, 0x57, 0x69, 0xef, 0x23, 0x58, 0xa3, 0xca,
	0x4a, 0x18, 0xe5, 0x59, 0x12, 0x8f, 0x30, 0x07, 0x35, 0x2f, 0x7a, 0xe6, 0xc7, 0x4f, 0x07, 0x0e,
	0x2d, 0x19, 0x91, 0x7a, 0xc5, 0x88, 0x14, 0x26, 0xa7, 0x51, 0x36, 0x39, 0x0b, 0xa6, 0xa5, 0xf9,
	0x5a, 0xd3, 0xd2, 0x7a, 0x3b, 0xd3, 0xd2, 0xbe, 0xd4, 0xb4, 0xac, 0x5c, 0x66, 0x5a, 0x3a, 0x55,
	0xd3, 0xb2, 0x60, 0x1f, 0xba, 0x17, 0xec, 0xc3, 0x82, 0xed, 0x81, 0x77, 0xb0, 0x3d, 0xf7, 0xe7,
	0x36, 0xa1, 0x47, 0x17, 0x6e, 0xb7, 0x72, 0xe1, 0xcc, 0x96, 0xbf, 0xc6, 0x22, 0xcc, 0xcb, 0x1b,
	0xfd, 0x72, 0x79, 0xa3, 0xda, 0x75, 0x59, 0x79, 0xe3, 0x0f, 0x73, 0x9d, 0x86, 0x63, 0xd8, 0xaa,
	0xac, 0x2d, 0xe0, 0x3f, 0xe6, 0x5c, 0x69, 0xef, 0x3e, 0xac, 0xba, 0x1c, 0xc3, 0x78, 0x25, 0x9b,
	0xb3, 0x6c, 0x2e, 0x91, 0x27, 0x18, 0xa4, 0x15, 0x65, 0xf4, 0xa0, 0xf9, 0xac, 0xe4, 0xd8, 0xe9,
	0x07, 0x0a, 0x0f, 0xe0, 0xca, 0xc2, 0x3c, 0xf6, 0x75, 0x7f, 0x49, 0x15, 0xe6, 0x8c, 0xc9, 0xa2,
	0xc8, 0xd7, 0x0d, 0x1c, 0x39, 0x94, 0xb0, 0xea, 0x86, 0x10, 0x69, 0xca, 0x47, 0xba, 0xfa, 0x04,
	0x54, 0x5b, 0x7c, 0x02, 0xfa, 0x0a, 0xd6, 0x8a, 0xdb, 0x6a, 0xf3, 0xc0, 0x37, 0x46, 0xf0, 0xab,
	0xae, 0x87, 0xd1, 0x8f, 0xe1, 0x63, 0xd8, 0xb0, 0x73, 0x1e, 0xc4, 0x6a, 0xf4, 0x56, 0xd3, 0x16,
	0x4f, 0xea, 0xf5, 0xf2, 0x8f, 0x18, 0x1f, 0x17, 0xf2, 0xdb, 0xb7, 0xb5, 0xd2, 0x0b, 0xbc, 0xb9,
	0x78, 0xb5, 0xf2, 0xc5, 0x33, 0xbf, 0x01, 0x3a, 0x11, 0xca, 0x0d, 0xe3, 0xc8, 0xa1, 0x28, 0xfd,
	0x1a, 0x52, 0x1d, 0xc9, 0x3c, 0xe5, 0x01, 0xc7, 0x48, 0xdb, 0xfb, 0x23, 0xf0, 0xe6, 0x7e, 0x2d,
	0x9c, 0xbf, 0x22, 0x37, 0x30, 0xb8, 0x9c, 0xb7, 0x1c, 0xd8, 0xf7, 0xe4, 0x8f, 0x60, 0x4d, 0x65,
	0x8c, 0x7e, 0x04, 0x38, 0x4a, 0x58, 0x3c, 0xb3, 0x55, 0xaf, 0x66, 0xb0, 0x4a, 0x70, 0xe0, 0xd0,
	0xe1, 0x5f, 0xd5, 0xec, 0x8f, 0x32, 0x2a, 0xb3, 0x1d, 0xc0, 0x2a, 0x55, 0xac, 0xaa, 0x33, 0xf5,
	0xf6, 0xaf, 0x97, 0x9e, 0x74, 0x2e, 0xbe, 0x6f, 0x07, 0x03, 0xd3, 0xe9, 0x9d, 0x17, 0xf1, 0xab,
	0x22, 0x9b, 0xaa, 0xac, 0xe2, 0xe3, 0x22, 0x6d, 0x5f, 0x94, 0xd8, 0xe5, 0xe7, 0x6e, 0xaa, 0xe1,
	0x3f, 0xd6, 0xa1, 0x45, 0xab, 0x5a, 0xf6, 0xa8, 0x39, 0x7f, 0xaa, 0xae, 0x2f, 0x3c, 0x55, 0x57,
	0x5e, 0x3c, 0x1b, 0x6f, 0x78, 0xf1, 0x6c, 0x5e, 0x7c, 0xf1, 0x2c, 0x15, 0x15, 0x5b, 0xd5, 0x37,
	0x1f, 0xf7, 0x4c, 0xd7, 0xbe, 0xe4, 0x99, 0x6e, 0xe5, 0xe2, 0x33, 0xdd, 0xdd, 0xc2, 0xc0, 0x74,
	0xca, 0xd5, 0x75, 0x12, 0xed, 0xff, 0xb9, 0x6e, 0x7a, 0xd2, 0xa6, 0x20, 0xf5, 0xd3, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x03, 0x24, 0xf2, 0x77, 0x2f, 0x00, 0x00,
}
