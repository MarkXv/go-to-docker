// tangfeixiong <tangfx128@gmail.com>
//
// https://github.com/moby/moby/bolb/master/api/types/mount/mount.go

syntax = "proto3";
package mount;

// Mount represents a mount (volume).
// type Mount struct
message Mount {
	// Type Type `json:",omitempty"`
	string type = 1; // "bind", "volume", "tmpfs"
	// Source specifies the name of the mount. Depending on mount type, this may be a volume name or a host path, or even ignored.
	// Source is not supported for tmpfs (must be an empty value)
	// Source string `json:",omitempty"`
	string source = 2; 
	// Target string `json:",omitempty"`
	string target = 3;
	// ReadOnly bool `json:",omitempty"`
	bool read_only= 4;
	// Consistency consistency `json:",omitempty"`
	// Consistency represents the consistency requirements of a mount. // type Consistency string
	string consistency = 5; // "consistent", "cached", "delegated", "default"

    // BindOptions *BindOptions `json:",omitempty"`
	BindOptions   bind_options = 6;
	// VolumeOptions *VolumeOptions `json:",omitempty"`
	VolumeOptions volume_options = 7;
	// TmpfsOptions *TmpfsOptions `json:",omitempty"`
	TmpfsOptions  tmpfs_options = 8;
}

// BindOptions defines options specific to mounts of type "bind".
// type BindOptions struct
message BindOptions {
	// Propagation Propagation `json",omitempty"`
	// Propagation represents the propagation of a mount. // type Propagation string
	string propagation = 1; // "rprivate", "private", "rshared", "shared", "rslave", "slave"
}

// VolumeOptions represents the options for a mount of type volume.
// type VolumeOptions struct
message VolumeOptions {
	// NoCopy bool `json:",omitempty"`
	bool no_copy = 1;
	// Labels map[string]string `json:",omitempty"`
	map<string, string> labels = 2;
	// DriverConfig *Driver `json:",omitempty"`
	Driver driver_config = 3;
}

// Driver represents a volume driver.
// type Driver struct
message Driver {
	// Name string `json:",omitempty"`
	string name = 1;
	// Options map[string]string `json:",omitempty"`
	map<string, string> options = 2;
}

// TmpfsOptions defines options specific to mounts of type "tmpfs".
// type TmpfsOptions struct
message TmpfsOptions {
	// Size sets the size of the tmpfs, in bytes.
	//
	// This will be converted to an operating system specific value
	// depending on the host. For example, on linux, it will be converted to
	// use a 'k', 'm' or 'g' syntax. BSD, though not widely supported with
	// docker, uses a straight byte value.
	//
	// Percentages are not supported.
	// SizeBytes int84 `json:",omitempty"`
	int64 size_bytes = 1;
	// Mode of the tmpfs upon creation
	// Mode os.FileMode `json:",omitempty"`
	uint32 mode = 2;

	// TODO(stevvooe): There are several more tmpfs flags, specified in the
	// daemon, that are accepted. Only the most basic are added for now.
	//
	// From docker/docker/pkg/mount/flags.go:
	//
	// var validFlags = map[string]bool{
	// 	"":          true,
	// 	"size":      true, X
	// 	"mode":      true, X
	// 	"uid":       true,
	// 	"gid":       true,
	// 	"nr_inodes": true,
	// 	"nr_blocks": true,
	// 	"mpol":      true,
	// }
	//
	// Some of these may be straightforward to add, but others, such as
	// uid/gid have implications in a clustered system.
}