// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/moby/container/container.proto

/*
Package container is a generated protocol buffer package.

It is generated from these files:
	pb/moby/container/container.proto

It has these top-level messages:
	HealthConfig
	Config
	ContainerCreateCreatedBody
	DeviceMapping
	RestartPolicy
	LogConfig
	Resources
	HostConfig
*/
package container

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import blkiodev "github.com/tangfeixiong/go-to-docker/pb/moby/blkiodev"
import units "github.com/tangfeixiong/go-to-docker/pb/moby/units"
import nat "github.com/tangfeixiong/go-to-docker/pb/moby/nat"
import mount "github.com/tangfeixiong/go-to-docker/pb/moby/mount"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// HealthConfig holds configuration settings for the HEALTHCHECK feature.
// type HealthConfig struct
type HealthConfig struct {
	// Test []string `json:",omitempty"`
	// Test is the test to perform to check that the container is healthy.
	// An empty slice means to inherit the default.
	// The options are:
	// {} : inherit healthcheck
	// {"NONE"} : disable healthcheck
	// {"CMD", args...} : exec arguments directly
	// {"CMD-SHELL", command} : run command with system's default shell
	Test []string `protobuf:"bytes,1,rep,name=test" json:"test,omitempty"`
	// Zero means to inherit. Durations are expressed as integer nanoseconds.
	// Interval time.Duration `json:",omitempty"` // Interval is the time to wait between checks.
	Interval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Timeout time.Duration `json:",omitempty"` // Timeout is the time to wait before considering the check to have hung.
	Timeout *google_protobuf.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
	// StartPeriod time.Duration `json:",omitempty"` // The start period for the container to initialize before the retries starts to count down.
	StartPeriod *google_protobuf.Duration `protobuf:"bytes,4,opt,name=start_period,json=startPeriod" json:"start_period,omitempty"`
	// Retries int `json:",omitempty"`// Retries is the number of consecutive failures needed to consider a container as unhealthy. Zero means inherit.
	Retries int32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (m *HealthConfig) Reset()                    { *m = HealthConfig{} }
func (m *HealthConfig) String() string            { return proto.CompactTextString(m) }
func (*HealthConfig) ProtoMessage()               {}
func (*HealthConfig) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{0} }

func (m *HealthConfig) GetTest() []string {
	if m != nil {
		return m.Test
	}
	return nil
}

func (m *HealthConfig) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthConfig) GetTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthConfig) GetStartPeriod() *google_protobuf.Duration {
	if m != nil {
		return m.StartPeriod
	}
	return nil
}

func (m *HealthConfig) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// Config contains the configuration data about a container.
// It should hold only portable information about the container.
// Here, "portable" means "independent from the host we are running on".
// Non-portable information *should* appear in HostConfig.
// All fields added to this struct must be marked 'omitempty' to keep getting
// predictable hashes from the old 'v1Compatibility' configuration.
// type Config struct
type Config struct {
	// Hostname string // Hostname
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Domainname string // Domainname
	Domainname string `protobuf:"bytes,2,opt,name=domainname,proto3" json:"domainname,omitempty"`
	// User string // User that will run the command(s) inside the container, also support user:group
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// AttachStdin bool // Attach the standard input, makes possible user interaction
	AttachStdin bool `protobuf:"varint,4,opt,name=attach_stdin,json=attachStdin,proto3" json:"attach_stdin,omitempty"`
	// AttachStdout bool // Attach the standard output
	AttachStdout bool `protobuf:"varint,5,opt,name=attach_stdout,json=attachStdout,proto3" json:"attach_stdout,omitempty"`
	// AttachStderr bool // Attach the standard error
	AttachStderr bool `protobuf:"varint,6,opt,name=attach_stderr,json=attachStderr,proto3" json:"attach_stderr,omitempty"`
	// ExposedPorts nat.PortSet `json",omitempty"` // List of exposed ports
	ExposedPorts *nat.PortSet `protobuf:"bytes,7,opt,name=exposed_ports,json=exposedPorts" json:"exposed_ports,omitempty"`
	// Tty bool // Attach standard streams to a tty, including stdin if it is not closed.
	Tty bool `protobuf:"varint,8,opt,name=tty,proto3" json:"tty,omitempty"`
	// OpenStdin // Open stdin
	OpenStdin bool `protobuf:"varint,9,opt,name=open_stdin,json=openStdin,proto3" json:"open_stdin,omitempty"`
	// StdinOnce bool // If true, close stdin after the 1 attached client disconnects.
	StdinOnce bool `protobuf:"varint,10,opt,name=stdin_once,json=stdinOnce,proto3" json:"stdin_once,omitempty"`
	// Env []string  // List of environment variable to set in the container
	Env []string `protobuf:"bytes,11,rep,name=env" json:"env,omitempty"`
	// Cmd strslice.StrSlice // Command to run when starting the container
	// StrSlice represents a string or an array of strings. We need to override the json decoder to accept both options. // type StrSlice []string
	Cmd []string `protobuf:"bytes,12,rep,name=cmd" json:"cmd,omitempty"`
	// Healthcheck *HealthConfig `json:",omitempty"` // Healthcheck describes how to check the container is healthy
	Healthcheck *HealthConfig `protobuf:"bytes,13,opt,name=healthcheck" json:"healthcheck,omitempty"`
	// ArgsEscaped bool `json",omitempty"` // True if command is already escaped (Windows specific)
	ArgsEscaped bool `protobuf:"varint,14,opt,name=args_escaped,json=argsEscaped,proto3" json:"args_escaped,omitempty"`
	// Image string // Name of the image as it was passed by the operator (e.g. could be symbolic)
	Image string `protobuf:"bytes,15,opt,name=image,proto3" json:"image,omitempty"`
	// Volumes map[string]struct{} // List of volumes (mounts) used for the container
	Volumes map[string]*Config_VoidStruct `protobuf:"bytes,16,rep,name=volumes" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// WorkingDir string // Current directory (PWD) in the command will be launched
	WorkingDir string `protobuf:"bytes,17,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// Entrypoint strslice.StrSlice // Entrypoint to run when starting the container
	Entrypoint []string `protobuf:"bytes,18,rep,name=entrypoint" json:"entrypoint,omitempty"`
	// NetworkDisabled bool `json:",omitempty"` // Is network disabled
	NetworkDisabled bool `protobuf:"varint,19,opt,name=network_disabled,json=networkDisabled,proto3" json:"network_disabled,omitempty"`
	// MacAddress string `json:",omitempty"` // Mac Address of the container
	MacAddress string `protobuf:"bytes,20,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// OnBuild []string // ONBUILD metadata that were defined on the image Dockerfile
	OnBuild []string `protobuf:"bytes,21,rep,name=on_build,json=onBuild" json:"on_build,omitempty"`
	// Labels map[string]string // List of labels set to this container
	Labels map[string]string `protobuf:"bytes,22,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// StopSignal string `json:",omitempty"` // Signal to stop a container
	StopSignal string `protobuf:"bytes,23,opt,name=stop_signal,json=stopSignal,proto3" json:"stop_signal,omitempty"`
	// StopTimeout *int `json:",omitempty"` // Timeout (in seconds) to stop a container
	StopTimeout *Config_Int32Struct `protobuf:"bytes,24,opt,name=stop_timeout,json=stopTimeout" json:"stop_timeout,omitempty"`
	// Shell strslice.StrSlice `json:",omitempty"` // Shell for shell-form of RUN, CMD, ENTRYPOINT
	Shell []string `protobuf:"bytes,25,rep,name=shell" json:"shell,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{1} }

func (m *Config) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Config) GetDomainname() string {
	if m != nil {
		return m.Domainname
	}
	return ""
}

func (m *Config) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Config) GetAttachStdin() bool {
	if m != nil {
		return m.AttachStdin
	}
	return false
}

func (m *Config) GetAttachStdout() bool {
	if m != nil {
		return m.AttachStdout
	}
	return false
}

func (m *Config) GetAttachStderr() bool {
	if m != nil {
		return m.AttachStderr
	}
	return false
}

func (m *Config) GetExposedPorts() *nat.PortSet {
	if m != nil {
		return m.ExposedPorts
	}
	return nil
}

func (m *Config) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *Config) GetOpenStdin() bool {
	if m != nil {
		return m.OpenStdin
	}
	return false
}

func (m *Config) GetStdinOnce() bool {
	if m != nil {
		return m.StdinOnce
	}
	return false
}

func (m *Config) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Config) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Config) GetHealthcheck() *HealthConfig {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *Config) GetArgsEscaped() bool {
	if m != nil {
		return m.ArgsEscaped
	}
	return false
}

func (m *Config) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Config) GetVolumes() map[string]*Config_VoidStruct {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Config) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *Config) GetEntrypoint() []string {
	if m != nil {
		return m.Entrypoint
	}
	return nil
}

func (m *Config) GetNetworkDisabled() bool {
	if m != nil {
		return m.NetworkDisabled
	}
	return false
}

func (m *Config) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Config) GetOnBuild() []string {
	if m != nil {
		return m.OnBuild
	}
	return nil
}

func (m *Config) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Config) GetStopSignal() string {
	if m != nil {
		return m.StopSignal
	}
	return ""
}

func (m *Config) GetStopTimeout() *Config_Int32Struct {
	if m != nil {
		return m.StopTimeout
	}
	return nil
}

func (m *Config) GetShell() []string {
	if m != nil {
		return m.Shell
	}
	return nil
}

type Config_VoidStruct struct {
}

func (m *Config_VoidStruct) Reset()                    { *m = Config_VoidStruct{} }
func (m *Config_VoidStruct) String() string            { return proto.CompactTextString(m) }
func (*Config_VoidStruct) ProtoMessage()               {}
func (*Config_VoidStruct) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{1, 2} }

type Config_Int32Struct struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Config_Int32Struct) Reset()                    { *m = Config_Int32Struct{} }
func (m *Config_Int32Struct) String() string            { return proto.CompactTextString(m) }
func (*Config_Int32Struct) ProtoMessage()               {}
func (*Config_Int32Struct) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{1, 3} }

func (m *Config_Int32Struct) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// ContainerCreateCreatedBody OK response to ContainerCreate operation
// type ContainerCreateCreatedBody struct
type ContainerCreateCreatedBody struct {
	// The ID of the created container. Required: true
	// ID string `json:"Id"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Warnings encountered when creating the container. Required: true
	// Warnings []string `json:"Warnings"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *ContainerCreateCreatedBody) Reset()         { *m = ContainerCreateCreatedBody{} }
func (m *ContainerCreateCreatedBody) String() string { return proto.CompactTextString(m) }
func (*ContainerCreateCreatedBody) ProtoMessage()    {}
func (*ContainerCreateCreatedBody) Descriptor() ([]byte, []int) {
	return fileDescriptorContainer, []int{2}
}

func (m *ContainerCreateCreatedBody) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerCreateCreatedBody) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

// DeviceMapping represents the device mapping between the host and the container.
// type DeviceMapping struct
type DeviceMapping struct {
	// PathOnHost string
	PathOnHost string `protobuf:"bytes,1,opt,name=path_on_host,json=pathOnHost,proto3" json:"path_on_host,omitempty"`
	// PathInContainer string
	PathInContainer string `protobuf:"bytes,2,opt,name=path_in_container,json=pathInContainer,proto3" json:"path_in_container,omitempty"`
	// CgroupPermissions string
	CgroupPermissions string `protobuf:"bytes,3,opt,name=cgroup_permissions,json=cgroupPermissions,proto3" json:"cgroup_permissions,omitempty"`
}

func (m *DeviceMapping) Reset()                    { *m = DeviceMapping{} }
func (m *DeviceMapping) String() string            { return proto.CompactTextString(m) }
func (*DeviceMapping) ProtoMessage()               {}
func (*DeviceMapping) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{3} }

func (m *DeviceMapping) GetPathOnHost() string {
	if m != nil {
		return m.PathOnHost
	}
	return ""
}

func (m *DeviceMapping) GetPathInContainer() string {
	if m != nil {
		return m.PathInContainer
	}
	return ""
}

func (m *DeviceMapping) GetCgroupPermissions() string {
	if m != nil {
		return m.CgroupPermissions
	}
	return ""
}

// RestartPolicy represents the restart policies of the container.
// type RestartPolicy struct
type RestartPolicy struct {
	// Name string
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MaximumRetryCount int
	MaximumRetryCount int32 `protobuf:"varint,2,opt,name=maximum_retry_count,json=maximumRetryCount,proto3" json:"maximum_retry_count,omitempty"`
}

func (m *RestartPolicy) Reset()                    { *m = RestartPolicy{} }
func (m *RestartPolicy) String() string            { return proto.CompactTextString(m) }
func (*RestartPolicy) ProtoMessage()               {}
func (*RestartPolicy) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{4} }

func (m *RestartPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RestartPolicy) GetMaximumRetryCount() int32 {
	if m != nil {
		return m.MaximumRetryCount
	}
	return 0
}

// LogConfig represents the logging configuration of the container.
// type LogConfig struct
type LogConfig struct {
	// Type string // "", "blocking", "non-blocking"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Config map[string]string
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LogConfig) Reset()                    { *m = LogConfig{} }
func (m *LogConfig) String() string            { return proto.CompactTextString(m) }
func (*LogConfig) ProtoMessage()               {}
func (*LogConfig) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{5} }

func (m *LogConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogConfig) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

// Resources contains container's resources (cgroups config, ulimits...)
// to see https://github.com/moby/moby/blob/master/api/types/container/host_config.go
type Resources struct {
	// Applicable to all platforms
	//
	// CPUShares int64 `json:"CpuShares"` // CPU shares (relative weight vs. other containers)
	CpuShares int64 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	// Memory int64 // Memory limit (in bytes)
	Memory int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// NanoCPUs int64 `json:"NonoCpus"` // CPU quota in units of 10<sup>-9</sup> CPUs.
	NanoCpus int64 `protobuf:"varint,3,opt,name=nano_cpus,json=nanoCpus,proto3" json:"nano_cpus,omitempty"`
	// Applicable to UNIX platforms
	//
	// CgroupParent string // Parent cgroup.
	CgroupParent string `protobuf:"bytes,4,opt,name=cgroup_parent,json=cgroupParent,proto3" json:"cgroup_parent,omitempty"`
	// BlkioWeight uint16 // Block IO weight (relative weight vs. other containers)
	BlkioWeight int32 `protobuf:"varint,5,opt,name=blkio_weight,json=blkioWeight,proto3" json:"blkio_weight,omitempty"`
	// BlkioWeightDevice []*blkiodev.WeightDevice
	BlkioWeightDevice []*blkiodev.WeightDevice `protobuf:"bytes,6,rep,name=blkio_weight_device,json=blkioWeightDevice" json:"blkio_weight_device,omitempty"`
	// BlkioDeviceReadBps []*blkiodev.ThrottleDevice
	BlkioDeviceReadBps []*blkiodev.ThrottleDevice `protobuf:"bytes,7,rep,name=blkio_device_read_bps,json=blkioDeviceReadBps" json:"blkio_device_read_bps,omitempty"`
	// BlkioDeviceWriteBps []*blkiodev.ThrottleDevice
	BlkioDeviceWriteBps []*blkiodev.ThrottleDevice `protobuf:"bytes,8,rep,name=blkio_device_write_bps,json=blkioDeviceWriteBps" json:"blkio_device_write_bps,omitempty"`
	// BlkioDeviceReadIOps []*blkiodev.ThrottleDevice
	BlkioDeviceReadIops []*blkiodev.ThrottleDevice `protobuf:"bytes,9,rep,name=blkio_device_read_iops,json=blkioDeviceReadIops" json:"blkio_device_read_iops,omitempty"`
	// BlkioDeviceWriteIOps []*blkiodev.ThrottleDevice
	BlkioDeviceWriteIops []*blkiodev.ThrottleDevice `protobuf:"bytes,10,rep,name=blkio_device_write_iops,json=blkioDeviceWriteIops" json:"blkio_device_write_iops,omitempty"`
	// CPUPeriod int64 `json:"CpuPeriod"` // CPU CFS (Completely Fair Scheduler) period
	CpuPeriod int64 `protobuf:"varint,11,opt,name=cpu_period,json=cpuPeriod,proto3" json:"cpu_period,omitempty"`
	// CPUQuota int64 `json:"CpuQuota"` // CPU CFS (Completely Fair Scheduler) quota
	CpuQuota int64 `protobuf:"varint,12,opt,name=cpu_quota,json=cpuQuota,proto3" json:"cpu_quota,omitempty"`
	// CPURealtimePeriod int64 `json:"CpuRealtimePeriod"` // CPU real-time period
	CpuRealtimePeriod int64 `protobuf:"varint,13,opt,name=cpu_realtime_period,json=cpuRealtimePeriod,proto3" json:"cpu_realtime_period,omitempty"`
	// CPURealtimeRuntime int64 `json:"CpuRealtimeRuntime"` // CPU real-time runtime
	CpuRealtimeRuntime int64 `protobuf:"varint,14,opt,name=cpu_realtime_runtime,json=cpuRealtimeRuntime,proto3" json:"cpu_realtime_runtime,omitempty"`
	// CpusetCpus string // CpusetCpus 0-2, 0,1
	CpusetCpus string `protobuf:"bytes,15,opt,name=cpuset_cpus,json=cpusetCpus,proto3" json:"cpuset_cpus,omitempty"`
	// CpusetMems string // CpusetMems 0-2, 0,1
	CpusetMems string `protobuf:"bytes,16,opt,name=cpuset_mems,json=cpusetMems,proto3" json:"cpuset_mems,omitempty"`
	// Devices []DeviceMapping // List of devices to map inside the container
	Devices []*DeviceMapping `protobuf:"bytes,17,rep,name=devices" json:"devices,omitempty"`
	// DeviceCgroupRules []string // List of rule to be added to the device cgroup
	DeviceCgroupRules []string `protobuf:"bytes,18,rep,name=device_cgroup_rules,json=deviceCgroupRules" json:"device_cgroup_rules,omitempty"`
	// DiskQuota int64 // Disk limit (in bytes)
	DiskQuota int64 `protobuf:"varint,19,opt,name=disk_quota,json=diskQuota,proto3" json:"disk_quota,omitempty"`
	// KernelMemory int64 // Kernel memory limit (in bytes)
	KernelMemory int64 `protobuf:"varint,20,opt,name=kernel_memory,json=kernelMemory,proto3" json:"kernel_memory,omitempty"`
	// MemoryReservation int64 // Memory soft limit (in bytes)
	MemoryReservation int64 `protobuf:"varint,21,opt,name=memory_reservation,json=memoryReservation,proto3" json:"memory_reservation,omitempty"`
	// MemorySwap int64 // Total memory usage (memory + swap); set -1 to enable unlimited swap
	MemorySwap int64 `protobuf:"varint,22,opt,name=memory_swap,json=memorySwap,proto3" json:"memory_swap,omitempty"`
	// MemorySwappiness *int64 // Tuning container memory swappiness behaviour
	MemorySwappiness *Resources_Int64Struct `protobuf:"bytes,23,opt,name=memory_swappiness,json=memorySwappiness" json:"memory_swappiness,omitempty"`
	// OomKillDisable *bool // Whether to disable OOM Killer or not
	OomKillDisable *Resources_BoolStruct `protobuf:"bytes,24,opt,name=oom_kill_disable,json=oomKillDisable" json:"oom_kill_disable,omitempty"`
	// PidsLimit int64 // Setting pids limit for a container
	PidsLimit int64 `protobuf:"varint,25,opt,name=pids_limit,json=pidsLimit,proto3" json:"pids_limit,omitempty"`
	// Ulimits []*units.Ulimit // List of ulimits to be set in the container
	Ulimits []*units.Ulimit `protobuf:"bytes,26,rep,name=ulimits" json:"ulimits,omitempty"`
	// Applicable to Windows
	//
	// CPUCount int64 // CPU count
	CpuCount int64 `protobuf:"varint,27,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// CPUPercent int64 // CPU percent
	CpuPercent int64 `protobuf:"varint,28,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	// IOMaximumIOps uint64 // Maximum IOps for the container system drive
	IoMaximumIops uint64 `protobuf:"varint,29,opt,name=io_maximum_iops,json=ioMaximumIops,proto3" json:"io_maximum_iops,omitempty"`
	// IOMaximumBandwidth // Maximum IO in bytes per second for the container system drive
	IoMaximumBandwidth uint64 `protobuf:"varint,30,opt,name=io_maximum_bandwidth,json=ioMaximumBandwidth,proto3" json:"io_maximum_bandwidth,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{6} }

func (m *Resources) GetCpuShares() int64 {
	if m != nil {
		return m.CpuShares
	}
	return 0
}

func (m *Resources) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Resources) GetNanoCpus() int64 {
	if m != nil {
		return m.NanoCpus
	}
	return 0
}

func (m *Resources) GetCgroupParent() string {
	if m != nil {
		return m.CgroupParent
	}
	return ""
}

func (m *Resources) GetBlkioWeight() int32 {
	if m != nil {
		return m.BlkioWeight
	}
	return 0
}

func (m *Resources) GetBlkioWeightDevice() []*blkiodev.WeightDevice {
	if m != nil {
		return m.BlkioWeightDevice
	}
	return nil
}

func (m *Resources) GetBlkioDeviceReadBps() []*blkiodev.ThrottleDevice {
	if m != nil {
		return m.BlkioDeviceReadBps
	}
	return nil
}

func (m *Resources) GetBlkioDeviceWriteBps() []*blkiodev.ThrottleDevice {
	if m != nil {
		return m.BlkioDeviceWriteBps
	}
	return nil
}

func (m *Resources) GetBlkioDeviceReadIops() []*blkiodev.ThrottleDevice {
	if m != nil {
		return m.BlkioDeviceReadIops
	}
	return nil
}

func (m *Resources) GetBlkioDeviceWriteIops() []*blkiodev.ThrottleDevice {
	if m != nil {
		return m.BlkioDeviceWriteIops
	}
	return nil
}

func (m *Resources) GetCpuPeriod() int64 {
	if m != nil {
		return m.CpuPeriod
	}
	return 0
}

func (m *Resources) GetCpuQuota() int64 {
	if m != nil {
		return m.CpuQuota
	}
	return 0
}

func (m *Resources) GetCpuRealtimePeriod() int64 {
	if m != nil {
		return m.CpuRealtimePeriod
	}
	return 0
}

func (m *Resources) GetCpuRealtimeRuntime() int64 {
	if m != nil {
		return m.CpuRealtimeRuntime
	}
	return 0
}

func (m *Resources) GetCpusetCpus() string {
	if m != nil {
		return m.CpusetCpus
	}
	return ""
}

func (m *Resources) GetCpusetMems() string {
	if m != nil {
		return m.CpusetMems
	}
	return ""
}

func (m *Resources) GetDevices() []*DeviceMapping {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Resources) GetDeviceCgroupRules() []string {
	if m != nil {
		return m.DeviceCgroupRules
	}
	return nil
}

func (m *Resources) GetDiskQuota() int64 {
	if m != nil {
		return m.DiskQuota
	}
	return 0
}

func (m *Resources) GetKernelMemory() int64 {
	if m != nil {
		return m.KernelMemory
	}
	return 0
}

func (m *Resources) GetMemoryReservation() int64 {
	if m != nil {
		return m.MemoryReservation
	}
	return 0
}

func (m *Resources) GetMemorySwap() int64 {
	if m != nil {
		return m.MemorySwap
	}
	return 0
}

func (m *Resources) GetMemorySwappiness() *Resources_Int64Struct {
	if m != nil {
		return m.MemorySwappiness
	}
	return nil
}

func (m *Resources) GetOomKillDisable() *Resources_BoolStruct {
	if m != nil {
		return m.OomKillDisable
	}
	return nil
}

func (m *Resources) GetPidsLimit() int64 {
	if m != nil {
		return m.PidsLimit
	}
	return 0
}

func (m *Resources) GetUlimits() []*units.Ulimit {
	if m != nil {
		return m.Ulimits
	}
	return nil
}

func (m *Resources) GetCpuCount() int64 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *Resources) GetCpuPercent() int64 {
	if m != nil {
		return m.CpuPercent
	}
	return 0
}

func (m *Resources) GetIoMaximumIops() uint64 {
	if m != nil {
		return m.IoMaximumIops
	}
	return 0
}

func (m *Resources) GetIoMaximumBandwidth() uint64 {
	if m != nil {
		return m.IoMaximumBandwidth
	}
	return 0
}

type Resources_Int64Struct struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Resources_Int64Struct) Reset()         { *m = Resources_Int64Struct{} }
func (m *Resources_Int64Struct) String() string { return proto.CompactTextString(m) }
func (*Resources_Int64Struct) ProtoMessage()    {}
func (*Resources_Int64Struct) Descriptor() ([]byte, []int) {
	return fileDescriptorContainer, []int{6, 0}
}

func (m *Resources_Int64Struct) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Resources_BoolStruct struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Resources_BoolStruct) Reset()                    { *m = Resources_BoolStruct{} }
func (m *Resources_BoolStruct) String() string            { return proto.CompactTextString(m) }
func (*Resources_BoolStruct) ProtoMessage()               {}
func (*Resources_BoolStruct) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{6, 1} }

func (m *Resources_BoolStruct) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// HostConfig the non-portable Config structure of a container.
// Here, "non-portable" means "dependent of the host we are running on".
// Portable information *should* appear in Config.
// type HostConfig struct
type HostConfig struct {
	// Applicable to all platforms
	//
	// Binds []string // List of volume bindings for this container
	Binds []string `protobuf:"bytes,1,rep,name=binds" json:"binds,omitempty"`
	// ContainerIDFile // File (path) where the containerId is written
	ContainerIdFile string `protobuf:"bytes,2,opt,name=container_id_file,json=containerIdFile,proto3" json:"container_id_file,omitempty"`
	// LogConfig LogConfig // Configuration of the logs for this container
	LogConfig *LogConfig `protobuf:"bytes,3,opt,name=log_config,json=logConfig" json:"log_config,omitempty"`
	// NetworkMode NetworkMode // Network mode to use for the container, "none", "default", "container:<id>"
	// NetworkMode represents the container network stack. // type NetworkMode string
	NetworkMode string `protobuf:"bytes,4,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty"`
	// PortBindings nat.PortMap // Port mapping between the exposed port (container) and the host
	PortBindings *nat.PortMap `protobuf:"bytes,5,opt,name=port_bindings,json=portBindings" json:"port_bindings,omitempty"`
	// RestartPolicy RestartPolicy // Restart policy to be used for the container
	RestartPolicy *RestartPolicy `protobuf:"bytes,6,opt,name=restart_policy,json=restartPolicy" json:"restart_policy,omitempty"`
	// AutoRemove bool // Automatically remove container when it exits
	AutoRemove bool `protobuf:"varint,7,opt,name=auto_remove,json=autoRemove,proto3" json:"auto_remove,omitempty"`
	// VolumeDriver string // Name of the volume driver used to mount volumes
	VolumeDriver string `protobuf:"bytes,8,opt,name=volume_driver,json=volumeDriver,proto3" json:"volume_driver,omitempty"`
	// VolumesFrom []string // List of volumes to take from other container
	VolumesFrom []string `protobuf:"bytes,9,rep,name=volumes_from,json=volumesFrom" json:"volumes_from,omitempty"`
	// Applicable to UNIX platforms
	//
	// CapAdd strslice.StrSlice // List of kernel capabilities to add to the container
	CapAdd []string `protobuf:"bytes,10,rep,name=cap_add,json=capAdd" json:"cap_add,omitempty"`
	// CapDrop strslice.StrSlice // List of kernel capabilities to remove from the container
	CapDrop []string `protobuf:"bytes,11,rep,name=cap_drop,json=capDrop" json:"cap_drop,omitempty"`
	// DNS []string `json:"Dns"` // List of DNS server to lookup
	Dns []string `protobuf:"bytes,12,rep,name=dns" json:"dns,omitempty"`
	// DNSOptions []string `json:"DnsOptions"` // List of DNSOption to look for
	DnsOptions []string `protobuf:"bytes,13,rep,name=dns_options,json=dnsOptions" json:"dns_options,omitempty"`
	// DNSSearch []string `json:"DnsSearch"` // List of DNSSearch to look for
	DnsSearch []string `protobuf:"bytes,14,rep,name=dns_search,json=dnsSearch" json:"dns_search,omitempty"`
	// ExtraHosts []string // List of extra hosts
	ExtraHosts []string `protobuf:"bytes,15,rep,name=extra_hosts,json=extraHosts" json:"extra_hosts,omitempty"`
	// GroupAdd []string // List of additional groups that the container process will run as
	GroupAdd []string `protobuf:"bytes,16,rep,name=group_add,json=groupAdd" json:"group_add,omitempty"`
	// IpcMode IpcMode // IPC namespace to use for the container, "", "host", "container"
	// IpcMode represents the container ipc stack. // type IpcMode string
	IpcMode string `protobuf:"bytes,17,opt,name=ipc_mode,json=ipcMode,proto3" json:"ipc_mode,omitempty"`
	// Cgroup CgroupSpec // Cgroup to use for the container, "container:<id>"
	// CgroupSpec represents the cgroup to use for the container. // type CgroupSpec string
	Cgroup string `protobuf:"bytes,18,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
	// Links []string // List of links (in the name:alias form)
	Links []string `protobuf:"bytes,19,rep,name=links" json:"links,omitempty"`
	// OomScoreAdj int // Container preference for OOM-killing
	OomScoreAdj int32 `protobuf:"varint,20,opt,name=oom_score_adj,json=oomScoreAdj,proto3" json:"oom_score_adj,omitempty"`
	// PidMode PidMode // PID namespace to use for the container
	// PidMode represents the pid namespace of the container. // type PidMode string
	PidMode string `protobuf:"bytes,21,opt,name=pid_mode,json=pidMode,proto3" json:"pid_mode,omitempty"`
	// Privieged bool // Is the container in privileged mode
	Privileged bool `protobuf:"varint,22,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// PublishAllPorts bool // Should docker publish all exposed port for the container
	PublishAllPorts bool `protobuf:"varint,23,opt,name=publish_all_ports,json=publishAllPorts,proto3" json:"publish_all_ports,omitempty"`
	// ReadonlyRootfs bool // Is the container root filesystem in read-only
	ReadonlyRootfs bool `protobuf:"varint,24,opt,name=readonly_rootfs,json=readonlyRootfs,proto3" json:"readonly_rootfs,omitempty"`
	// SecurityOpt []string // List of string values to customize labels for MLS systems, such as SELinux.
	SecurityOpt []string `protobuf:"bytes,25,rep,name=security_opt,json=securityOpt" json:"security_opt,omitempty"`
	// Storage driver options per container.
	// StorageOpt map[string]string `json:",omitempty"`
	StorageOpt map[string]string `protobuf:"bytes,26,rep,name=storage_opt,json=storageOpt" json:"storage_opt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of tmpfs (mounts) used for the container
	// Tmpfs map[string]string `json:",omitempty"`
	Tmpfs map[string]string `protobuf:"bytes,27,rep,name=tmpfs" json:"tmpfs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// UTSMode UTSMode // UTSMode represents the UTS namespace of the container. // type UTSMode string
	// UTS namespace to use for the container
	UtsMode string `protobuf:"bytes,28,opt,name=uts_mode,json=utsMode,proto3" json:"uts_mode,omitempty"`
	// UsernsMode UsernsMode // UsernsMode represents userns mode in the container. // type UsernsMode string
	// The user namespace to use for the container
	UsernsMode string `protobuf:"bytes,29,opt,name=userns_mode,json=usernsMode,proto3" json:"userns_mode,omitempty"`
	// ShmSize int64
	// Total shm memory usage
	ShmSize int64 `protobuf:"varint,30,opt,name=shm_size,json=shmSize,proto3" json:"shm_size,omitempty"`
	// Sysctls map[string]string `json:",omitempty"`
	// List of Namespaced sysctls used for the container
	Sysctls map[string]string `protobuf:"bytes,31,rep,name=sysctls" json:"sysctls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Runtime string `json:",omitempty"`
	// Runtime to use with this container
	Runtime string `protobuf:"bytes,32,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Applicable to Windows
	//
	// ConsoleSize [2]uint // Initial console size (height,width)
	ConsoleSizeHeight uint32 `protobuf:"varint,33,opt,name=console_size_height,json=consoleSizeHeight,proto3" json:"console_size_height,omitempty"`
	ConsoleSizeWidth  uint32 `protobuf:"varint,34,opt,name=console_size_width,json=consoleSizeWidth,proto3" json:"console_size_width,omitempty"`
	// Isolation Isolation // Isolation technology of the container (e.g. default, hyperv)
	// Isolation represents the isolation technology of a container. The supported values are platform specific // type Isolation string
	Isolation string `protobuf:"bytes,35,opt,name=isolation,proto3" json:"isolation,omitempty"`
	// Contains container's resources (cgroups, ulimits)
	// Resources
	Resources *Resources `protobuf:"bytes,36,opt,name=resources" json:"resources,omitempty"`
	// Mounts specs used by the container
	// Mounts []mount.Mount `json:",omitempty"`
	Mounts []*mount.Mount `protobuf:"bytes,37,rep,name=mounts" json:"mounts,omitempty"`
	// MaskedPaths is the list of paths to be masked inside the container (this overrides the default set of paths)
	// MaskedPaths []string
	MaskedPaths []string `protobuf:"bytes,38,rep,name=masked_paths,json=maskedPaths" json:"masked_paths,omitempty"`
	// ReadonlyPaths is the list of paths to be set as read-only inside the container (this overrides the default set of paths)
	// ReadonlyPaths []string
	ReadonlyPaths []string `protobuf:"bytes,39,rep,name=readonly_paths,json=readonlyPaths" json:"readonly_paths,omitempty"`
	// Run a custom init inside the container, if null, use the daemon's configured settings
	// Init *bool `json:",omitempty"`
	Init *HostConfig_BoolStruct `protobuf:"bytes,40,opt,name=init" json:"init,omitempty"`
}

func (m *HostConfig) Reset()                    { *m = HostConfig{} }
func (m *HostConfig) String() string            { return proto.CompactTextString(m) }
func (*HostConfig) ProtoMessage()               {}
func (*HostConfig) Descriptor() ([]byte, []int) { return fileDescriptorContainer, []int{7} }

func (m *HostConfig) GetBinds() []string {
	if m != nil {
		return m.Binds
	}
	return nil
}

func (m *HostConfig) GetContainerIdFile() string {
	if m != nil {
		return m.ContainerIdFile
	}
	return ""
}

func (m *HostConfig) GetLogConfig() *LogConfig {
	if m != nil {
		return m.LogConfig
	}
	return nil
}

func (m *HostConfig) GetNetworkMode() string {
	if m != nil {
		return m.NetworkMode
	}
	return ""
}

func (m *HostConfig) GetPortBindings() *nat.PortMap {
	if m != nil {
		return m.PortBindings
	}
	return nil
}

func (m *HostConfig) GetRestartPolicy() *RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return nil
}

func (m *HostConfig) GetAutoRemove() bool {
	if m != nil {
		return m.AutoRemove
	}
	return false
}

func (m *HostConfig) GetVolumeDriver() string {
	if m != nil {
		return m.VolumeDriver
	}
	return ""
}

func (m *HostConfig) GetVolumesFrom() []string {
	if m != nil {
		return m.VolumesFrom
	}
	return nil
}

func (m *HostConfig) GetCapAdd() []string {
	if m != nil {
		return m.CapAdd
	}
	return nil
}

func (m *HostConfig) GetCapDrop() []string {
	if m != nil {
		return m.CapDrop
	}
	return nil
}

func (m *HostConfig) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *HostConfig) GetDnsOptions() []string {
	if m != nil {
		return m.DnsOptions
	}
	return nil
}

func (m *HostConfig) GetDnsSearch() []string {
	if m != nil {
		return m.DnsSearch
	}
	return nil
}

func (m *HostConfig) GetExtraHosts() []string {
	if m != nil {
		return m.ExtraHosts
	}
	return nil
}

func (m *HostConfig) GetGroupAdd() []string {
	if m != nil {
		return m.GroupAdd
	}
	return nil
}

func (m *HostConfig) GetIpcMode() string {
	if m != nil {
		return m.IpcMode
	}
	return ""
}

func (m *HostConfig) GetCgroup() string {
	if m != nil {
		return m.Cgroup
	}
	return ""
}

func (m *HostConfig) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *HostConfig) GetOomScoreAdj() int32 {
	if m != nil {
		return m.OomScoreAdj
	}
	return 0
}

func (m *HostConfig) GetPidMode() string {
	if m != nil {
		return m.PidMode
	}
	return ""
}

func (m *HostConfig) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *HostConfig) GetPublishAllPorts() bool {
	if m != nil {
		return m.PublishAllPorts
	}
	return false
}

func (m *HostConfig) GetReadonlyRootfs() bool {
	if m != nil {
		return m.ReadonlyRootfs
	}
	return false
}

func (m *HostConfig) GetSecurityOpt() []string {
	if m != nil {
		return m.SecurityOpt
	}
	return nil
}

func (m *HostConfig) GetStorageOpt() map[string]string {
	if m != nil {
		return m.StorageOpt
	}
	return nil
}

func (m *HostConfig) GetTmpfs() map[string]string {
	if m != nil {
		return m.Tmpfs
	}
	return nil
}

func (m *HostConfig) GetUtsMode() string {
	if m != nil {
		return m.UtsMode
	}
	return ""
}

func (m *HostConfig) GetUsernsMode() string {
	if m != nil {
		return m.UsernsMode
	}
	return ""
}

func (m *HostConfig) GetShmSize() int64 {
	if m != nil {
		return m.ShmSize
	}
	return 0
}

func (m *HostConfig) GetSysctls() map[string]string {
	if m != nil {
		return m.Sysctls
	}
	return nil
}

func (m *HostConfig) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *HostConfig) GetConsoleSizeHeight() uint32 {
	if m != nil {
		return m.ConsoleSizeHeight
	}
	return 0
}

func (m *HostConfig) GetConsoleSizeWidth() uint32 {
	if m != nil {
		return m.ConsoleSizeWidth
	}
	return 0
}

func (m *HostConfig) GetIsolation() string {
	if m != nil {
		return m.Isolation
	}
	return ""
}

func (m *HostConfig) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *HostConfig) GetMounts() []*mount.Mount {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *HostConfig) GetMaskedPaths() []string {
	if m != nil {
		return m.MaskedPaths
	}
	return nil
}

func (m *HostConfig) GetReadonlyPaths() []string {
	if m != nil {
		return m.ReadonlyPaths
	}
	return nil
}

func (m *HostConfig) GetInit() *HostConfig_BoolStruct {
	if m != nil {
		return m.Init
	}
	return nil
}

type HostConfig_BoolStruct struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HostConfig_BoolStruct) Reset()         { *m = HostConfig_BoolStruct{} }
func (m *HostConfig_BoolStruct) String() string { return proto.CompactTextString(m) }
func (*HostConfig_BoolStruct) ProtoMessage()    {}
func (*HostConfig_BoolStruct) Descriptor() ([]byte, []int) {
	return fileDescriptorContainer, []int{7, 3}
}

func (m *HostConfig_BoolStruct) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*HealthConfig)(nil), "container.HealthConfig")
	proto.RegisterType((*Config)(nil), "container.Config")
	proto.RegisterType((*Config_VoidStruct)(nil), "container.Config.VoidStruct")
	proto.RegisterType((*Config_Int32Struct)(nil), "container.Config.Int32Struct")
	proto.RegisterType((*ContainerCreateCreatedBody)(nil), "container.ContainerCreateCreatedBody")
	proto.RegisterType((*DeviceMapping)(nil), "container.DeviceMapping")
	proto.RegisterType((*RestartPolicy)(nil), "container.RestartPolicy")
	proto.RegisterType((*LogConfig)(nil), "container.LogConfig")
	proto.RegisterType((*Resources)(nil), "container.Resources")
	proto.RegisterType((*Resources_Int64Struct)(nil), "container.Resources.Int64Struct")
	proto.RegisterType((*Resources_BoolStruct)(nil), "container.Resources.BoolStruct")
	proto.RegisterType((*HostConfig)(nil), "container.HostConfig")
	proto.RegisterType((*HostConfig_BoolStruct)(nil), "container.HostConfig.BoolStruct")
}

func init() { proto.RegisterFile("pb/moby/container/container.proto", fileDescriptorContainer) }

var fileDescriptorContainer = []byte{
	// 2249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x6d, 0x53, 0x1c, 0xb9,
	0xf1, 0xaf, 0x05, 0x03, 0xbb, 0xbd, 0xbb, 0x3c, 0x08, 0x0c, 0x03, 0x7e, 0x00, 0xe3, 0x7b, 0xe0,
	0xff, 0xaf, 0xdc, 0xfa, 0x82, 0xef, 0xae, 0x7c, 0x57, 0x97, 0x4a, 0x0c, 0xdc, 0x95, 0x5d, 0x77,
	0x14, 0xce, 0xe0, 0xc4, 0x79, 0x37, 0x35, 0x3b, 0x12, 0xbb, 0x3a, 0x66, 0xa4, 0x89, 0xa4, 0x01,
	0xef, 0x7d, 0x86, 0xbc, 0xcc, 0xa7, 0xc9, 0xfb, 0xe4, 0xa3, 0xe4, 0x73, 0xa4, 0xba, 0xa5, 0xd9,
	0x1d, 0x6c, 0x52, 0x8e, 0x5f, 0x18, 0x8f, 0x7e, 0xfd, 0x53, 0xab, 0xd5, 0x6a, 0x75, 0xb7, 0x16,
	0x1e, 0x95, 0xc3, 0x27, 0x85, 0x1e, 0x4e, 0x9e, 0x64, 0x5a, 0xb9, 0x54, 0x2a, 0x61, 0x66, 0x5f,
	0x83, 0xd2, 0x68, 0xa7, 0x59, 0x67, 0x0a, 0xec, 0x3c, 0x1c, 0x69, 0x3d, 0xca, 0xc5, 0x13, 0x12,
	0x0c, 0xab, 0x8b, 0x27, 0xbc, 0x32, 0xa9, 0x93, 0x5a, 0x79, 0xea, 0xce, 0x6e, 0xad, 0x6d, 0x98,
	0x5f, 0x4a, 0xcd, 0xc5, 0xd5, 0xf4, 0x23, 0x10, 0xb6, 0x6b, 0x42, 0xa5, 0xa4, 0xb3, 0xfe, 0x6f,
	0x10, 0xdd, 0xad, 0x45, 0x2a, 0x75, 0xf8, 0xef, 0xdd, 0x19, 0x85, 0xae, 0x94, 0xf3, 0x7f, 0xbd,
	0x68, 0xff, 0xdf, 0x2d, 0xe8, 0xbd, 0x10, 0x69, 0xee, 0xc6, 0xc7, 0x5a, 0x5d, 0xc8, 0x11, 0x63,
	0x70, 0xc7, 0x09, 0xeb, 0xa2, 0xd6, 0xde, 0xfc, 0x41, 0x27, 0xa6, 0x6f, 0xf6, 0x35, 0xb4, 0xa5,
	0x72, 0xc2, 0x5c, 0xa5, 0x79, 0x34, 0xb7, 0xd7, 0x3a, 0xe8, 0x1e, 0x6e, 0x0f, 0xfc, 0x2e, 0x06,
	0xf5, 0x2e, 0x06, 0x27, 0x61, 0x17, 0xf1, 0x94, 0xca, 0x9e, 0xc2, 0x92, 0x93, 0x85, 0xd0, 0x95,
	0x8b, 0xe6, 0x3f, 0x34, 0xab, 0x66, 0xb2, 0xef, 0xa1, 0x67, 0x5d, 0x6a, 0x5c, 0x52, 0x0a, 0x23,
	0x35, 0x8f, 0xee, 0x7c, 0x68, 0x66, 0x97, 0xe8, 0xaf, 0x88, 0xcd, 0x22, 0x58, 0x32, 0xc2, 0x19,
	0x29, 0x6c, 0xb4, 0xb0, 0xd7, 0x3a, 0x58, 0x88, 0xeb, 0xe1, 0xfe, 0x3f, 0xda, 0xb0, 0x18, 0xb6,
	0xb8, 0x03, 0xed, 0xb1, 0xb6, 0x4e, 0xa5, 0x85, 0x88, 0x5a, 0x7b, 0xad, 0x83, 0x4e, 0x3c, 0x1d,
	0xb3, 0x87, 0x00, 0x5c, 0x17, 0xa9, 0x54, 0x24, 0x9d, 0x23, 0x69, 0x03, 0x41, 0xf7, 0x54, 0x56,
	0x18, 0xda, 0x50, 0x27, 0xa6, 0x6f, 0xf6, 0x08, 0x7a, 0xa9, 0x73, 0x69, 0x36, 0x4e, 0xac, 0xe3,
	0x52, 0x91, 0xc9, 0xed, 0xb8, 0xeb, 0xb1, 0x73, 0x84, 0xd8, 0x63, 0xe8, 0xcf, 0x28, 0xe8, 0x90,
	0x05, 0xe2, 0xf4, 0xa6, 0x1c, 0xdc, 0xfa, 0x0d, 0x92, 0x30, 0x26, 0x5a, 0x7c, 0x87, 0x24, 0x8c,
	0x61, 0xbf, 0x85, 0xbe, 0x78, 0x5b, 0x6a, 0x2b, 0x78, 0x52, 0x6a, 0xe3, 0x6c, 0xb4, 0x44, 0x0e,
	0xea, 0x0d, 0xf0, 0xb8, 0x5f, 0x69, 0xe3, 0xce, 0x85, 0x8b, 0x7b, 0x81, 0x82, 0x63, 0xcb, 0x56,
	0x61, 0xde, 0xb9, 0x49, 0xd4, 0x26, 0x6d, 0xf8, 0xc9, 0x1e, 0x00, 0xe8, 0x52, 0xa8, 0x60, 0x6f,
	0x87, 0x04, 0x1d, 0x44, 0xbc, 0xb5, 0x0f, 0x00, 0x48, 0x92, 0x68, 0x95, 0x89, 0x08, 0xbc, 0x98,
	0x90, 0x33, 0x95, 0x09, 0xd4, 0x27, 0xd4, 0x55, 0xd4, 0xa5, 0x08, 0xc1, 0x4f, 0x44, 0xb2, 0x82,
	0x47, 0x3d, 0x8f, 0x64, 0x05, 0x67, 0xdf, 0x42, 0x77, 0x4c, 0x61, 0x95, 0x8d, 0x45, 0x76, 0x19,
	0xf5, 0xc9, 0xc8, 0xad, 0xc1, 0xec, 0x5e, 0x34, 0x83, 0x2e, 0x6e, 0x72, 0xc9, 0x9d, 0x66, 0x64,
	0x13, 0x61, 0xb3, 0xb4, 0x14, 0x3c, 0x5a, 0x0e, 0xee, 0x34, 0x23, 0xfb, 0x83, 0x87, 0xd8, 0x06,
	0x2c, 0xc8, 0x22, 0x1d, 0x89, 0x68, 0x85, 0x8e, 0xc1, 0x0f, 0xd8, 0x33, 0x58, 0xba, 0xd2, 0x79,
	0x55, 0x08, 0x1b, 0xad, 0xee, 0xcd, 0x1f, 0x74, 0x0f, 0x1f, 0x36, 0xd6, 0xf3, 0x2b, 0x0d, 0xfe,
	0xec, 0x09, 0x3f, 0x28, 0x67, 0x26, 0x71, 0x4d, 0x67, 0xbb, 0xd0, 0xbd, 0xd6, 0xe6, 0x52, 0xaa,
	0x51, 0xc2, 0xa5, 0x89, 0xd6, 0xfc, 0xb1, 0x07, 0xe8, 0x44, 0x1a, 0x0c, 0x0b, 0x81, 0x53, 0x4a,
	0x2d, 0x95, 0x8b, 0x18, 0xed, 0xb3, 0x81, 0xb0, 0xff, 0x83, 0x55, 0x25, 0x1c, 0x4e, 0x48, 0xb8,
	0xb4, 0xe9, 0x30, 0x17, 0x3c, 0x5a, 0x27, 0xbb, 0x57, 0x02, 0x7e, 0x12, 0x60, 0x5c, 0xab, 0x48,
	0xb3, 0x24, 0xe5, 0xdc, 0x08, 0x6b, 0xa3, 0x0d, 0xbf, 0x56, 0x91, 0x66, 0xcf, 0x3d, 0xc2, 0xb6,
	0xa1, 0xad, 0x55, 0x32, 0xac, 0x64, 0xce, 0xa3, 0xbb, 0xb4, 0xd2, 0x92, 0x56, 0x47, 0x38, 0x64,
	0x5f, 0xc3, 0x62, 0x9e, 0x0e, 0x45, 0x6e, 0xa3, 0x4d, 0xda, 0xe0, 0x83, 0xf7, 0x37, 0xf8, 0x33,
	0xc9, 0xfd, 0xfe, 0x02, 0x19, 0x97, 0xb4, 0x4e, 0x97, 0x89, 0x95, 0x23, 0x95, 0xe6, 0xd1, 0x96,
	0x5f, 0x12, 0xa1, 0x73, 0x42, 0xd8, 0x1f, 0xf0, 0xd2, 0xe9, 0x32, 0xa9, 0xaf, 0x6b, 0x44, 0xc7,
	0x75, 0x8b, 0xf6, 0x97, 0xca, 0x3d, 0x3d, 0x3c, 0x77, 0xa6, 0xca, 0x5c, 0x4c, 0x3a, 0x5f, 0x87,
	0x6b, 0xbb, 0x01, 0x0b, 0x76, 0x2c, 0xf2, 0x3c, 0xda, 0x26, 0x8b, 0xfd, 0x60, 0xe7, 0x2f, 0xd0,
	0x6b, 0x3a, 0x1c, 0xe3, 0xe4, 0x52, 0x4c, 0xc2, 0xa5, 0xc3, 0x4f, 0x76, 0x08, 0x0b, 0x57, 0x69,
	0x5e, 0x89, 0x90, 0x57, 0xee, 0xdf, 0x76, 0x62, 0x92, 0x87, 0x15, 0x3d, 0xf5, 0xbb, 0xb9, 0x67,
	0xad, 0x9d, 0x6f, 0xa1, 0xdb, 0xd8, 0xe9, 0x2d, 0x8a, 0x37, 0x9a, 0x8a, 0x3b, 0xcd, 0xa9, 0x3d,
	0x80, 0x99, 0xce, 0x9d, 0xc7, 0xd0, 0x6d, 0x6c, 0x6a, 0x36, 0xad, 0x45, 0xe9, 0xc3, 0x0f, 0xf6,
	0x5f, 0xc0, 0xce, 0x71, 0x6d, 0xd7, 0xb1, 0x11, 0xa9, 0x13, 0xfe, 0x2f, 0x3f, 0xd2, 0x7c, 0xc2,
	0x96, 0x61, 0x4e, 0xf2, 0xb0, 0xf6, 0x9c, 0xe4, 0x98, 0x5f, 0xae, 0x53, 0xa3, 0xa4, 0x1a, 0xd9,
	0x68, 0x8e, 0xdc, 0x31, 0x1d, 0xef, 0xff, 0xad, 0x05, 0xfd, 0x13, 0x71, 0x25, 0x33, 0x71, 0x9a,
	0x96, 0xa5, 0x54, 0x23, 0xb6, 0x07, 0xbd, 0x32, 0x75, 0xe3, 0x44, 0xab, 0x04, 0xb3, 0x50, 0xd0,
	0x03, 0x88, 0x9d, 0xa9, 0x17, 0xda, 0x3a, 0xf6, 0xff, 0xb0, 0x46, 0x0c, 0xa9, 0x92, 0xa9, 0x77,
	0xc2, 0xb6, 0x56, 0x50, 0xf0, 0x52, 0x4d, 0x8d, 0x63, 0x5f, 0x00, 0xcb, 0x46, 0x46, 0x57, 0x25,
	0xe6, 0xcf, 0x42, 0x5a, 0x2b, 0xb5, 0xb2, 0x21, 0x5b, 0xad, 0x79, 0xc9, 0xab, 0x99, 0x60, 0xff,
	0x1c, 0xfa, 0xb1, 0xf0, 0x09, 0x54, 0xe7, 0x32, 0x9b, 0x60, 0x7e, 0x6b, 0xe4, 0x45, 0xfa, 0x66,
	0x03, 0x58, 0x2f, 0xd2, 0xb7, 0xb2, 0xa8, 0x8a, 0x04, 0xb3, 0xe9, 0x24, 0xc9, 0xb0, 0x80, 0x90,
	0x05, 0x0b, 0xf1, 0x5a, 0x10, 0xc5, 0x28, 0x39, 0x46, 0xc1, 0xfe, 0xdf, 0x5b, 0xd0, 0xf9, 0x59,
	0x8f, 0x1a, 0x05, 0x65, 0x52, 0x4e, 0x35, 0xe2, 0x37, 0x7b, 0x06, 0x8b, 0x19, 0x49, 0xc9, 0x3f,
	0xdd, 0xc3, 0xbd, 0xc6, 0xb1, 0x4f, 0x67, 0x86, 0x00, 0x08, 0xa1, 0xec, 0xf9, 0x78, 0xee, 0x0d,
	0xf8, 0x63, 0xce, 0x7d, 0xff, 0x5f, 0x5d, 0xe8, 0xc4, 0xc2, 0xea, 0xca, 0x64, 0xc2, 0x62, 0x8e,
	0xcb, 0xca, 0x2a, 0xb1, 0xe3, 0xd4, 0x08, 0x4b, 0x0a, 0xe6, 0xe3, 0x4e, 0x56, 0x56, 0xe7, 0x04,
	0xb0, 0x4d, 0x58, 0x2c, 0x44, 0xa1, 0xcd, 0x84, 0xf4, 0xcc, 0xc7, 0x61, 0xc4, 0xee, 0x41, 0x47,
	0xa5, 0x4a, 0x27, 0x59, 0x59, 0x79, 0xb7, 0xce, 0xc7, 0x6d, 0x04, 0x8e, 0xcb, 0xca, 0x62, 0x02,
	0xaf, 0x9d, 0x9f, 0x1a, 0xa1, 0x1c, 0x55, 0x82, 0x4e, 0xdc, 0x0b, 0x7e, 0x27, 0x0c, 0xd3, 0x1b,
	0x15, 0xf4, 0xe4, 0x5a, 0xc8, 0xd1, 0xd8, 0x85, 0x3a, 0xd5, 0x25, 0xec, 0x0d, 0x41, 0xec, 0x47,
	0x58, 0x6f, 0x52, 0x12, 0x4e, 0x01, 0x13, 0x2d, 0x92, 0xaf, 0x36, 0x07, 0xd3, 0x7e, 0xc0, 0xd3,
	0x7d, 0x38, 0xc5, 0x6b, 0x0d, 0x0d, 0x1e, 0x62, 0x3f, 0xc1, 0x5d, 0xaf, 0xc7, 0x2b, 0x48, 0x8c,
	0x48, 0x79, 0x32, 0x2c, 0xb1, 0x66, 0xa0, 0xa6, 0x68, 0xa6, 0xe9, 0xf5, 0xd8, 0x68, 0xe7, 0x72,
	0x11, 0x74, 0x31, 0x12, 0x84, 0x81, 0x48, 0xf9, 0x51, 0x69, 0xd9, 0x29, 0x6c, 0xde, 0x50, 0x76,
	0x6d, 0xa4, 0x13, 0xa4, 0xad, 0xfd, 0x01, 0x6d, 0xeb, 0x0d, 0x6d, 0x6f, 0x70, 0xd6, 0x6d, 0xea,
	0xc8, 0x36, 0xa9, 0x4b, 0x1b, 0x75, 0x3e, 0x42, 0x1d, 0x1a, 0xf7, 0x52, 0x97, 0x96, 0x9d, 0xc1,
	0xd6, 0x2d, 0xd6, 0x91, 0x3e, 0xf8, 0x80, 0xbe, 0x8d, 0x77, 0xcd, 0x23, 0x85, 0x21, 0x3e, 0x42,
	0x17, 0xd2, 0x9d, 0xc6, 0x47, 0x68, 0x34, 0xee, 0x01, 0x0e, 0x92, 0xbf, 0x56, 0xda, 0xa5, 0x51,
	0xcf, 0xc7, 0x41, 0x56, 0x56, 0x7f, 0xc4, 0x31, 0x5e, 0x18, 0x14, 0x1a, 0x2c, 0x6a, 0xb2, 0x10,
	0xb5, 0x92, 0x3e, 0xd1, 0xd6, 0xb2, 0xb2, 0x8a, 0x83, 0x24, 0x28, 0xfb, 0x12, 0x36, 0x6e, 0xf0,
	0x4d, 0xa5, 0xf0, 0x7f, 0xaa, 0x7c, 0xf3, 0x31, 0x6b, 0x4c, 0x88, 0xbd, 0x04, 0x33, 0x3a, 0x46,
	0xa0, 0x70, 0x3e, 0x10, 0x7d, 0x19, 0x04, 0x0f, 0x51, 0x28, 0xce, 0x08, 0x85, 0x28, 0xb0, 0x1e,
	0x36, 0x08, 0xa7, 0xa2, 0xb0, 0xec, 0x10, 0x96, 0xbc, 0xab, 0x6c, 0xb4, 0x16, 0x1c, 0x34, 0xbb,
	0x83, 0x37, 0x32, 0x54, 0x5c, 0x13, 0x71, 0x5f, 0xc1, 0xbd, 0x21, 0xcc, 0x4d, 0x95, 0x0b, 0x1b,
	0xca, 0xe1, 0x9a, 0x17, 0x1d, 0x93, 0x24, 0x46, 0x01, 0xfa, 0x90, 0x4b, 0x7b, 0x19, 0xbc, 0xb4,
	0xee, 0x7d, 0x88, 0x88, 0x77, 0xd3, 0x63, 0xe8, 0x5f, 0x0a, 0xa3, 0x44, 0x9e, 0x84, 0xab, 0xb6,
	0x41, 0x8c, 0x9e, 0x07, 0x4f, 0xfd, 0x85, 0xfb, 0x02, 0x98, 0x97, 0x26, 0x46, 0x58, 0xec, 0x2b,
	0xb1, 0xe9, 0x8b, 0xee, 0x7a, 0x57, 0x7a, 0x49, 0x3c, 0x13, 0x50, 0x75, 0xf5, 0x74, 0x7b, 0x9d,
	0x96, 0xd1, 0x26, 0xf1, 0xc0, 0x43, 0xe7, 0xd7, 0x69, 0xc9, 0x4e, 0x61, 0xad, 0x41, 0x28, 0xa5,
	0xc2, 0x22, 0xbc, 0x45, 0xc5, 0xa7, 0x99, 0x85, 0xa6, 0x89, 0x02, 0x4b, 0xde, 0x37, 0x5f, 0x85,
	0x02, 0xb4, 0x3a, 0x53, 0xe4, 0x67, 0xb2, 0x97, 0xb0, 0xaa, 0x75, 0x91, 0x5c, 0xca, 0x3c, 0xaf,
	0x2b, 0x7f, 0xa8, 0x9e, 0xbb, 0xb7, 0x6a, 0x3b, 0xd2, 0x3a, 0x0f, 0xca, 0x96, 0xb5, 0x2e, 0x7e,
	0x92, 0x79, 0x1e, 0x3a, 0x03, 0xf4, 0x56, 0x29, 0xb9, 0x4d, 0x72, 0x59, 0x48, 0x17, 0x6d, 0x7b,
	0x6f, 0x21, 0xf2, 0x33, 0x02, 0xec, 0x73, 0x58, 0xaa, 0x48, 0x64, 0xa3, 0x1d, 0x3a, 0xb0, 0xfe,
	0xc0, 0xb7, 0xfe, 0x7f, 0x22, 0x34, 0xae, 0xa5, 0x75, 0x68, 0xfa, 0x24, 0x7d, 0x6f, 0x1a, 0x9a,
	0x94, 0x9b, 0x43, 0x5c, 0x60, 0x44, 0x66, 0x98, 0xa0, 0xee, 0x7b, 0xff, 0xf8, 0xb8, 0x46, 0x84,
	0x7d, 0x06, 0x2b, 0x52, 0x27, 0x75, 0xbe, 0xa7, 0x0b, 0xf4, 0x60, 0xaf, 0x75, 0x70, 0x27, 0xee,
	0x4b, 0x7d, 0xea, 0x51, 0xba, 0x1f, 0x5f, 0xc2, 0x46, 0x83, 0x37, 0x4c, 0x15, 0xbf, 0x96, 0xdc,
	0x8d, 0xa3, 0x87, 0x44, 0x66, 0x53, 0xf2, 0x51, 0x2d, 0x09, 0x95, 0xb6, 0xf6, 0xe5, 0xcd, 0x4a,
	0x3b, 0x1f, 0x12, 0xf5, 0xce, 0x3e, 0xc0, 0xcc, 0x45, 0x37, 0x39, 0xed, 0xba, 0x1a, 0xff, 0xb3,
	0x0f, 0x80, 0x85, 0x31, 0x14, 0x98, 0x0d, 0x58, 0x18, 0x4a, 0xc5, 0x6d, 0x78, 0xb2, 0xf8, 0x01,
	0x16, 0xcd, 0xa9, 0xff, 0x13, 0xc9, 0x93, 0x0b, 0x99, 0xd7, 0x35, 0x61, 0x65, 0x2a, 0x78, 0xc9,
	0x7f, 0x94, 0xb9, 0x60, 0x4f, 0x01, 0x72, 0x3d, 0x4a, 0x42, 0x49, 0xf2, 0x6f, 0x95, 0x8d, 0xdb,
	0x4a, 0x52, 0xdc, 0xc9, 0xa7, 0x75, 0xed, 0x11, 0xf4, 0xea, 0x96, 0xaf, 0xd0, 0x5c, 0x84, 0x5c,
	0xdf, 0x0d, 0xd8, 0xa9, 0xe6, 0x02, 0x7b, 0x75, 0xec, 0xd1, 0x13, 0xb4, 0x88, 0xba, 0x81, 0x85,
	0x77, 0x7a, 0xf5, 0xd3, 0xb4, 0x8c, 0x7b, 0x48, 0x39, 0x0a, 0x0c, 0xf6, 0x7b, 0x58, 0x36, 0x22,
	0x3c, 0x80, 0xa8, 0x22, 0xd3, 0x23, 0xe0, 0xe6, 0xed, 0xbc, 0x51, 0xb1, 0xe3, 0xbe, 0xb9, 0x51,
	0xc0, 0x77, 0xa1, 0x9b, 0x56, 0x4e, 0x27, 0x46, 0x14, 0xfa, 0x4a, 0xd0, 0xeb, 0xa0, 0x1d, 0x03,
	0x42, 0x31, 0x21, 0x78, 0xeb, 0x7c, 0xdb, 0x9b, 0x70, 0x23, 0xaf, 0x84, 0xa1, 0x77, 0x41, 0x27,
	0xee, 0x79, 0xf0, 0x84, 0x30, 0xdc, 0x5c, 0xe8, 0x8d, 0x93, 0x0b, 0xa3, 0x0b, 0xca, 0xc9, 0x9d,
	0xb8, 0x1b, 0xb0, 0x1f, 0x8d, 0x2e, 0xd8, 0x16, 0x2c, 0x65, 0x69, 0x89, 0x7d, 0x2c, 0x65, 0xd8,
	0x4e, 0xbc, 0x98, 0xa5, 0xe5, 0x73, 0xce, 0xb1, 0x7f, 0x45, 0x01, 0x37, 0xba, 0x0c, 0x6f, 0x04,
	0x24, 0x9e, 0x18, 0x5d, 0x62, 0xb9, 0xe6, 0xca, 0xd6, 0xef, 0x04, 0xae, 0x28, 0x4f, 0x71, 0x65,
	0x13, 0x5d, 0x3a, 0x6a, 0x54, 0xfa, 0xbe, 0xb3, 0xe6, 0xca, 0x9e, 0x79, 0x84, 0x72, 0x88, 0xb2,
	0x89, 0x15, 0xa9, 0xc9, 0xc6, 0xd1, 0x32, 0xc9, 0x3b, 0x5c, 0xd9, 0x73, 0x02, 0x70, 0xbe, 0x78,
	0xeb, 0x4c, 0x4a, 0xbd, 0x13, 0x26, 0x42, 0xdf, 0x99, 0x23, 0x84, 0x21, 0x42, 0xb7, 0xc1, 0xe7,
	0x2a, 0x34, 0x74, 0xd5, 0x77, 0x63, 0x04, 0x04, 0x53, 0x65, 0x99, 0xf9, 0xf3, 0xf3, 0x4d, 0xff,
	0x92, 0x2c, 0x33, 0x3a, 0xbb, 0x4d, 0x58, 0xf4, 0x49, 0x2e, 0x62, 0x24, 0x08, 0x23, 0x8c, 0xb6,
	0x5c, 0xaa, 0x4b, 0x1b, 0xad, 0xfb, 0x68, 0xa3, 0x01, 0xdb, 0x87, 0x3e, 0xa6, 0x01, 0x9b, 0x69,
	0x23, 0x92, 0x94, 0xff, 0x42, 0xa9, 0x6c, 0x21, 0xee, 0x6a, 0x5d, 0x9c, 0x23, 0xf6, 0x9c, 0xff,
	0x82, 0x8b, 0x95, 0x92, 0xfb, 0xc5, 0xee, 0xfa, 0xc5, 0x4a, 0xc9, 0x69, 0xb1, 0x87, 0x00, 0xa5,
	0x91, 0x57, 0x32, 0x17, 0x23, 0xc1, 0x29, 0x69, 0xb5, 0xe3, 0x06, 0x42, 0x1d, 0x60, 0x35, 0xcc,
	0xa5, 0x1d, 0x27, 0x69, 0x9e, 0x87, 0x87, 0xdf, 0x96, 0x7f, 0x5f, 0x04, 0xc1, 0xf3, 0x3c, 0xf7,
	0xaf, 0xbd, 0xcf, 0x61, 0x05, 0x6b, 0xa9, 0x56, 0xf9, 0x24, 0x31, 0x5a, 0xbb, 0x0b, 0x4b, 0x09,
	0xa9, 0x1d, 0x2f, 0xd7, 0x70, 0x4c, 0x28, 0x9e, 0xb1, 0x15, 0x59, 0x65, 0xa4, 0x9b, 0xa0, 0xff,
	0x43, 0xe7, 0xde, 0xad, 0xb1, 0xb3, 0x12, 0x1b, 0x11, 0x6c, 0xf2, 0x4d, 0x3a, 0x12, 0xc4, 0xf0,
	0x79, 0xe7, 0xd3, 0xe6, 0x2b, 0x6e, 0x7a, 0x0d, 0x07, 0xe7, 0x9e, 0x78, 0x56, 0x3a, 0xdf, 0xb1,
	0x81, 0x9d, 0x02, 0xec, 0x1b, 0x58, 0x70, 0x45, 0x79, 0x61, 0xa3, 0x7b, 0xef, 0xb5, 0x7b, 0x0d,
	0x0d, 0xaf, 0x91, 0xe2, 0x27, 0x7b, 0x3a, 0xba, 0xac, 0x72, 0xd6, 0xbb, 0xec, 0xbe, 0x77, 0x59,
	0xe5, 0x2c, 0xb9, 0x6c, 0x17, 0xba, 0xf8, 0xf8, 0x56, 0x41, 0xfa, 0xc0, 0x17, 0x38, 0x0f, 0x11,
	0x61, 0x1b, 0xda, 0x76, 0x5c, 0x24, 0x56, 0xfe, 0x2a, 0x28, 0x29, 0xcd, 0xc7, 0x4b, 0x76, 0x5c,
	0x9c, 0xcb, 0x5f, 0x05, 0xfb, 0x1e, 0x96, 0xec, 0xc4, 0x66, 0x2e, 0xb7, 0xd1, 0x2e, 0x19, 0xb4,
	0xff, 0x5f, 0xb6, 0xe4, 0x49, 0xe1, 0xb1, 0x18, 0xa6, 0xd0, 0x6f, 0x0c, 0xa1, 0x40, 0xef, 0x79,
	0x9b, 0xc2, 0x90, 0xea, 0xbe, 0x56, 0x56, 0xe7, 0x82, 0x96, 0x4d, 0xc6, 0xbe, 0xc3, 0x7b, 0xb4,
	0xd7, 0x3a, 0xe8, 0xc7, 0x6b, 0x41, 0x84, 0x16, 0xbc, 0xf0, 0x7d, 0xde, 0x6f, 0x80, 0xdd, 0xe0,
	0xfb, 0x0c, 0xba, 0x4f, 0xf4, 0xd5, 0x06, 0xfd, 0x0d, 0xe2, 0xec, 0x3e, 0x74, 0xa4, 0xd5, 0xb9,
	0x2f, 0x80, 0x8f, 0x69, 0xe5, 0x19, 0xc0, 0x0e, 0xa1, 0x63, 0xea, 0x2a, 0x13, 0x7d, 0xf2, 0x5e,
	0x0a, 0x9b, 0x56, 0xa0, 0x78, 0x46, 0x63, 0x9f, 0xc0, 0x22, 0xfd, 0x16, 0x64, 0xa3, 0x4f, 0xc9,
	0x0d, 0xbd, 0x81, 0xff, 0x69, 0xe8, 0x14, 0xff, 0xc6, 0x41, 0x86, 0x71, 0x52, 0xa4, 0xf6, 0x52,
	0xf0, 0x04, 0x1f, 0x1b, 0x36, 0xfa, 0xcc, 0xc7, 0x89, 0xc7, 0x5e, 0x21, 0xc4, 0x3e, 0x85, 0x69,
	0x70, 0x05, 0xd2, 0xe7, 0x44, 0xea, 0xd7, 0xa8, 0xa7, 0x7d, 0x05, 0x77, 0xa4, 0x92, 0x2e, 0x3a,
	0x78, 0xaf, 0xdc, 0x36, 0x9c, 0xde, 0xa8, 0x90, 0xc4, 0xde, 0xf9, 0x1d, 0xac, 0xbc, 0x13, 0x5b,
	0x1f, 0xf5, 0xdc, 0x7b, 0x06, 0x30, 0x0b, 0xac, 0x8f, 0x9a, 0xf9, 0x1d, 0xf4, 0x9a, 0x11, 0xf0,
	0x51, 0x73, 0xff, 0x87, 0x3a, 0x36, 0x5c, 0xa4, 0x1f, 0xb3, 0x9e, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xdb, 0x67, 0x83, 0xcd, 0x40, 0x14, 0x00, 0x00,
}
