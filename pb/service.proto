// Inspired from https://github.com/philips/grpc-gateway-example

syntax = "proto3";
package pb;

import "google/api/annotations.proto";

import "pb/moby/moby.proto";
import "pb/moby/container/container.proto";
import "pb/moby/network/network.proto";

service SimpleService {
	
	// Pull Docker image
	//
	// Like command of 'docker pull', Input/Output is a same Protobuf/JSON object. For input example:
	// { "image_ref": "docker.io/nginx" }
    // For output example:		
	// { "image_ref": "docker.io/nginx", "state_code": 0, "state_message": "SUCCEEDED" }
	rpc PullImage(DockerImagePullReqResp) returns (DockerImagePullReqResp) {
		option (google.api.http) = {
			post: "/v1/docker-pull"
			body: "*"
		};
	}
	
	// Run Docker container
	//
	// For output, plus result fileds:
	// { ..., "state_code": 0, "state_message": "RUNNING" }
	rpc RunContainer(DockerContainerRunReqResp) returns (DockerContainerRunReqResp) {
		option (google.api.http) = {
			post: "/v1/docker-run"
			body: "*"
		};
	}
	
	// Create Docker network
	//
	//
	rpc CreateNetwork(DockerNetworkCreateReqResp) returns (DockerNetworkCreateReqResp) {
		option (google.api.http) = {
			post: "/v1/docker-network-create"
			body: "*"
		};
	}
}

message DockerImagePullReqResp {
	string ref_str = 1;
	moby.ImagePullOptions image_pull_options = 2;
    bytes resp_body = 3;
    int32 state_code = 4;
    string state_message = 5;
}

message DockerNetworkCreateReqResp {
	string name = 1;
	moby.NetworkCreate network_create = 2;
	moby.NetworkCreateResponse network_create_response = 3;
	int32 state_code = 4;
	string state_message = 5;
}

message DockerContainerRunReqResp {
    container.Config config = 1;
    container.HostConfig host_config = 2;
    network.NetworkingConfig networking_config = 3;
    string name = 4;
	container.ContainerCreateCreatedBody container_create_response = 5;
    int32 state_code = 6;
    string state_message = 7;
}

