// Code generated by protoc-gen-gogo.
// source: pb/collector.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/collector.proto
		pb/exporter.proto
		pb/metric.proto

	It has these top-level messages:
		MetricReqResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	Transit(ctx context.Context, in *MetricReqResp, opts ...grpc.CallOption) (*MetricReqResp, error)
	BatchTransit(ctx context.Context, opts ...grpc.CallOption) (CollectorService_BatchTransitClient, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) Transit(ctx context.Context, in *MetricReqResp, opts ...grpc.CallOption) (*MetricReqResp, error) {
	out := new(MetricReqResp)
	err := grpc.Invoke(ctx, "/pb.CollectorService/Transit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) BatchTransit(ctx context.Context, opts ...grpc.CallOption) (CollectorService_BatchTransitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectorService_serviceDesc.Streams[0], c.cc, "/pb.CollectorService/BatchTransit", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceBatchTransitClient{stream}
	return x, nil
}

type CollectorService_BatchTransitClient interface {
	Send(*MetricReqResp) error
	Recv() (*MetricReqResp, error)
	grpc.ClientStream
}

type collectorServiceBatchTransitClient struct {
	grpc.ClientStream
}

func (x *collectorServiceBatchTransitClient) Send(m *MetricReqResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceBatchTransitClient) Recv() (*MetricReqResp, error) {
	m := new(MetricReqResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	Transit(context.Context, *MetricReqResp) (*MetricReqResp, error)
	BatchTransit(CollectorService_BatchTransitServer) error
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_Transit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).Transit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CollectorService/Transit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).Transit(ctx, req.(*MetricReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_BatchTransit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).BatchTransit(&collectorServiceBatchTransitServer{stream})
}

type CollectorService_BatchTransitServer interface {
	Send(*MetricReqResp) error
	Recv() (*MetricReqResp, error)
	grpc.ServerStream
}

type collectorServiceBatchTransitServer struct {
	grpc.ServerStream
}

func (x *collectorServiceBatchTransitServer) Send(m *MetricReqResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceBatchTransitServer) Recv() (*MetricReqResp, error) {
	m := new(MetricReqResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transit",
			Handler:    _CollectorService_Transit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchTransit",
			Handler:       _CollectorService_BatchTransit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/collector.proto",
}

func init() { proto.RegisterFile("pb/collector.proto", fileDescriptorCollector) }

var fileDescriptorCollector = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x4f,
	0xce, 0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x92, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f,
	0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x90, 0xe2, 0x2f, 0x48,
	0xd2, 0xcf, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x86, 0x08, 0x18, 0xad, 0x65, 0xe4, 0x12, 0x70, 0x86,
	0x19, 0x13, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0xe4, 0xc1, 0xc5, 0x1e, 0x52, 0x94, 0x98,
	0x57, 0x9c, 0x59, 0x22, 0x24, 0xa8, 0x57, 0x90, 0xa4, 0xe7, 0x0b, 0xd6, 0x11, 0x94, 0x5a, 0x18,
	0x94, 0x5a, 0x5c, 0x20, 0x85, 0x29, 0xa4, 0x24, 0xde, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x41, 0x25,
	0x1e, 0xfd, 0x32, 0x43, 0x90, 0xf9, 0xa9, 0x45, 0x99, 0x79, 0xe9, 0x56, 0x8c, 0x5a, 0x42, 0xfe,
	0x5c, 0x3c, 0x4e, 0x89, 0x25, 0xc9, 0x19, 0xa4, 0x19, 0x27, 0x0a, 0x36, 0x8e, 0x5f, 0x89, 0x0b,
	0x64, 0x5c, 0x71, 0x49, 0x51, 0x6a, 0x62, 0xae, 0x15, 0xa3, 0x96, 0x06, 0xa3, 0x01, 0xa3, 0x93,
	0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1,
	0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x23, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x0d, 0x23,
	0xbb, 0x11, 0x01, 0x00, 0x00,
}
