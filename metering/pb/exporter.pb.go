// Code generated by protoc-gen-gogo.
// source: pb/exporter.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExporterService service

type ExporterServiceClient interface {
	Measure(ctx context.Context, in *MetricReqResp, opts ...grpc.CallOption) (*MetricReqResp, error)
}

type exporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewExporterServiceClient(cc *grpc.ClientConn) ExporterServiceClient {
	return &exporterServiceClient{cc}
}

func (c *exporterServiceClient) Measure(ctx context.Context, in *MetricReqResp, opts ...grpc.CallOption) (*MetricReqResp, error) {
	out := new(MetricReqResp)
	err := grpc.Invoke(ctx, "/pb.ExporterService/Measure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExporterService service

type ExporterServiceServer interface {
	Measure(context.Context, *MetricReqResp) (*MetricReqResp, error)
}

func RegisterExporterServiceServer(s *grpc.Server, srv ExporterServiceServer) {
	s.RegisterService(&_ExporterService_serviceDesc, srv)
}

func _ExporterService_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServiceServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExporterService/Measure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServiceServer).Measure(ctx, req.(*MetricReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExporterService",
	HandlerType: (*ExporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Measure",
			Handler:    _ExporterService_Measure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/exporter.proto",
}

func init() { proto.RegisterFile("pb/exporter.proto", fileDescriptorExporter) }

var fileDescriptorExporter = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x48, 0xd2, 0x4f,
	0xad, 0x28, 0xc8, 0x2f, 0x2a, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x92, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc,
	0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x90, 0xe2, 0x2f, 0x48, 0xd2,
	0xcf, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x86, 0x08, 0x18, 0x45, 0x73, 0xf1, 0xbb, 0x42, 0x0d, 0x09,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe0, 0x62, 0xf7, 0x4d, 0x4d, 0x2c, 0x2e, 0x2d,
	0x4a, 0x15, 0x12, 0xd4, 0x2b, 0x48, 0xd2, 0xf3, 0x05, 0xab, 0x0f, 0x4a, 0x2d, 0x0c, 0x4a, 0x2d,
	0x2e, 0x90, 0xc2, 0x14, 0x52, 0x12, 0x6f, 0xba, 0xfc, 0x64, 0x32, 0x93, 0xa0, 0x12, 0x8f, 0x7e,
	0x99, 0x21, 0xc8, 0xf4, 0xd4, 0xa2, 0xcc, 0xbc, 0x74, 0x2b, 0x46, 0x2d, 0x27, 0x81, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24,
	0x36, 0xb0, 0xad, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xf7, 0xee, 0x2c, 0xbd, 0x00,
	0x00, 0x00,
}
