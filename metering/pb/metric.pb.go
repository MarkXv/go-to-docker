// Code generated by protoc-gen-gogo.
// source: pb/metric.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MeterDriver int32

const (
	MeterDriver_CADVISOR   MeterDriver = 0
	MeterDriver_DOCKER     MeterDriver = 1
	MeterDriver_HEAPSTER   MeterDriver = 2
	MeterDriver_PROMETHEUS MeterDriver = 3
)

var MeterDriver_name = map[int32]string{
	0: "CADVISOR",
	1: "DOCKER",
	2: "HEAPSTER",
	3: "PROMETHEUS",
}
var MeterDriver_value = map[string]int32{
	"CADVISOR":   0,
	"DOCKER":     1,
	"HEAPSTER":   2,
	"PROMETHEUS": 3,
}

func (x MeterDriver) String() string {
	return proto.EnumName(MeterDriver_name, int32(x))
}
func (MeterDriver) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

type RequestType int32

const (
	RequestType_CADVISOR_V1_MACHINEINFOREQUEST   RequestType = 0
	RequestType_CADVISOR_V1_ContainerInfoRequest RequestType = 1
	RequestType_CADVISOR_V1_EVENTINFOREQUEST     RequestType = 2
	RequestType_CADVISOR_V2_MACHINESTATSREQUEST  RequestType = 3
	RequestType_CADVISOR_V2_ATTRIBUTESREQUEST    RequestType = 4
	RequestType_CADVISOR_V2_RequestOptions       RequestType = 5
	RequestType_CADVISOR_VERSIONINFOREQUEST      RequestType = 6
)

var RequestType_name = map[int32]string{
	0: "CADVISOR_V1_MACHINEINFOREQUEST",
	1: "CADVISOR_V1_ContainerInfoRequest",
	2: "CADVISOR_V1_EVENTINFOREQUEST",
	3: "CADVISOR_V2_MACHINESTATSREQUEST",
	4: "CADVISOR_V2_ATTRIBUTESREQUEST",
	5: "CADVISOR_V2_RequestOptions",
	6: "CADVISOR_VERSIONINFOREQUEST",
}
var RequestType_value = map[string]int32{
	"CADVISOR_V1_MACHINEINFOREQUEST":   0,
	"CADVISOR_V1_ContainerInfoRequest": 1,
	"CADVISOR_V1_EVENTINFOREQUEST":     2,
	"CADVISOR_V2_MACHINESTATSREQUEST":  3,
	"CADVISOR_V2_ATTRIBUTESREQUEST":    4,
	"CADVISOR_V2_RequestOptions":       5,
	"CADVISOR_VERSIONINFOREQUEST":      6,
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetric, []int{1} }

type MetricType int32

const (
	MetricType_CADVISOR_V1_MACHINEINFO   MetricType = 0
	MetricType_CADVISOR_V1_CONTAINERINFO MetricType = 1
	MetricType_CADVISOR_V1_EVENT         MetricType = 2
	MetricType_CADVISOR_V2_MACHINESTATS  MetricType = 3
	MetricType_CADVISOR_V2_ATTRIBUTES    MetricType = 4
	MetricType_CADVISOR_V2_CONTAINERINFO MetricType = 5
	MetricType_CADVISOR_VERSION          MetricType = 6
)

var MetricType_name = map[int32]string{
	0: "CADVISOR_V1_MACHINEINFO",
	1: "CADVISOR_V1_CONTAINERINFO",
	2: "CADVISOR_V1_EVENT",
	3: "CADVISOR_V2_MACHINESTATS",
	4: "CADVISOR_V2_ATTRIBUTES",
	5: "CADVISOR_V2_CONTAINERINFO",
	6: "CADVISOR_VERSION",
}
var MetricType_value = map[string]int32{
	"CADVISOR_V1_MACHINEINFO":   0,
	"CADVISOR_V1_CONTAINERINFO": 1,
	"CADVISOR_V1_EVENT":         2,
	"CADVISOR_V2_MACHINESTATS":  3,
	"CADVISOR_V2_ATTRIBUTES":    4,
	"CADVISOR_V2_CONTAINERINFO": 5,
	"CADVISOR_VERSION":          6,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetric, []int{2} }

type MeteringReqResp struct {
	MeterDriver      MeterDriver      `protobuf:"varint,1,opt,name=meter_driver,json=meterDriver,proto3,enum=pb.MeterDriver" json:"meter_driver,omitempty"`
	MeterUrl         string           `protobuf:"bytes,2,opt,name=meter_url,json=meterUrl,proto3" json:"meter_url,omitempty"`
	MeterRequest     map[int32][]byte `protobuf:"bytes,3,rep,name=meter_request,json=meterRequest" json:"meter_request,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimestampNanosec int64            `protobuf:"varint,4,opt,name=timestamp_nanosec,json=timestampNanosec,proto3" json:"timestamp_nanosec,omitempty"`
	MeterResponse    map[int32][]byte `protobuf:"bytes,5,rep,name=meter_response,json=meterResponse" json:"meter_response,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StateCode        int32            `protobuf:"varint,6,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage     string           `protobuf:"bytes,7,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *MeteringReqResp) Reset()                    { *m = MeteringReqResp{} }
func (m *MeteringReqResp) String() string            { return proto.CompactTextString(m) }
func (*MeteringReqResp) ProtoMessage()               {}
func (*MeteringReqResp) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

func (m *MeteringReqResp) GetMeterDriver() MeterDriver {
	if m != nil {
		return m.MeterDriver
	}
	return MeterDriver_CADVISOR
}

func (m *MeteringReqResp) GetMeterUrl() string {
	if m != nil {
		return m.MeterUrl
	}
	return ""
}

func (m *MeteringReqResp) GetMeterRequest() map[int32][]byte {
	if m != nil {
		return m.MeterRequest
	}
	return nil
}

func (m *MeteringReqResp) GetTimestampNanosec() int64 {
	if m != nil {
		return m.TimestampNanosec
	}
	return 0
}

func (m *MeteringReqResp) GetMeterResponse() map[int32][]byte {
	if m != nil {
		return m.MeterResponse
	}
	return nil
}

func (m *MeteringReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *MeteringReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MeteringReqResp)(nil), "pb.MeteringReqResp")
	proto.RegisterEnum("pb.MeterDriver", MeterDriver_name, MeterDriver_value)
	proto.RegisterEnum("pb.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("pb.MetricType", MetricType_name, MetricType_value)
}
func (m *MeteringReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeteringReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MeterDriver != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.MeterDriver))
	}
	if len(m.MeterUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.MeterUrl)))
		i += copy(dAtA[i:], m.MeterUrl)
	}
	if len(m.MeterRequest) > 0 {
		for k, _ := range m.MeterRequest {
			dAtA[i] = 0x1a
			i++
			v := m.MeterRequest[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMetric(uint64(len(v)))
			}
			mapSize := 1 + sovMetric(uint64(k)) + byteSize
			i = encodeVarintMetric(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMetric(dAtA, i, uint64(k))
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMetric(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if m.TimestampNanosec != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.TimestampNanosec))
	}
	if len(m.MeterResponse) > 0 {
		for k, _ := range m.MeterResponse {
			dAtA[i] = 0x2a
			i++
			v := m.MeterResponse[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMetric(uint64(len(v)))
			}
			mapSize := 1 + sovMetric(uint64(k)) + byteSize
			i = encodeVarintMetric(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMetric(dAtA, i, uint64(k))
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMetric(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func encodeFixed64Metric(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Metric(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetric(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MeteringReqResp) Size() (n int) {
	var l int
	_ = l
	if m.MeterDriver != 0 {
		n += 1 + sovMetric(uint64(m.MeterDriver))
	}
	l = len(m.MeterUrl)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if len(m.MeterRequest) > 0 {
		for k, v := range m.MeterRequest {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMetric(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMetric(uint64(k)) + l
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if m.TimestampNanosec != 0 {
		n += 1 + sovMetric(uint64(m.TimestampNanosec))
	}
	if len(m.MeterResponse) > 0 {
		for k, v := range m.MeterResponse {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMetric(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMetric(uint64(k)) + l
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovMetric(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func sovMetric(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeteringReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeteringReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeteringReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterDriver", wireType)
			}
			m.MeterDriver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterDriver |= (MeterDriver(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.MeterRequest == nil {
				m.MeterRequest = make(map[int32][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthMetric
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, dAtA[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.MeterRequest[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.MeterRequest[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNanosec", wireType)
			}
			m.TimestampNanosec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampNanosec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.MeterResponse == nil {
				m.MeterResponse = make(map[int32][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthMetric
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, dAtA[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.MeterResponse[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.MeterResponse[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetric(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/metric.proto", fileDescriptorMetric) }

var fileDescriptorMetric = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0xd4, 0x5c,
	0x14, 0x9d, 0xd3, 0x32, 0xf3, 0xc1, 0x9e, 0x01, 0x0e, 0x3b, 0x7c, 0x5a, 0x07, 0x28, 0x15, 0xd4,
	0x4c, 0x30, 0xc1, 0x38, 0xde, 0x18, 0x6f, 0xb4, 0x0c, 0xc7, 0x50, 0x4d, 0x5b, 0x3c, 0xed, 0x70,
	0x3b, 0xe9, 0xc0, 0x91, 0x34, 0xd2, 0x1f, 0xda, 0x42, 0xc2, 0xad, 0x4f, 0xe1, 0x23, 0x79, 0x65,
	0x7c, 0x04, 0x83, 0x4f, 0xe0, 0x1b, 0x18, 0x4e, 0x67, 0x98, 0xc2, 0x88, 0x89, 0x77, 0xb3, 0xd7,
	0x5a, 0xb3, 0xd7, 0x5e, 0xab, 0x69, 0x61, 0x31, 0x1d, 0x3e, 0x8b, 0x44, 0x91, 0x85, 0x87, 0xdb,
	0x69, 0x96, 0x14, 0x09, 0x2a, 0xe9, 0x70, 0xe3, 0x97, 0x0a, 0x8b, 0xb6, 0x28, 0x44, 0x16, 0xc6,
	0xc7, 0x5c, 0x9c, 0x72, 0x91, 0xa7, 0xd8, 0x85, 0x56, 0x74, 0x05, 0x0d, 0x8e, 0xb2, 0xf0, 0x5c,
	0x64, 0x1a, 0x31, 0x48, 0x67, 0xa1, 0xbb, 0xb8, 0x9d, 0x0e, 0xb7, 0xa5, 0x74, 0x57, 0xc2, 0xbc,
	0x19, 0x4d, 0x06, 0x5c, 0x81, 0xb9, 0xf2, 0x3f, 0x67, 0xd9, 0x89, 0xa6, 0x18, 0xa4, 0x33, 0xc7,
	0x67, 0x25, 0xd0, 0xcf, 0x4e, 0xf0, 0x1d, 0xcc, 0x97, 0x64, 0x26, 0x4e, 0xcf, 0x44, 0x5e, 0x68,
	0xaa, 0xa1, 0x76, 0x9a, 0xdd, 0xc7, 0xd7, 0x1b, 0x27, 0xe6, 0xe5, 0xcc, 0x4b, 0x1d, 0x8b, 0x8b,
	0xec, 0x82, 0x97, 0xc7, 0x8c, 0x20, 0x7c, 0x0a, 0x4b, 0x45, 0x18, 0x89, 0xbc, 0x08, 0xa2, 0x74,
	0x10, 0x07, 0x71, 0x92, 0x8b, 0x43, 0x6d, 0xc6, 0x20, 0x1d, 0x95, 0xd3, 0x6b, 0xc2, 0x29, 0x71,
	0xb4, 0x61, 0x61, 0x6c, 0x9c, 0xa7, 0x49, 0x9c, 0x0b, 0xad, 0x2e, 0x9d, 0x9f, 0xfc, 0xc5, 0xb9,
	0x14, 0x96, 0xd6, 0xf3, 0x51, 0x15, 0xc3, 0x35, 0x80, 0xbc, 0x08, 0x0a, 0x31, 0x38, 0x4c, 0x8e,
	0x84, 0xd6, 0x30, 0x48, 0xa7, 0xce, 0xe7, 0x24, 0xd2, 0x4b, 0x8e, 0x04, 0x6e, 0xc2, 0x7c, 0x49,
	0x47, 0x22, 0xcf, 0x83, 0x63, 0xa1, 0xfd, 0x27, 0x7b, 0x68, 0x49, 0xd0, 0x2e, 0xb1, 0xf6, 0x6b,
	0x58, 0x9a, 0x8a, 0x88, 0x14, 0xd4, 0x4f, 0xe2, 0x42, 0x16, 0x5d, 0xe7, 0x57, 0x3f, 0x71, 0x19,
	0xea, 0xe7, 0xc1, 0xc9, 0x99, 0x90, 0x5d, 0xb6, 0x78, 0x39, 0xbc, 0x52, 0x5e, 0x92, 0xf6, 0x1b,
	0xc0, 0xe9, 0x4b, 0xff, 0x65, 0xc3, 0x16, 0x83, 0x66, 0xe5, 0x39, 0x62, 0x0b, 0x66, 0x7b, 0xe6,
	0xee, 0x81, 0xe5, 0xb9, 0x9c, 0xd6, 0x10, 0xa0, 0xb1, 0xeb, 0xf6, 0xde, 0x33, 0x4e, 0xc9, 0x15,
	0xb3, 0xc7, 0xcc, 0x7d, 0xcf, 0x67, 0x9c, 0x2a, 0xb8, 0x00, 0xb0, 0xcf, 0x5d, 0x9b, 0xf9, 0x7b,
	0xac, 0xef, 0x51, 0x75, 0xeb, 0xb3, 0x02, 0xcd, 0x51, 0x0a, 0xff, 0x22, 0x15, 0xb8, 0x01, 0xfa,
	0x78, 0xcf, 0xe0, 0xe0, 0xf9, 0xc0, 0x36, 0x7b, 0x7b, 0x96, 0xc3, 0x2c, 0xe7, 0xad, 0xcb, 0xd9,
	0x87, 0x3e, 0xf3, 0x7c, 0x5a, 0xc3, 0x47, 0x60, 0x54, 0x35, 0xbd, 0x24, 0x2e, 0x82, 0x30, 0x16,
	0x99, 0x15, 0x7f, 0x4c, 0x46, 0xbb, 0x28, 0x41, 0x03, 0x56, 0xab, 0x2a, 0x76, 0xc0, 0x1c, 0xbf,
	0xba, 0x47, 0xc1, 0x4d, 0x58, 0x9f, 0x28, 0xba, 0x63, 0x2f, 0xcf, 0x37, 0x7d, 0x6f, 0x2c, 0x52,
	0xf1, 0x21, 0xac, 0x55, 0x45, 0xa6, 0xef, 0x73, 0x6b, 0xa7, 0xef, 0xb3, 0x6b, 0xc9, 0x0c, 0xea,
	0xd0, 0xae, 0x4a, 0x46, 0x27, 0xb8, 0x69, 0x11, 0x26, 0x71, 0x4e, 0xeb, 0xb8, 0x0e, 0x2b, 0x13,
	0x9e, 0x71, 0xcf, 0x72, 0x9d, 0xea, 0x21, 0x8d, 0xad, 0x6f, 0x04, 0xc0, 0x96, 0x2f, 0x95, 0xec,
	0x60, 0x05, 0xee, 0xdf, 0xd1, 0x01, 0xad, 0xe1, 0x1a, 0x3c, 0xb8, 0x11, 0xde, 0x75, 0x7c, 0xd3,
	0x72, 0x18, 0x97, 0x34, 0xc1, 0xff, 0x61, 0x69, 0x2a, 0x35, 0x55, 0x70, 0x15, 0xb4, 0xbb, 0xa2,
	0x52, 0x15, 0xdb, 0x70, 0xef, 0xcf, 0x19, 0xe9, 0xcc, 0x4d, 0xbf, 0xee, 0x2d, 0xbf, 0x3a, 0x2e,
	0x03, 0xbd, 0x9d, 0x8d, 0x36, 0x76, 0xe8, 0xd7, 0x4b, 0x9d, 0x7c, 0xbf, 0xd4, 0xc9, 0x8f, 0x4b,
	0x9d, 0x7c, 0xf9, 0xa9, 0xd7, 0x86, 0x0d, 0xf9, 0xb5, 0x78, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x13, 0xc2, 0xb5, 0xbb, 0x40, 0x04, 0x00, 0x00,
}
